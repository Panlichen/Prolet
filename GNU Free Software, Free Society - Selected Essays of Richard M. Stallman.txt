    Free Software Free Society
    Selected Essays of Richard M. stallman
    Introduction by Lawrence Lessig
    Edited by Joshua Gay
    GNU Press
    www.gnupress.org
    Free Software foundation
    Boston Ma usa

==========第1页==========
    First printing, first edition
    Copyright 2002 Free Software Foundation, Inc
    ISBN1-88211498-1
    Published by the Free Software Foundation59 Temple place
    Boston MA Tel: 1-617-542-5942
    Fax:1-617-542-2652
    Email: gnu@gnu. org
    Webwww.gnu.org
    GNU Press is an imprint of the FSF.
    Email: press a gnu. org
    Web:www.gnupress.org
    Please contact the GNU Press for information regarding bulk purchases for classroom or user group use, reselling, or any other questions or comments
    Original artwork by Etienne Suvasa. Cover design by Jonathan Richard
    Permission is granted to make and distribute verbatim copies of this book providedthe copyright notice and this permission notice are preserved on all copies
    Permission is granted to copy and distribute translations of this book into anotherlanguage, from the original English, with respect to the conditions on distributionof modified versions above, provided that it has been approved by the Free Software
    Foundation

==========第2页==========
    Short Contents
    Editor 's note
    a Note on software
    137
    opIc guide
    Introduction
    Section one
    15
    1 The gNu Project∴∴2 The gnu manifesto
    33
    3 Free Software Definition
    43
    4 Why software should not have owners。。
    。47
    5What' s in a name?。。,。。,
    53
    6 Why"Free Software"is Better than“ Open Source”∴7 Releasing Free Software if You Work at a University
    ●●●●●●●●
    8 Selling free software.....,,。。,
    65
    Free Software Needs free documentation
    。69
    10 Free Software Song
    Section two.。。,。。。。。,,。。
    73
    11 The right to read
    。。,75
    12 Misinterpreting Copyright- A Series of errors.……∴∴.7913 Science Must Push' Copyright Aside
    89
    14 What is Copyleft?.∴∴∴∴∴∴∴15 Copyleft: Pragmatic Idealism16 The Danger of Software Patents
    97
    Section three,,,。。,,。。。,。,,。。,。,,。。,
    115
    17 Can You Trust Your Computer?。。
    117
    18 Why Software Should Be free.............. 12119 Copyright and Globalization in the Age of Computer Networks. 13520 Free Software: Freedom and cooperation
    。,157
    21 Words to avoid
    Section four。。。。。
    。197
    GNU General Public license。,。。,。,,。。
    199
    GNU Lesser General Public license
    207

==========第3页==========
    Free Software, Free Society: Selected Essays of Richard M. stallman
    GNU Free documentation license,,,。,,。,,,。,,,,
    217

==========第4页==========
    Table of contents
    Editor’ s Note
    A Note on Software
    3
    Topic Guide
    Introduction
    ,11
    Section one
    15
    1 The gNu Proiect
    17
    2 The gnu manifesto...4...33
    3 Free Software definition
    43
    4 Why Software Should Not Have Owners......47
    5What’ s in a name?.53
    6Why"“ Free Software” is better than“ Open Source”
    57
    7 Releasing Free Software if You Work at a University
    n,63
    8 Selling Free Software................ 65
    9 Free Software Needs free documentation
    69
    10 Free Software Song................ 71
    Section two
    73

==========第5页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    1 The Right to read
    75
    12 Misinterpreting Copyright--A Series of Errors.. 7913 Science must‘Push’ Copyright aside..8914 What is Copyleft?
    91
    15 Copyleft: Pragmatic Idealism
    ,,93
    16 The Danger of software Patents
    97
    Section Three
    ,115
    17 Can You Trust Your Computer?
    ,117
    18 Why Software Should Be Free
    121
    19 Copyright and Globalization in the Age of Computer
    Networks
    135
    20 Free Software: Freedom and Cooperation
    157
    21 Words to avoid
    191
    Section four
    n,,197
    GNU General public license
    n199
    Preamble
    199
    TERMS AND CONDITIONS FOR COPYING. DISTRIBUTION AND
    MODIFICATION
    200
    Appendix: How to Apply These Terms to Your New Programs
    205
    GNU Lesser general Public license.........207
    Preamble
    207
    TERMS AND CONDITIONS FOR COPYING. DISTRIBUTION AND
    MODIFICATION
    209
    How to Apply These Terms to Your New Libraries
    216
    GNU Free Documentation License
    217
    ADDENdUM: How to Use This license for Your documents
    223

==========第6页==========
    Editor 's note
    Editor’ s Note
    The waning days of the 20th century seemed like an Orwellian nightmare: lawspreventing publication of scientific research on software; laws preventing sharingsoftware, an overabundance of software patents preventing development; and enduser license agreements that strip the user of all freedoms--including ownershipprivacy, sharing, and understanding how their software works. This collection ofessays and speeches by richard M. stallman addresses many of these issues. aboveall, Stallman discusses the philosophy underlying the free software movement. Thismovement combats the oppression of federal laws and evil end-user license agreements in hopes of spreading the idea of software freedom
    With the force of hundreds of thousands of developers working to create GNUsoftware and the gnu/linux operating system, free software has secured a spot onthe servers that control the internet and-as it moves into the desktop computermarket--is a threat to microsoft and other proprietary software companies
    These essays cater to a wide audience, you do not need a computer science back-ground to understand the philosophy and ideas herein However. there is a"Note on
    Software to help the less technically inclined reader become familiar with somecommon computer science jargon and concepts, as well as footnotes throughout
    Many of these essays have been updated and revised from their originally published version. Each essay carries permission to redistribute verbatim copies
    The ordering of the essays is fairly arbitrary, in that there is no required order toread the essays in, for they were written independently of each other over a periodof 18 years. The first section, "The gNU Project and Free Software, "is intendedto familiarize you with the history and philosophy of free software and the gnuproject. Furthermore, it provides a road map for developers, educators, and business people to pragmatically incorporate free software into society, business, andlife. The second section, Copyright, Copyleft, and Patents, discusses the philo-sophical and political groundings of the copyright and patent system and how it haschanged over the past couple of hundred years. Also, it discusses how the currentlaws and regulations for patents and copyrights are not in the best interest of theconsumer and end user of software music. movies and other media. Instead thissection discusses how laws are geared towards helping business and governmentcrush your freedoms. The third section, "Freedom, Society, and Software"con-tinues the discussion of freedom and rights, and how they are being threatened byproprietary software, copyright law, globalization, trusted computing, and othersocially harmful rules, regulations and policies. One way that industry and government are attempting to persuade people to give up certain rights and freedoms isby using terminology that implies that sharing information, ideas, and software isbad; therefore, we have included an essay explaining certain words that are confusing and should probably be avoided. The fourth section, The Licenses, containsthe gnu general public license. the gnu lesser general public license and theGNU Free Documentation License: the cornerstones of the gnu project
    If you wish to purchase this book for yourself, for classroom use, or for distribution, please write to the Free Software Foundation(FSF)at sales @fsf. org orvisithttp://order.fsforg/.Ifyouwishtohelpfurtherthecauseofsoftwarefreedom

==========第7页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    pleaseconsideringdonatingtothefsfbyvisitinghttp://donate.fsf.org(orwriteto donations @fsf. org for more details). You can also contact the fsf by phone at+1-617-542-5942
    There are perhaps thousands of people who should be thanked for their contributions to the gnu project however their names will never fit on any single list
    Therefore, I wish to extend my thanks to all of those nameless hackers, as wellas people who have helped promote, create, and spread free software around theworld
    For helping make this book possible. i would like to thank
    Julie sussman, P.P.A., for editing multiple copies at various stages of development, for writing the "Topic Guide, and for giving her insights into everythingfrom commas to the ordering of the chapters
    Lisa(Opus) Goldstein and Bradley M. Kuhn for their help in organizing, proofreading, and generally making this collection possible
    Claire H. Avitabile, Richard Buckman, Tom Chenelle, and(especially) Stephen
    Compall for their careful proofreading of the entire collection
    Karl Berry, Bob Chassell, Michael Mounteney, and M. Ramakrishnan fortheir expertise in the helping to format and
    this collection in TEXinfo,
    (http://www.texinfo.org
    Mats Bengtsson for his help in formatting the Free Software Song in Lilypond(http://www.gnu.org/software/lilypond/)
    Etienne Suvasa for the images that begin each section, and for all the art he hascontributed to the Free Software Foundation over the years
    and Melanie Flanagan and Jason Polan for making helpful suggestions for the everyday reader. A special thanks to Bob Tocchio, from Pauls Transmission Repair,for his insight on automobile transmissions
    Also, I wish to thank my mother and father, Wayne and Jo-Ann Gay, for teachinme that one should live by the ideals that one stands for, and for introducing memy two brothers, and three sisters to the importance of sharing
    Lastly and most importantly, I would like to extend my gratitude to Richard m
    Stallman for the gnu philosophy, the wonderful software, and the literature thathe has shared with the world
    shua cay
    joshegnu org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第8页==========
    a Note on software
    A Note on Software
    This section is intended for people who have little or no knowledge of the technical aspects of computer science. It is not necessary to read this section to under-stand the essays and speeches presented in this book; however, it may be helpfulo those readers not familar with some of the jargon that comes with programmingand computer scienc
    A computer programmer writes software, or computer programs. A programis more or less a recipe with commands to tell the computer what to do in orderto carry out certain tasks. You are more than likely familiar with many differentprograms: your Web browser, your word processor, your email client, and the like
    A program usually starts out as source code. This higher-level set of commandsis written in a programming language such as C or Java. After that, a tool known asa compiler translates this to a lower-level language known as assembly language
    Another tool known as an assembler breaks the assembly code down to the finalstage of machine language-the lowest level-which the computer understandsnatively
    Source
    Compiler
    Assembler
    Machine
    →
    Code
    Code
    For example, consider the"hello world" program, a common first program forpeople learning C, which(when compiled and executed) prints"Hello World! onhe screen
    七
    ()
    He11 o World!"′)
    In the Java programming language the same program would be written like this
    public static void main(string args[])
    1 In other programming languages, such as Scheme, the Hello World program is usually not your
    first program. In Scheme you often start with a program like this
    This computes the factorial of a number; that is, running (factorial 5) would output 120which is computed by doing 543*2

==========第9页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    However, in machine language, a small section of it may look similar to this
    110001111011101010010100100100101010111001101010100110000011110010110101011111010100111111111110010110110000000010100100010010000110010101101100011011000110111100100000010101110110111101110010011011000110010000100001010000100110111101101111
    The above form of machine language is the most basic representation known asbinary. All data in computers is made up of a series of o-or-l values, but a personwould have much difficulty understanding the data To make a simple change to thebinary, one would have to have an intimate knowledge of how a particular computerinterprets the machine language This could be feasible for small programs like theabove examples, but any interesting program would involve an exhausting effort tomake simple changes
    As an example. imagine that we wanted to make a change to our " hello worldprogram written in C so that instead of printing Hello World"in English it printsit in French The change would be simple, here is the new program
    int main() i
    Bon
    return o
    It is safe to say that one can easily infer how to change the program written in the
    Java programming language in the same way. However, even many programmerswould not know where to begin if they wanted to change the binary representation
    When we say"source code, we do not mean machine language that only computerscan understand--we are speaking of higher-level languages such as C and Java. Afew other popular programming languages are C++, Perl, and Python. Some areharder than others to understand and program in, but they are all much easier towork with compared to the intricate machine language they get turned into after theprograms are compiled and assembled
    Another important concept is understanding what an operating system is. Anoperating system is the software that handles input and output, memory allocationand task scheduling. Generally one considers common or useful programs suchas the graphical user Interface (gun to be a part of the operating system. TheGNU/Linux operating system contains a both GNU and non-GNU software, anda kernel called Linux. The kernel handles low-level tasks that applications dependupon such as input/output and task scheduling. The gnu software comprises muchof the rest of the operating system, including GCC, a general-purpose compiler formany languages; GNU Emacs, an extensible text editor with many, many featuresGNOME, the gnu desktop GNU libc, a library that all programs other than thekernel must use in order to communicate with the kernel and bash the gnu command interpreter that reads your command lines. Many of these programs were

==========第10页==========
    a Note on software
    pioneered by richard stallman early on in the gnu Project and come with anymodern GNU/Linux operating system
    It is important to understand that even if you cannot change the source code fora given program, or directly use all these tools, it is relatively easy to find someonewho can. Therefore, by having the source code to a program you are usually giventhe power to change, fix, customize, and learn about a program--this is a powerthat you do not have if you are not given the source code. Source code is one of therequirements that makes a piece of software free. The other requirements will befound along with the philosophy and ideas behind them in this collection. Enjoy
    Richard e Buckmanonua cay
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第11页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第12页==========
    Topic guide
    Topic Guide
    Since the essays and speeches in this book were addressed to different audiencesit different times, there is a considerable amount of overlap, with some issues beingdiscussed in more than one place. Because of this, and because we did not have theopportunity to make an index for this book, it could be hard to go back to somethingyou read about unless its location is obvious from a chapter title
    We hope that this short guide, though sketchy and incomplete (it does not coverll topics or all discussions of a given topic), will help you find some of the ideasand explanations you are interested in
    ulie sussman p pa
    Overview
    Chapter I gives an overview of just about all the software-related topics in thisbook Chapter 20 is also an overview
    For the non-software topics see privacy and personal freedom, Intellectual
    Property, and Copyright, belowGNU Project
    For the history of the gnu project, see Chapters I and 20
    For a delightful explanation of the origin and pronunciation of the recursivecrony GNU (GNUs Not Unix, pronounced guh-NEW), see Chapter 20
    The"manifesto"that launched the gnu Project is included here as Chapter 2
    See also the linux. GnU/linux topic below
    Free Software Foundation
    You can read about the history and function of the Free Software Foundation in
    Chapters I and 20, and under Funding Free Software in Chapter 18
    Free software
    We will not attempt to direct you to all discussions of free software in this booksince every chapter except 11.12.13.16. 17 and 19 deals with free software
    For a history of free software -from free software to proprietary software andback again-see Chapter 1
    Free Software is defined, and the definition discussed, in Chapter 3. The defintion is repeated in several other chapters
    For a discussion of the ambiguity of the wordfree"and why we still use it tomean“free”asin“ free speech;” not as in“ free beer,”'see“ Free as in freedon'”in
    Chapter 1 and"Ambiguity?in chapter 6
    See also Source Code, Open Source, and Copyleft, below
    Free software is translated into 21 languages in Chapter 21
    This essay is from Free Software, Free Society: Selected Essays of Richard M. Stallman, 2nd ed(boSton:GnuPress,2004),IsBN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第13页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Source Code Source
    Source code is mentioned throughout the discussions of free software If yourenot sure what that is. read "a note on software
    Linux gnulinux
    For the origin of Linux, and the distinction between Linux(the operating-systemkernel) and GNU/Linux(a full operating system), see the short mention under
    Linux and gnu/linux in Chapter I and the full story in Chapter 20
    For reasons to say GNU/Linux when referring to that operating system ratherthan abbreviating it to Linux see Chapters 5 and 20
    Privacy and Personal Freedom
    For some warnings about the loss of personal freedom, privacy, and access towritten material that we have long taken for granted, see Chapters ll, 13, and 17
    All of these are geared to a general audience
    Open Source
    For the difference between the open source movement and the free softwaremovement, see Chapter 6. This is also discussed in Chapter 1 (under "Open
    Source)and Chapter 20
    Intellectual Property
    For an explanation of why the term "intellectual property"is both misleadinand a barrier to addressing So-called"intellectual property"issues, see Chapter 21and the beginning of Chapter 16
    For particular types of"intellectual property'"see the Copyright and Patents topics, below
    Copyright
    Note: Most of these copyright references are not about software
    For the history, purpose, implementation, and effects of copyright, as well as recommendations for copyright policy, see Chapters 12 and 19. Topics critical in ourdigital age, such as e-books and the Digital Millennium Copyright Act ( DMCa)are addressed here
    For the difference between patents and copyrights, see chapter 16
    For the use of copyright in promoting free software and free documentation, see
    Copyleft, just below
    Copyleft
    For an explanation of copy left and how it uses the copyright system to promotefree software, see Chapter l(under"Copyleft and the gnu GPl), Chapter 14, and
    Chapter 20. See also licenses below
    For an argument that copyleft is practical and effective as well as idealistic, see
    Chapter 15
    Chapter 9 argues for free manuals to accompany free software
    Licenses
    The gnu licenses, which can be used to copyleft software or manuals, are introduced in Chapter 14 and given in full in Section Four
    Patents
    See Chapter 16 for the difference between patents and copyrights and for arguments against patenting software and why it is different from other patentablethings. Software-patent policy in other countries is also discussed

==========第14页==========
    Topic guide
    Hacker versus cracker
    For the proper use of these terms see the beginning of Chapter I

==========第15页==========
    10
    Free Software. Free Society Selected essays of richard M. stallman

==========第16页==========
    Introduction
    Introduction
    Every generation has its philosopher writer or an artist who captures theimagination of a time. Sometimes these philosophers are recognized as such; oftenit takes generations before the connection is made real. But recognized or not, atime gets marked by the people who speak its ideals, whether in the whisper of apoem, or the blast of a political movement
    Our generation has a philosopher. He is not an artist, or a professional writer.
    He is a programmer. Richard stallman began his work in the labs of MIT, as a pro-grammer and architect building operating system software. He has built his careeron a stage of public life. as a programmer and an architect founding a movementfor freedom in a world increasingly defined by " code
    Code is the technology that makes computers run. Whether inscribed in software or burned in hardware. it is the collection of instructions first written inwords, that directs the functionality of machines. These machines--computersincreasingly define and control our life They determine how phones connect, andwhat runs on TV. They decide whether video can be streamed across a broadbandlink to a computer. They control what a computer reports back to its manufacturer
    These machines run us Code runs these machines
    What control should we have over this code? what understanding? what freedom should there be to match the control it enables? what power?
    These questions have been the challenge of stallman's life. Through his worksand his words, he has pushed us to see the importance of keeping code"free. Notfree in the sense that code writers dont get paid, but free in the sense that thecontrol coders build be transparent to all, and that anyone have the right to take thatcontrol and modify it as he or she sees fit. This is free software free softwareis one answer to a world built in code
    Free. Stallman laments the ambiguity in his own term. There's nothing tolament. Puzzles force people to think, and this term "free does this puzzling workquite well. To modern American ears. "free software'" sounds utopian impossible
    Nothing, not even lunch, is free. How could the most important words runningthe most critical machines running the world be"free. How could a sane societyaspire to such an ideal?
    Yet the odd clink of the word " free is a function of us not of the term ""Freehas different senses, only one of which refers to"price. A much more fundamental sense of“free” is the“free; Stallman says, in the term“ free speech,”orperhaps better in the term"free labor Not free as in costless, but free as in limitedin its control by others. Free software is control that is transparent, and open to
    This introduction is from Free Software, Free Society: Selected Essays of richard M. Stallman, 2nd ed(boSton:GnuPress,2004),IsBN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第17页==========
    12
    Free Software, Free Society: Selected essays of richard m. stallman
    change, just as free laws, or the laws of a"free society, are free when they maketheir control knowable and open to change. The aim of stallman's free softwaremovement"is to make as much code as it can transparent, and subject to changeby rendering it“free
    The mechanism of this rendering is an extraordinarily clever device called"copleft"implemented through a license called GPL. Using the power of copyright lawfree software"not only assures that it remains open, and subject to change, butthat other software that takes and uses ""free software''(and that technically countsas a derivative work")must also itself be free. If you use and adapt a free softwareprogram, and then release that adapted version to the public, the released versionmust be as free as the version it was adapted from It must, or the law of copyrightwill be violated
    Free software, like free societies has its enemies Microsoft has waged a waragainst the gPl, warning whoever will listen that the gPl is a"dangerous"license
    The dangers it names, however, are largely illusory. Others object to the " coercionin gPls insistence that modified versions are also free, but a condition is notcoercion. If it is not coercion for microsoft to refuse to permit users to distributemodified versions of its product Office without paying it(presumably) millions,then it is not coercion when the gpl insists that modified versions of free softwarebe free too
    And then there are those who call stallman's message too extreme. But extremeit is not. Indeed. in an obvious sense, Stallman's work is a simple translation ofthe freedoms that our tradition crafted in the world before code. "free softwarewould assure that the world governed by code is as freeas our tradition that builtthe world before code
    For example: A"free society" is regulated by law. But there are limits that anyfree society places on this regulation through law: No society that kept its lawssecret could ever be called free. no government that hid its regulations from theregulated could ever stand in our tradition. Law controls. but it does so justly onlywhen visibly And law is visible only when its terms are knowable and controllableby those it regulates, or by the agents of those it regulates (lawyers, legislatures)
    This condition on law extends beyond the work of a legislature. Think about thepractice of law in American courts. Lawyers are hired by their clients to advancetheir clients' interests. Sometimes that interest is advanced through litigation In thecourse of this litigation, lawyers write briefs. These briefs in turn affect opinionswritten by judges. These opinions decide who wins a particular case, or whether acertain law can stand consistently with a constitution
    All the material in this process is free in the sense that Stallman means. Legalbriefs are open and free for others to use. The arguments are transparent(whichis different from saying they are good) and the reasoning can be taken without thepermission of the original lawyers. The opinions they produce can be quoted inater briefs. They can be copied and integrated into another brief or opinion. Thesource code"for American law is by design, and by principle, open and free foryone to take. And take lawyers do-for it is a measure of a great brief that itachieves its creativity through the reuse of what happened before. The source isfree; creativity and an economy is built upon it

==========第18页==========
    Introduction
    13
    This economy of free code(and here I mean free legal code) doesnt starvelawyers. Law firms have enough incentive to produce great briefs even though thestuff they build can be taken and copied by anyone else. The lawyer is a craftsmanhis or her product is public. Yet the crafting is not charity. Lawyers get paid; thepublic doesnt demand such work without price. Instead this economy fourisheswith later work added to the earlier
    We could imagine a legal practice that was different--briefs and arguments thatwere kept secret; rulings that announced a result but not the reasoning. Laws thatwere kept by the police but published to no one else. Regulation that operatedwithout explaining its rule
    We could imagine this society, but we could not imagine calling it"free
    Whether or not the incentives in such a society would be better or more efficientlyallocated. such a society could not be known as free. The ideals of freedom, oflife within a free society demand more than efficient application Instead openness and transparency are the constraints within which a legal system gets built, notoptions to be added if convenient to the leaders. Life governed by software codeshould be no less
    Code writing is not litigation. It is better, richer, more productive. But the laws an obvious instance of how creativity and incentives do not depend upon perfectcontrol over the products created. Like jazz, or novels, or architecture, the law getsbuilt upon the work that went before. This adding and changing is what creativityalways is. And a free society is one that assures that its most important resourcesremain free in just this sense
    For the first time. this book collects the writing and lectures of richard stallmanin a manner that will make their subtlety and power clear The essays span a widerange, from copyright to the history of the free software movement. They includemany arguments not well known, and among these, an especially insightful accountof the changed circumstances that render copyright in the digital world suspect.
    They will serve as a resource for those who seek to understand the thought of thismost powerful man--powerful in his ideas, his passion, and his integrity, even ifpowerless in every other way. They will inspire others who would take these ideasand build upon them
    I dont know Stallman well. I know him well enough to know he is a hard manto like. He is driven, often impatient. His anger can flare at friend as easily as foe
    He is uncompromising and persistent; patient in both
    Yet when our world finally comes to understand the power and danger of code
    Then it finally sees that code, like laws, or like government, must be transparent tobe free--then we will look back at this uncompromising and persistent programmerand recognize the vision he has fought to make real: the vision of a world wherefreedom and knowledge survives the compiler. And we will come to see that noman, through his deeds or words, has done as much to make possible the freedomthat this next society could have
    We have not earned that freedom yet. We may well fail in securing it. Butwhether we succeed or fail, in these essays is a picture of what that freedom couldbe. And in the life that produced these words and works, there is inspiration foranyone who would. like stallman fight to create this freedom

==========第19页==========
    14
    Free Software, Free Society: Selected essays of richard m. stallman
    Lawrence lessig
    Professor of law, Stanford Law school

==========第20页==========
    Section one
    15
    Section one
    The gnu projectand free software

==========第21页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第22页==========
    Chapter 1: The GNU Project
    1 The gnu project
    The First Software-Sharing Community
    When I started working at the mit artificial Intelligence Lab in 1971, I becamepart of a software-sharing community that had existed for many years. Sharing ofsoftware was not limited to our particular community it is as old as computers justas sharing of recipes is as old as cooking. But we did it more than most
    The AI Lab used a timesharing operating system called Its(the Incompatible
    Timesharing System) that the lab's staff hackers had designed and written in assembler language for the Digital PDP-10, one of the large computers of the era. Asa member of this community, an AI lab staff system hacker, my job was to improvethis system
    We did not call our software free software because that term did not yet existbut that is what it was. Whenever people from another university or a companywanted to port and use a program, we gladly let them. If you saw someone usingan unfamiliar and interesting program, you could always ask to see the source code,so that you could read it, change it, or cannibalize parts of it to make a new program
    The use of"hacker"to mean"security breaker"is a confusion on the part of themass media. We hackers refuse to recognize that meaning and continue using theword to mean, "Someone who loves to program and enjoys being clever about it
    The Collapse of the community
    The situation changed drastically in the early 1980s, with the collapse of the A
    Lab hacker community followed by the discontinuation of the PDP-10 computer.
    In 1981, the spin-off company Symbolics hired away nearly all of the hackersfrom the ai lab and the depopulated community was unable to maintain itself(The book Hackers, by Steven Levy, describes these events, as well as giving a
    It is hard to write a simple definition of something as varied as hacking, but I think what mosthacks"have in common is playfulness, cleverness, and exploration. Thus, hacking means exploring the limits of what is possible, in a spirit of playful cleverness. Activities that display playfulcleverness have"hack value. You can help correct the misunderstanding simply by making adistinction between security breaking and hacking-by using the term"cracking" for securitybreaking. The people who do it are" crackers. Some of them may also be hackers, just as someof them may be chess players or golfers; most of them are not ("On Hacking, RMS; 2002)
    Originally published in Open Sources: Voices from the Open Source revolution;(OReilly, 1999)
    This essay is part of Free Software, Free Society: Selected Essays of richard M. Stallman, 2nd ed(boSton:GnuPress,2004),IsBN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第23页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    clear picture of this community in its prime. ) When the AI Lab bought a new PDP10 in 1982, its administrators decided to use Digital's non-free timesharing systemnstead of its on the new machine
    ot long afterwards, Digital discontinued the PDP-10 series. Its architecture,elegant and powerful in the 60s, could not extend naturally to the larger addressspaces that were becoming feasible in the 80s. This meant that nearly all of theprograms composing ITs were obsolete. That put the last nail in the coffin of Its15 years of work went up in smoke
    The modern computers of the era, such as the VaX or the 68020, had their ownoperating systems, but none of them were free software: you had to sign a nondisclosure agreement even to get an executable copy
    e This meant that the first step in using a computer was to promise not to help your
    neighbor. A cooperating community was forbidden. The rule made by the ownersof proprietary software was, ""If you share with your neighbor, you are a pirate Ifyou want any changes, beg us to make them.
    The idea that the proprietary -software social system -the system that says youare not allowed to share or change software -is antisocial that it is unethical thatit is simply wrong, may come as a surprise to some readers. But what else couldwe say about a system based on dividing the public and keeping users helpless?
    Readers who find the idea surprising may have taken this proprietary-software social system as given, or judged it on the terms suggested by proprietarysoftwarebusinesses. Software publishers have worked long and hard to convince people thatthere is only one way to look at the issue
    When software publishers talk about"enforcing,their"rights"or"stoppingpiracy, what they actuallysay''is secondary. The real message of these statements is in the unstated assumptions they take for granted; the public is supposedto accept them uncritically. so lets examine them
    One assumption is that software companies have an unquestionable natural rightto own software and thus have power over all its users. (If this were a naturalright, then no matter how much harm it does to the public, we could not object.
    Interestingly, the U.s. Constitution and legal tradition reject this view; copyright isnot a natural right, but an artificial government-imposed monopoly that limits the
    Another unstated assumption is that the only important thing about software iswhat jobs it allows you to do- that we computer users should not care what kindof society we are allowed to have
    a third assumption is that we would have no usable software (or would neverhave a program to do this or that particular job) if we did not offer a companypower over the users of the program. This assumption may have seemed plausiblebefore the free software movement demonstrated that we can make plenty of usefulsoftware without putting chains on it
    If we decline to accept these assumptions, and judge these issues based on ordinary common-sense morality while placing the users first, we arrive at very dif-ferent conclusions. Computer users should be free to modify programs to fit theirneeds, and free to share software, because helping other people is the basis of soci

==========第24页==========
    Chapter 1: The GNU Project
    a Stark moral choice
    With my community gone, to continue as before was impossible. Instead, I faceda stark moral choice
    The easy choice was to join the proprietary software world, signing nondisclosure agreements and promising not to help my fellow hacker. Most likely I wouldalso be developing software that was released under nondisclosure agreements, thusadding to the pressure on other people to betray their fellows too
    I could have made money this way, and perhaps amused myself writing code
    But I knew that at the end of my career, I would look back on years of buildingwalls to divide people, and feel I had spent my life making the world a worse placeI had already experienced being on the receiving end of a nondisclosure agreement, when someone refused to give me and the mit ai lab the source code for thecontrol program for our printer. The lack of certain features in this program madeuse of the printer extremely frustrating. So I could not tell myself that nondisclosure agreements were innocent. I was very angry when he refused to share with usI could not turn around and do the same thing to everyone else
    Another choice, straightforward but unpleasant, was to leave the computer field
    That way my skills would not be misused, but they would still be wasted. I wouldnot be culpable for dividing and restricting computer users, but it would happennonetheless
    So I looked for a way that a programmer could do something for the good. Isked myself, was there a program or programs that I could write, so as to make acommunity possible once again?
    The answer was clear: what was needed first was an operating system. That isthe crucial software for starting to use a computer. With an operating system, youcan do many things; without one, you cannot run the computer at all. with a freeoperating system, we could again have a community of cooperating hackers-andinvite anyone to join. And anyone would be able to use a computer without startingout by conspiring to deprive his or her friends
    As an operating system developer, I had the right skills for this job. So eventhough i could not take success for granted. i realized that i was elected to dothe job. I chose to make the system compatible with Unix so that it would beportable, and so that Unix users could easily switch to it. The name gnU waschosen following a hacker tradition, as a recursive acronym for"GNUs Not Unix.
    An operating system does not mean just a kernel, barely enough to run otherprograms. In the 1970s, every operating system worthy of the name included command processors, assemblers, compilers, interpreters, debuggers, text editors, mail-ers and much more. ItS had them. multics had them vms had them and unixhad them. The gnu operating system would include them too
    ater i heard these words attributed to hille
    If I am not for myself, who will be for me? If I am only for myself, whatam I? If not now. when?
    The decision to start the gnu project was based on a similar spirit
    As an atheist, I dont follow any religious leaders, but I sometimes find I admiresomething one of them has said

==========第25页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    Free as in Freedom
    The term "free software is sometimes misunderstood--it has nothing to do withprice. It is about freedom. Here, therefore, is the definition of free software:aprogram is free software, for you, a particular user, if
    You have the freedom to run the program, for any purpose
    You have the freedom to modify the program to suit your needs. to make thisfreedom effective in practice, you must have access to the source code, sincemaking changes in a program without having the source code is exceedinglydifficult.
    You have the freedom to redistribute copies, either gratis or for a fee
    You have the freedom to distribute modified versions of the program, so thatthe community can benefit from your improvements
    Since"free" refers to freedom, not to price, there is no contradiction betweenselling copies and free software. In fact, the freedom to sell copies is crucialcollections of free software sold on cd-roms are important for the communitand selling them is an important way to raise funds for free software development
    Therefore, a program that people are not free to include on these collections is notfree software
    Because of the ambiguity of"free, people have long looked for alternatives butno one has found a suitable alternative. The english language has more words andnuances than any other, but it lacks a simple, unambiguous word that means "free,as in freedom-"unfettered being the word that comes closest in meaning, Suchalternatives as "liberated,”“ freedom,”and“open” have either the wrong meaningor some other disadvantage
    GNU Software and the gnu system
    Developing a whole system is a very large project. To bring it into reach, I decided to adapt and use existing pieces of free software wherever that was possible
    For example, I decided at the very beginning to use TeX as the principal text formatter;a few years later, I decided to use the X Window System rather than writinganother window system for GNU
    Because of this decision, the gnu system is not the same as the collection of allGNU Software. The GNU system includes programs that are not gNU software,programs that were developed by other people and projects for their own purposesbut that we can use because they are free software
    Commencing the project
    In January 1984 I quit my job at MIT and began writing GNU software. LeavinMIT was necessary so that MIT would not be able to interfere with distributinggnu as free software, If i had remained on the staff mit could have claimed toown the work, and could have imposed their own distribution terms or even turnedthe work into a proprietary software package. I had no intention of doing a large

==========第26页==========
    Chapter 1: The GNU Project
    amount of work only to see it become useless for its intended purpose: creating anew software-sharing community
    However, Professor Winston, then the head of the MIt Al lab kindly invitedme to keep using the lab's facilities
    The First Steps
    Shortly before beginning the gnu project, I heard about the Free University
    Compiler Kit. also known as VuCK. ( The dutch word for "free" is written witha V) This was a compiler designed to handle multiple languages, including C and
    Pascal, and to support multiple target machines. I wrote to its author asking if GNUcould use it
    He responded derisively, stating that the university was free but the compilerwas not. I therefore decided that my first program for the gnu project would be amulti-language. multi-platform compiler
    Hoping to avoid the need to write the whole compiler myself, I obtained thesource code for the Pastel compiler, which was a multi-platform compiler developed at Lawrence Livermore Lab. It supported, and was written in, an extendedversion of Pascal, designed to be a system-programming language. I added a Cfront end, and began porting it to the Motorola 68000 computer. But I had to givthat up when I discovered that the compiler needed many megabytes of stack space,and the available 68000 Unix system would only allow 64k
    I then realized that the pastel compiler functioned by parsing the entire input fileinto a syntax tree, converting the whole syntax tree into a chain of"instructionsand then generating the whole output file, without ever freeing any storage. At thispoint, I concluded I would have to write a new compiler from scratch. That newcompiler is now known as gcc: none of the pastel compiler is used in it but Imanaged to adapt and use the c front end that I had written. But that was someyears later: first, I worked on Gnu Emacs
    GNU Emacs
    began work on GNU Emacs in September 1984, and in early 1985 it was beginning to be usable. This enabled me to begin using Unix systems to do editinghaving no interest in learning to use vi or ed, I had done my editing on other kindsof machines until then
    At this point, people began wanting to use GNU Emacs, which raised the ques-tion of how to distribute it. of course, i put it on the anonymous ftp server on theMIT computer that I used. (This computer, prep ai. mit. edu, thus became the principal gnu ftp distribution site; when it was decommissioned a few years later, wtransferred the name to our new ftp server. But at that time, many of the interestedpeople were not on the Internet and could not get a copy by ftp So the questionwas, what would i say to them?
    I could have said, Find a friend who is on the net and who will make a copy foryou. Or I could have done what I did with the original PDP-10 Emacs: tell them,
    Mail me a tape and a sase. and i will mail it back with Emacs on it But I had no

==========第27页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    ob and i was looking for ways to make money from free software. So i announcedthat I would mail a tape to whoever wanted one, for a fee of $150. In this way,I started a free software distribution business, the precursor of the companies thattoday distribute entire Linux-based GNU systems
    Is a program free for every user?
    If a program is free software when it leaves the hands of its author, this does notnecessarily mean it will be free software for everyone who has a copy of it. For example, public domain software(software that is not copyrighted) is free softwarebut anyone can make a proprietary modified version of it. Likewise, many free pro-grams are copyrighted but distributed under simple permissive licenses that allowproprietary modified versions
    The paradigmatic example of this problem is the X window system. Developedat mit. and released as free software with a permissive license. it was soon adoptedby various computer companies. They added X to their proprietary Unix systemsin binary form only, and covered by the same nondisclosure agreement. Thesecopies of x were no more free software than unix was
    The developers of the X Window System did not consider this a problem-theyexpected and intended this to happen. Their goal was not freedom, just"successdefined as having many users. They did not care whether these users had freedom,only that they should be numerous
    This lead to a paradoxical situation where two different ways of counting theamount of freedom gave different answers to the question, " Is this program free?
    If you judged based on the freedom provided by the distribution terms of the mitrelease, you would say that X was free software. but if you measured the freedomof the average user of X, you would have to say it was proprietary software. Most
    X users were running the proprietary versions that came with Unix systems, not thefree version
    Copyleft and the gNu gPl
    The goal of gnu was to give users freedom, not just to be popular. So we neededto use distribution terms that would prevent GNU software from being turned intoproprietary software. The method we use is called copyleft
    Copyleft uses copyright law, but flips it over to serve the opposite of its usualpurpose: instead of a means of privatizing software, it becomes a means of keeping
    SoFtware tree
    The central idea of copy left is that we give everyone permission to run the pro-gram, copy the program, modify the program, and distribute modified versionsbut not permission to add restrictions of their own. Thus, the crucial freedoms thatdefine"free software'are guaranteed to everyone who has a copy; they becomeinalienable rights
    For an effective copyleft, modified versions must also be free. This ensures thatwork based on ours becomes available to our community if it is published. whenprogrammers who have jobs as programmers volunteer to improve gnU software,

==========第28页==========
    Chapter 1: The GNU Project
    23
    it is copyleft that prevents their employers from saying, You cant share thosechanges, because we are going to use them to make our proprietary version of theprogram
    The requirement that changes must be free is essential if we want to ensure freedom for every user of the program. The companies that privatized the x window
    System usually made some changes to port it to their systems and hardware. Thesechanges were small compared with the great extent of X, but they were not trivial
    If making changes were an excuse to deny the users freedom, it would be easy foranyone to take advantage of the excuse
    A related issue concerns combining a free program with non-free code. Such acombination would inevitably be non-free: whichever freedoms are lacking for thenon-free part would be lacking for the whole as well. To permit such combinationswould open a hole big enough to sink a ship. Therefore, a crucial requirementfor copy left is to plug this hole: anything added to or combined with a copyleftedprogram must be such that the larger combined version is also free and copylefted
    The specific implementation of copyleft that we use for most GNU software ishe gnu general public license or gnu GPL for short We have other kinds ofcopyleft that are used in specific circumstances. GNU manuals are copy lefted alsobut use a much simpler kind of copyleft, because the complexity of the GNu GPlis not necessary for manuals
    In 1984 or 1985, Don Hopkins(a very imaginative fellow) mailed me a letter. On the envelope he had written several amusing sayings, including this one
    Copyleft--all rights reversed I used the word"copyleft "to name the distribution concept i was developing at the time
    The free software foundation
    As interest in using Emacs was growing, other people became involved in theGNU project, and we decided that it was time to seek funding once again. So in
    ted the free soft
    Foundati
    ware development The fsf also took over the emacs tape distribution businesslater it extended this by adding other free software(both gnu and non-gnu)tothe tape and by selling free manuals as well
    The fSf accepts donations, but most of its income has al ways come from salesof copies of free software, and of other related services. Today it sells CD-ROMSof source code, CD-ROMs with binaries, nicely printed manuals(all with freedomto redistribute and modify), and Deluxe Distributions(where we build the wholecollection of software for your choice of platform)
    Free Software Foundation employees have written and maintained a number ofGNU Software packages. Two notable ones are the c library and the shell. TheGNU C library is what every program running on a GNU/Linux system uses tocommunicate with Linux. It was developed by a member of the Free Software
    Foundation staff, Roland McGrath. The shell used on most GNU/linux systems isBASH, the Bourne Again Shell, which was developed by FSF employee Brian Fox

==========第29页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    We funded development of these programs because the gnu project was notjust about tools or a development environment. Our goal was a complete operatinystem, and these programs were needed for that goal
    Bourne again shell is a joke on the name " Bourne shell, which was the usualshell on unix
    Free Software Support
    The free software philosophy rejects a specific widespread business practice. butit is not against business. When businesses respect the users' freedom we wishthem success
    Selling copies of emacs demonstrates one kind of free software business. Whenthe FSF took over that business, I needed another way to make a living. I foundit in selling services relating to the free software I had developed. This includedteaching, for subjects such as how to program GNu Emacs and how to customizeGCC, and software development, mostly porting GCC to new platforms
    Today each of these kinds of free software business is practiced by a number ofcorporations. Some distribute free software collections on CD-ROM; others sellsupport at various levels ranging from answering user questions, to fixing bugs, toadding major new features. We are even beginning to see free software companiesbased on launching new free software products
    Watch out. though-a number of companies that associate themselves with theterm"open source'actually base their business on non-free software that workswith free software. These are not free software companies, they are proprietary
    companies whose products tempt users away from freedom. They call
    these"value added, which reflects the values they would like us to adopt: convenience above freedom. If we value freedom more we should call them freedomsubtracted” products
    Technical goals
    The principal goal of gnu was to be free software. Even if gnU had no technical advantage over Unix, it would have a social advantage allowing users tocooperate, and an ethical advantage, respecting the users freedom
    But it was natural to apply the known standards of good practice to the work--forexample dynamically allocating data structures to avoid arbitrary fixed size limitsand handling all the possible 8-bit codes wherever that made sense
    In addition, we rejected the Unix focus on small memory size, by deciding notto support 16-bit machines (it was clear that 32-bit machines would be the norm bthe time the gnu system was finished), and to make no effort to reduce memoryusage unless it exceeded a megabyte. In programs for which handling very largefiles was not crucial, we encouraged programmers to read an entire input file intocore, then scan its contents without having to worry about 1O
    These decisions enabled many gnu programs to surpass their Unix counterpartsin reliability and speed

==========第30页==========
    Chapter 1: The GNU Project
    5
    Donated Computers
    As the gnu projects reputation grew, people began offering to donate machinesrunning Unix to the project. These were very useful, because the easiest way todevelop components of gnu was to do it on a Unix system, and replace the com-ponents of that system one by one. But they raised an ethical issue: whether it wasright for us to have a copy of unix at all
    Unix was(and is) proprietary software, and the gnu projects philosophy saidthat we should not use proprietary software. But, applying the same reasoning thatleads to the conclusion that violence in self defense is justified, I concluded that itwas legitimate to use a proprietary package when that was crucial for developing afree replacement that would help others stop using the proprietary package
    But even if this was a justifiable evil. it was still an evil. Today we no longer haveany copies of Unix, because we have replaced them with free operating systems. Ife could not replace a machines operating system with a free one, we replaced themachine instead
    The gNu Task list
    As the gnu project proceeded, and increasing numbers of system componentsere found or developed, eventually it became useful to make a list of the remainingaps. We used it to recruit developers to write the missing pieces. This list becameknown as the gnu task list. In addition to missing Unix components, we listedvarious other useful software and documentation projects that, we thought, a trulycomplete system ought to have
    Today, hardly any Unix components are left in the gnu task list--those jobshave been done, aside from a few inessential ones. but the list is full of projectsthat some might call"applications. Any program that appeals to more than anarrow class of users would be a useful thing to add to an operating system
    Even games are included in the task list-and have been since the beginning
    Unix included games, so naturally gnU should too. But compatibility was not an
    listed a spectrum of different kinds of games that users might like ad.Instead,weissue for games, so we did not follow the list of games that Unix ha
    The gnU Library GPL
    The gnu C library uses a special kind of copyleft called the gnu library General Public License, which gives permission to link proprietary software with thelibrary. Why make this exception?
    It is not a matter of principle; there is no principle that says proprietary softwareproducts are entitled to include our code. (Why contribute to a project predicatedon refusing to share with us? USing the LGPL for the C library, or for any libraris a matter of strategy.
    The c library does a generic job; every proprietary system or compiler comeswith a C library. Therefore, to make our C library available only to free software

==========第31页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    would not have given free software any advantage-it would only have discourageduse of our librar
    One system is an exception to this: on the gnu system(and this includesGNU/Linux), the gnu C library is the only C library. So the distribution termsof the gnu c library determine whether it is possible to compile a proprietarprogram for the GNU system. There is no ethical reason to allow proprietary applications on the gnu system, but strategically it seems that disallowing them woulddo more to discourage use of the gnu system than to encourage development offree applications
    That is why using the Library GPl is a good strategy for the C library. Forother libraries, the strategic decision needs to be considered on a case-by-case basis. When a library does a special job that can help write certain kinds of programs,then releasing it under the GPl, limiting it to free programs only, is a way of helping other free software developers, giving them an advantage against proprietarysoftware
    Consider gnu Readline, a library that was developed to provide commandline editing for bash. Readline is released under the ordinary gnu gPl, not the
    Library gPl. This probably does reduce the amount Readline is used, but that is noloss for us. Meanwhile, at least one useful application has been made free softwarespecifically so it could use Readline, and that is a real gain for the community
    Proprietary software developers have the advantages money provides; free software developers need to make advantages for each other. i hope some day we willhave a large collection of GPL-covered libraries that have no parallel available toproprietary software, providing useful modules to serve as building blocks in newfree software, and adding up to a major advantage for further free software development
    Scratching an itch?
    Eric Raymond says that" Every good work of software starts by scratchindevelopers personal itch. Maybe that happens sometimes, but many essentialpieces of gnu software were developed in order to have a complete free operatinsystem. They come from a vision and a plan, not from impulse
    For example. we developed the gnu c library because a Unix-like system needsa C library, the bourne again Shell (Bash) because a Unix-like system needs ashell, and gnu tar because a Unix-like system needs a tar program. The same istrue for my own programs-the GNu C compiler, GNU Emacs, GDB and GNU
    Make
    Some gnu programs were developed to cope with specific threats to our freedom. Thus, we developed gzip to replace the Compress program, which had beenlost to the community because of the lzw patents. We found people to develop
    LessTif, and more recently started GNOME and Harmony, to address the problems
    The gnu Readline library provides a set of functions for use by applications that allow users toedit command lines as they are typed in
    The Lempel-ziv-Welch algorithm is used for compressing data

==========第32页==========
    Chapter 1: The GNU Project
    caused by certain proprietary libraries(see" Non-Free Libraries"below). We aredeveloping the gnu Privacy Guard to replace popular non-free encryption soft
    because users should not have to choose between privacy and freedomcourse, the people writing these programs became interested in the work, andmany features were added to them by various people for the sake of their own needsand interests. But that is not why the programs exist
    Unexpected developments
    whole GNU system, then release it as a whole. That is not how it happenec op theAt the beginning of the gnu project, I imagined that we would develo
    Since each component of the gnu system was implemented on a unix systemeach component could run on Unix systems, long before a complete gNu systemexisted. Some of these programs became popular, and users began extending themand porting them-to the various incompatible versions of Unix, and sometimes toother systems as well
    The process made these programs much more powerful, and attracted both fundsand contributors to the gnu project. But it probably also delayed completion of aminimal working system by several years, as gnu developers' time was put intomaintaining these ports and adding features to the existing components, rather thanmoving on to write one missing component after another
    The gnu hurd
    By 1990. the gnu system was almost complete: the only major missing com-ponent was the kernel. We had decided to implement our kernel as a collectionof server processes running on top of Mach. Mach is a microkernel developed at
    Carnegie mellon University and then at the university of utah: the gnu hurd isa collection of servers(or herd of gnus")that run on top of Mach, and do the various jobs of the Unix kernel. The start of development was delayed as we waitedfor Mach to be released as free software, as had been promised
    One reason for choosing this design was to avoid what seemed to be the hardestpart of the job: debugging a kernel program without a source-level debugger todo it with. This part of the job had been done already, in Mach, and we expectedto debug the Hurd servers as user programs, with GDB. But it took a long timeto make that possible, and the multi-threaded servers that send messages to eachother have turned out to be very hard to debug. Making the hurd work solidly hasstretched on for many years
    Alix
    The gnu kernel was not originally supposed to be called the Hurd. Its originalname was Alix--named after the woman who was my sweetheart at the time. She
    Unix system administrator had pointed out how her name would fit a commonnaming pattern for Unix system versions; as a joke, she told her friends, Someone

==========第33页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    should name a kernel after me. I said nothing, but decided to surprise her with akernel named alix
    It did not stay that way. Michael Bushnell (now Thomas), the main developerof the kernel, preferred the name Hurd, and redefined Alix to refer to a certain partof the kernel-the part that would trap system calls and handle them by sendinmessages to hurd servers
    Ultimately. Alix and i broke up, and she changed her name: independently the
    Hurd design was changed so that the c library would send messages directly toservers, and this made the alix component disappear from the design
    But before these things happened a friend of hers came across the name Alix inthe hurd source code, and mentioned the name to her So the name did its job
    Linux and gnuilinux
    The gnu hurd is not ready for production use. Fortunately, another kernel isavailable. In 1991, inus Torvalds developed a unix-compatible kernel and calledit Linux. Around 1992, combining Linux with the not-quite-complete GNU system
    alted
    olete fr
    ting system.(Combining the
    job in itself, of course. It is due to Linux that we can actually run a version of theGNU syStem today
    We call this system version GNU/Linux, to express its composition as a combination of the gnu system with linux as the kernel
    Challenges in Our Future
    We have proved our ability to develop a broad spectrum of free software. Thisdoes not mean we are invincible and unstoppable. Several challenges make thefuture of free software uncertain; meeting them will require steadfast effort andendurance, sometimes lasting for years. It will require the kind of determinationthat people display when they value their freedom and will not let anyone take it
    away
    The following four sections discuss these challenges
    Secret hardware
    Hardware manufactures increasingly tend to keep hardware specifications secret
    This makes it difficult to write free drivers so that linux and XFree86 can supportnew hardware. We have complete free systems today but we will not have themtomorrow if we cannot support tomorrows computers
    There are two ways to cope with this problem. Programmers can do reverseengineering to figure out how to support the hardware. The rest of us can choosethe hardware that is supported by free software; as our numbers increase, secrecyof specifications will become a self-defeating policy
    A XFree86 is a program that provides a des ktop environment that interfaces with your display hard-
    ware(mouse, keyboard, etc). It runs on many different platforms

==========第34页==========
    Chapter 1: The GNU Project
    Reverse engineering is a big job; will we have programmers with sufficient determination to undertake it? Yes--if we have built up a strong feeling that freetware is a matter of principle, and non-free drivers are intolerable. And willlarge numbers of us spend extra money, or even a little extra time, so we can usefree drivers? Yes, if the determination to have freedom is widespread
    Non-Free Libraries
    A non-free library that runs on free operating systems acts as a trap for freesoftware developers. The library's attractive features are the bait; if you use thelibrary, you fall into the trap, because your program cannot usefully be part of a freeoperating system.(Strictly speaking, we could include your program, but it wontrun with the library missing. )Even worse, if a program that uses the proprietarylibrary becomes popular, it can lure other unsuspecting programmers into the trap
    The first instance of this problem was the Motif toolkit, back in the 80S. Al-though there were as yet no free operating systems, it was clear what problem
    Motif would cause for them later on. The GNu Project responded in two waysby asking individual free software projects to support the free X toolkit widgets aswell as Motif, and by asking for someone to write a free replacement for motif
    The job took many years; LessTif, developed by the hungry Programmers, becamepowerful enough to support most Motif applications only in 1997
    Between 1996 and 1998, another non-free Graphical User Interface(GUI) toolkitlibrary, called Qt, was used in a substantial collection of free software, the desktop
    KDE
    Free GNU/Linux systems were unable to use KDE, because we could not usehe library. However, some commercial distributors of gnu linux systems whowere not strict about sticking with free software added kde to their systemsproducing a system with more capabilities, but less freedom. The Kde group wasactively encouraging more programmers to use Qt, and millions of new"Linuxusers"had never been exposed to the idea that there was a problem in this. Thesituation appeared grim
    The free software community responded to the problem in two ways: GNOMEnd Harmony
    GNOME, the gNU Network Object Model Environment, IS GNUs desktopproject. Started in 1997 by Miguel de Icaza, and developed with the support of
    Red Hat Software, GNOME Set out to provide similar desktop facilities, but usingfree software exclusively. It has technical advantages as well, such as supportina variety of languages, not just C++. But its main purpose was freedom: not torequire the use of any non-free software
    Harmony is a compatible replacement library, designed to make it possible torun Kde software without using Qt
    In November 1998, the developers of Qt announced a change of license whichwhen carried out, should make Qt free software. There is no way to be sure, but Ithink that this was partly due to the community's firm response to the problem that
    o Motif is a graphical interface and window manager that runs on top of X Windows

==========第35页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Qt posed when it was non-free.(The new license is inconvenient and inequitableso it remains desirable to avoid using Qt. )6
    xt temptins
    -free library? will the whole
    community understand the need to stay out of the trap? Or will many of us giveup freedom for convenience, and produce a major problem? Our future depends onour philosophy
    Software patents
    The worst threat we face comes from software patents, which can put algorithmsand features off limits to free software for up to twenty years The lzw compression algorithm patents were applied for in 1983, and we still cannot release freesoftware to produce proper compressed GIFs. In 1998, a free program to produceMP3 compressed audio was removed from distribution under threat of a patent suit
    There are ways to cope with patents: we can search for evidence that a patent isinvalid, and we can look for alternative ways to do a job but each of these methodsworks only sometimes; when both fail, a patent may force all free software to lacksome feature that users want. What will we do when this happens?
    Those of us who value free software for freedoms sake will stay with free software anyway. We will manage to get work done without the patented features. Butthose who value free software because they expect it to be techically superior arelikely to call it a failure when a patent holds it back. Thus while it is useful to talkabout the practical effectiveness of thecathedral"model of development, and thereliability and power of some free software, we must not stop there. We must talkabout freedom and principle
    Free documentation
    The biggest deficiency in our free operating systems is not in the software--it isthe lack of good free manuals that we can include in our systems. Documentation isan essential part of any software package; when an important free software packagedoes not come with a good free manual, that is a major gap. We have many suchgaps today.
    Free documentation, like free software, is a matter of freedom, not price. Thecriterion for a free manual is pretty much the same as for free software: it is amatter of giving all users certain freedoms. Redistribution (including commercialsale) must be permitted, on-line and on paper, so that the manual can accompanyevery copy of the program
    Permission for modification is crucial too. As a general rule i dont believe thatit is essential for people to have permission to modify all sorts of articles and books
    For example, I dont think you or I are obliged to give permission to modify articleslike this one. which describe our actions and our views
    6 In September 2000, Qt was rereleased under the GNU GPL, which essentially solved this problem1 I probably meant to write"of the bazaar model, since that was the alternative that was new and
    initially controversial

==========第36页==========
    Chapter 1: The GNU Project
    But there is a particular reason why the freedom to modify is crucial for docu-mentation for free software. When people exercise their right to modify the software,and add or change its features, if they are conscientious they will change themanual too-so they can provide accurate and usable documentation with the mod
    finish the job does not fill our communitys needs o
    ified program. A manual that does not allow programmers to be conscientious and
    Some kinds of limits on how modifications are done pose no problem. For example, requirements to preserve the original authors copyright notice, the distributionterms, or the list of authors, are ok. It is also no problem to require modified versions to include notice that they were modified, even to have entire sections thatmay not be deleted or changed, as long as these sections deal with nontechnicaltopics. These kinds of restrictions are not a problem because they dont stop theconscientious programmer from adapting the manual to fit the modified program
    In other words, they don t block the free software community from making full useof the manual
    However it must be possible to modify all the technical content of the manualand then distribute the result in all the usual media, through all the usual channelsotherwise. the restrictions do obstruct the community the manual is not free andwe need another manual
    Will free software developers have the awareness and determination to producefull spectrum of free manuals? Once again, our future depends on philosophy.
    We must Talk about freedom
    Estimates today are that there are ten million users of gnu/linux systems suchas Debian GNU/Linux and red Hat Linux. Free software has developed such practical advantages that users are flocking to it for purely practical reasons
    The good consequences of this are evident: more interest in developing freesoftware, more customers for free software businesses, and more ability to encourage companies to develop commercial free software instead of proprietary softwareproducts
    But interest in the software is growing faster than awareness of the philosophy its based on. and this leads to trouble. Our ability to meet the challenges and threatsdescribed above depends on the will to stand firm for freedom. To make sure ourcommunity has this will, we need to spread the idea to the new users as they comeinto the community
    But we are failing to do so: the efforts to attract new users into our communityare far outstripping the efforts to teach them the civics of our community. We needto do both, and we need to keep the two efforts in balance
    Open Source”
    Teaching new users about freedom became more difficult in 1998, when a part ofthe community decided to stop using the term"free software"and say "open sourcesoftware" instead

==========第37页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Some who favored this term aimed to avoid the confusion of "free" withgratis-a valid goal. Others, however, aimed to set aside the spirit of princidle that had motivated the free softwa
    nt and the gnu
    appeal instead to executives and business users, many of whom hold an ideologythat places profit above freedom, above community, above principle. Thus, therhetoric of"open source""focuses on the potential to make high-quality, powerfulsoftware, but shuns the ideas of freedom, community, and principle
    The"Linux " magazines are a clear example of this-they are filled with advertisements for proprietary software that works with GNu/linux. when the next
    Motif or Qt appears, will these magazines warn programmers to stay away from it,or will they run ads for it?
    The support of business can contribute to the community in many ways; all elsebeing equal, it is useful. But winning their support by speaking even less aboutfreedom and principle can be disastrous: it makes the previous imbalance betweenoutreach and civics education even worse
    Free software"and"open source" describe the same category of software,moreor less, but say different things about the software, and about values. The Gnu
    Project continues to use the term"free software, to express the idea that freedomnot Just technology, Is Important.
    Yoda's philosophy( there is no 'try,))sounds neat but it doesnt work for meI have done most of my work while anxious about whether i could do the job andunsure that it would be enough to achieve the goal if I did. But I tried anyway, because there was no one but me between the enemy and my city. surprising myselfhave sometimes succeeded
    Sometimes I failed; some of my cities have fallen. Then I found another threatened city. and got ready for another battle. Over time, tve learned to look forthreats and put myself between them and my city. calling on other hackers to comeand Join me
    Nowadays, often Im not the only one. It is a relief and a joy when I see aregiment of hackers digging in to hold the line, and i realize, this city may survivefor now. But the dangers are greater each year, and now Microsoft has explicitlytargeted our community. We cant take the future of freedom for granted. Donttake it for granted! If you want to keep your freedom, you must be prepared todefend it

==========第38页==========
    Chapter 2: The GNU Manifesto
    33
    2 The gnu manifesto
    The gNu Manifesto was written at the beginning of the GNu Project, to askfor participation and support. For the first few years, it was updated in minorways to account for developments, but now it seems best to leave it unchanged asmost people have seen it. Since that time we have learned about certain commonmisunderstandings that different wording could help avoid, and footnotes have beenadded over the vears to explain these misunderstandings
    What's gnu? gnu's not unix
    GNU, which stands for Gnus Not Unix, is the name for the complete Unixcompatible software system which I am writing so that I can give it away free toeveryone who can use it. Several other volunteers are helping me. Contributionsof time, money, programs and equipment are greatly needed
    So far we have an Emacs text editor with lisp for writing editor commanda source-level debugger, a yacc-compatible parser generator, a linker, and around35 utilities. A shell(command interpreter) is nearly completed. A new portableoptimizing c compiler has compiled itself and may be released this year. An initialkernel exists but many more features are needed to emulate Unix. when the kerneland compiler are finished, it will be possible to distribute a gnu system suitable forprogram development. We will use TEX as our text formatter, but an nroff is beingworked on. We will use the free, portable X window system as well. After this wwill add a portable Common Lisp, an Empire game, a spreadsheet, and hundreds ofother things, plus on-line documentation. We hope to supply, eventually, everythinguseful that normally comes with a unix system and more
    GNU will be able to run Unix programs, but will not be identical to Unix. Wewill make all improvements that are convenient based on our experience withother operating systems. In particular, we plan to have longer file names, file ver
    The wording here was careless. The intention was that nobody would have to pay for permissiono use the gnu system. But the words do not make this clear, and people often interpret themas saying that copies of gnu should always be distributed at little or no charge. That was neverthe intent; later on, the manifesto mentions the possibility of companies providing the service ofdistribution for a profit. Subsequently I have learned to distinguish carefully between"free"in thesense of freedom and"free"in the sense of price. free software is software that users have thefreedom to distribute and change. Some users may obtain copies at no charge, while others payto obtain copies-and if the funds help support improving the software, so much the better. Themportant thing is that everyone who has a copy has the freedom to cooperate with others in usingit
    Originally written in 1984, this essay is part of Free software, Free Society: Selected essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsBn1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第39页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    sion numbers, a crashproof file system, file name completion perhaps, terminalindependent display support, and perhaps eventually a Lisp-based window system through which several Lisp programs and ordinary Unix programs can sharescreen. Both C and lisp will be available as system programming languages. Wewill try to support UUCP, MIT Chaosnet, and Internet protocols for communicationGNU is aimed initially at machines in the 68000/16000 class with virtual memory, because they are the easiest machines to make it run on. The extra effort tomake it run on smaller machines will be left to someone who wants to use it ontheem
    To avoid horrible confusion, please pronounce the 'G' in the word whenit is the name of this project
    Why i Must Write GNU
    I consider that the golden rule requires that if I like a program I must share itwith other people who like it. Software sellers want to divide the users and conquerthem, making each user agree not to share with others. I refuse to break solidaritywith other users in this way. I cannot in good conscience sign a nondisclosureagreement or a software license agreement. For years I worked within the artificialntelligence lab to resist such tendencies and other inhospitalities but eventuallyey had gone too far: I could not remain in an institution where such things aredone for me against my will
    So that I can continue to use computers without dishonor, I have decided to puttogether a sufficient body of free software so that I will be able to get along withoutany software that is not free. I have resigned from the al lab to deny mit any legalexcuse to prevent me from giving gnU away
    Why gNU Will Be Compatible with Unix
    Unix is not my ideal system, but it is not too bad. The essential features of Unixseem to be good ones, and I think I can fill in what Unix lacks without spoilingthem. And a system compatible with Unix would be convenient for many otherpeople to ad
    How gNU Will Be available
    GNU is not in the public domain. Everyone will be permitted to modify andredistribute gnu but no distributor will be allowed to restrict its further redistribution. That is to say proprietary modifications will not be allowed. i want to makesure that all versions of gnu remain free
    Why Many Other programmers Want to Help
    I have found many other programmers who are excited about gNu and want to

==========第40页==========
    Chapter 2: The GNU Manifesto
    35
    Many programmers are unhappy about the commercialization of system soft-ware. It may enable them to make more money, but it requires them to feel inonflict with other programmers in general rather than feel as comrades. The fun-damental act of friendship among programmers is the sharing of programs; marketing arrangements now typically used essentially forbid programmers to treat othersas friends. The purchaser of software must choose between friendship and obeyingthe law. Naturally, many decide that friendship is more important. But those whobelieve in law often do not feel at ease with either choice They become cynicaland think that programming is just a way of making money
    By working on and using gnu rather than proprietary programs, we can behospitable to everyone and obey the law. In addition gnu serves as an example toinspire and a banner to rally others to join us in sharing. This can give us a feelingof harmony which is impossible if we use software that is not free. For about halfthe programmers I talk to, this is an important happiness that money cannot replace
    How You can contribute
    I am asking computer manufacturers for donations of machines and money. Imasking individuals for donations of programs and work
    One consequence you can expect if you donate machines is that gNU will runon them at an early date. The machines should be complete, ready to use systemsapproved for use in a residential area, and not in need of sophisticated cooling orpower
    I have found very many programmers eager to contribute part-time work forGNU. For most projects, such part-time distributed work would be very hard tocoordinate; the independently-written parts would not work together. But for theparticular task of replacing Unix, this problem is absent. A complete Unix systemcontains hundreds of utility programs, each of which is documented separatel
    Most interface specifications are fixed by Unix compatibility. If each contributorcan write a compatible replacement for a single Unix utility, and make it workproperly in place of the original on a Unix system, then these utilities will workright when put together. Even allowing for Murphy to create a few unexpectedproblems, assembling these components will be a feasible task. The kernel willrequire closer communication and will be worked on by a small, tight group.
    If I get donations of money, I may be able to hire a few people full or part time
    The salary wont be high by programmers' standards, but I'm looking for peoplefor whom building community spirit is as important as making money. I view thisas a way of enabling dedicated people to devote their full energies to working ongnU by sparing them the need to make a living in another way
    This is a reference to"Murphy's Law, a humorous law that states, if anything can possibly gowrong, it will go wrong

==========第41页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Why All Computer Users Will Benefit
    Once gnu is written, everyone will be able to obtain good system software free
    Just like air 3
    This means much more than just saving everyone the price of a Unix license
    It means that much wasteful duplication of system programming effort will beavoided. This effort can go instead into advancing the state of the art
    Complete system sources will be available to everyone. As a result, a user whoneeds changes in the system will always be free to make them himself, or hire anyavailable programmer or company to make them for him. users will no longer beat the mercy of one programmer or company which owns the sources and is in soleposition to make changes
    Schools will be able to provide a much more educational environment by encouraging all students to study and improve the system code. Harvard's computerlab used to have the policy that no program could be installed on the system if itssources were not on public display, and upheld it by actually refusing to installcertain programs. I was very much inspired by this
    Finally, the overhead of considering who owns the system software and what oneis or is not entitled to do with it will be lifted
    Arrangements to make people pay for using a program, including licensing ofcopies, always incur a tremendous cost to society through the cumbersome mechanisms necessary to figure out how much(that is, which programs)a person mustpay for. And only a police state can force everyone to obey them. Consider a spacestation where air must be manufactured at great cost: charging each breather perliter of air may be fair, but wearing the metered gas mask all day and all night isintolerable even if everyone can afford to pay the air bill. and the tv cameras everywhere to see if you ever take the mask off are outrageous. It's better to supportthe air plant with a head tax and chuck the masks
    Copying all or parts of a program is as natural to a programmer as breathing, andas productive. It ought to be as free
    Some easily rebutted objections to GNUs goals
    Nobody will use it if it is free, because that means they cant rely on any
    support
    You have to charge for the program to pay for providing the support
    If people would rather pay for gnu plus service than get gnu free withoutservice, a company to provide just service to people who have obtained gnu freeought to be profitable
    We must distinguish between support in the form of real programming work andmere hand-holding. The former is something one cannot rely on from a softwarevendor. If your problem is not shared by enough people, the vendor will tell you toge
    3 This is another place I failed to distinguish carefully between the two different meanings of "free.
    The statement as it stands is not false-you can get copies of GNU software at no charge, fromyour friends or over the Internet. But it does suggest the wrong idea

==========第42页==========
    Chapter 2: The GNU Manifesto
    If your business needs to be able to rely on support, the only way is to have althe necessary sources and tools. Then you can hire any available person to fix yourproblem; you are not at the mercy of any individual. With Unix, the price of sourcesputs this out of consideration for most businesses. With gnu this will be easy. It isstill possible for there to be no available competent person, but this problem cannotbe blamed on distribution arrangements gnu does not eliminate all the world'sproblems, only some of them
    Meanwhile, the users who know nothing about computers need hand-holdingdoing things for them which they could easily do themselves but dont know how
    Such services could be provided by companies that sell just hand-holding andrepair service. If it is true that users would rather spend money and get a productwith service, they will also be willing to buy the service having got the productfor free. The service companies will compete in quality and price; users will notbe tied to any particular one. Meanwhile, those of us who dont need the serviceshould be able to use the program without paying for the service
    You cannot reach many people without advertising, and you must charge forthe program to support that
    It's no use advertising a program people can get free
    There are various forms of free or very cheap publicity that can be used to informnumbers of computer users about something like gnu. but it may be true that onecan reach more microcomputer users with advertising. If this is really so. a businesshich advertises the service of copying and mailing gnu for a fee ought to besuccessful enough to pay for its advertising and more. This way, only the userswho benefit from the advertising pay for it
    On the other hand, if many people get GNU from their friends, and such companies dont succeed, this will show that advertising was not really necessary tospread gnu. Why is it that free market advocates dont want to let the free marketdecide this 4?
    My company needs a proprietary operating system to get a competitive edge.GNU will remove operating system software from the realm of competition. Youwill not be able to get an edge in this area, but neither will your competitors be ableto get an edge over you. You and they will compete in other areas, while benefitingmutually in this one. If your business is selling an operating system, you willnot like GNU, but thats tough on you. If your business is something else, GNUcan save you from being pushed into the expensive business of selling operatingsystems
    The Free Software Foundation raises most of its funds from a distribution service, although it is acharity rather than a company. If no one chooses to obtain copies by ordering them from the FSF,it will be unable to do its work. But this does not mean that proprietary restrictions are justifiedto force every user to pay. If a small fraction of all the users order copies from the fSf, that issufficient to keep the Fsf afloat. So we ask users to choose to support us in this way. Have youdone your part

==========第43页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    I would like to see gnu development supported by gifts from many manufacturers and users reducing the cost to each.5
    Dont programmers deserve a reward for their creativity?
    If anything deserves a reward, it is social contribution. Creativity can be a socialcontribution, but only in so far as society is free to use the results. If programmersdeserve to be rewarded for creating innovative programs, by the same token theydeserve to be punished if they restrict the use of these programs
    Shouldnt a programmer be able to ask for a reward for his creativity?
    There is nothing wrong with wanting pay for work, or seeking to maximize onesincome, as long as one does not use means that are destructive. but the meanscustomary in the field of software today are based on destruction
    Extracting money from users of a program by restricting their use of it is de-structive because the restrictions reduce the amount and the ways that the programcan be used. This reduces the amount of wealth that humanity derives from theprogram. When there is a deliberate choice to restrict, the harmful consequencesare deliberate destruction
    The reason a good citizen does not use such destructive means to become wealth-ier is that, if everyone did so, we would all become poorer from the mutual destructiveness. This is Kantian ethics: or the golden rule. Since i do not like theconsequences that result if everyone hoards information i am required to considerit wrong for one to do so. specifically, the desire to be rewarded for one's creativitydoes not justify depriving the world in general of all or partof that creativity.
    Wont programmers starve?
    I could answer that nobody is forced to be a programmer. Most of us cannotmanage to get any money for standing on the street and making faces. But we arenot, as a result, condemned to spend our lives standing on the street making facesand starving. We do something else
    But that is the wrong answer because it accepts the questioners implicit assumption: that without ownership of software, programmers cannot possibly be paid acent. Supposedly it is all or nothing
    The real reason programmers will not starve is that it will still be possible forthem to get paid for programming; just not paid as much as now
    Restricting copying is not the only basis for business in software. It is the mostcommon basis because it brings in the most money. If it were prohibited, or rejected by the customer, software business would move to other bases of organization which are now used less often. There are always numerous ways to organizeany kind of business
    Probably programming will not be as lucrative on the new basis as it is now. Butthat is not an argument against the change. It is not considered an injustice thatsales clerks make the salaries that they now do. If programmers made the same,that would not be an injustice either. (In practice they would still make considerablymore than that
    a group of computer companies recently pooled funds to support maintenance of the GNu C
    C

==========第44页==========
    Chapter 2: The GNU Manifesto
    Dont people have a right to control how their creativity is used?
    Control over the use of one's ideas" really constitutes control over other peoples lives; and it is usually used to make their lives more difficult
    People who have studied the issue of intellectual property rights carefully(suchas lawyers) say that there is no intrinsic right to intellectual property. The kinds ofsupposed intellectual property rights that the government recognizes were createdby specific acts of legislation for specific purposes
    For example, the patent system was established to encourage inventors to disclose the details of their inventions. Its purpose was to help society rather than tohelp inventors. At the time, the life span of 17 years for a patent was short compared with the rate of advance of the state of the art. Since patents are an issueonly among manufacturers, for whom the cost and effort of a license agreement aresmall compared with setting up production the patents often do not do much harm
    They do not obstruct most individuals who use patented products
    The idea of copyright did not exist in ancient times, when authors frequentlycopied other authors at length in works of non-fiction. This practice was usefuland is the only way many authors works have survived even in part The copyrightsystem was created expressly for the purpose of encouraging authorship. In the domain for which it was invented--books, which could be copied economically onlyon a printing press--it did little harm, and did not obstruct most of the individualswho read the books
    All intellectual property rights are just licenses granted by society because it wasthought, rightly or wrongly, that society as a whole would benefit by granting them
    But in any particular situation, we have to ask: are we really better off granting suchlicense? What kind of act are we licensing a person to do
    The case of programs today is very different from that of books a hundred yearsago. The fact that the easiest way to copy a program is from one neighbor toanother, the fact that a program has both source code and object code which aredistinct, and the fact that a program is used rather than read and enjoyed, combineto create a situation in which a person who enforces a copyright is harming societyas a whole both materially and spiritually; in which a person should not do soregardless of whether the law enables him to
    Competition makes things get done better
    The paradigm of competition is a race: by rewarding the winner, we encourageeveryone to run faster. When capitalism really works this way, it does a good jobbut its defenders are wrong in assuming it always works this way. If the runnersforget why the reward is offered and become intent on winning, no matter how, theymay find other strategies-such as, attacking other runners. If the runners get intoa fist fight, they will all finish late
    Proprietary and secret software is the moral equivalent of runners in a fist fight
    Sad to say, the only referee we've got does not seem to object to fights; he justregulates them("For every ten yards you run, you can fire one shot). He reallyought to break them up, and penalize runners for even trying to fight
    Won t everyone stop programming without a monetary incentive?

==========第45页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    Actually, many people will program with absolutely no monetary incentive Pro-gramming has an irresistible fascination for some people, usually the people whoare best at it. There is no shortage of professional musicians who keep at it eventhough they have no hope of making a living that way
    But really this question, though commonly asked, is not appropriate to the situation. Pay for programmers will not disappear, only become less. So the rightquestion is, will anyone program with a reduced monetary incentive? My experience shows that they will
    For more than ten years many of the worlds best programmers worked at the
    Artificial Intelligence Lab for far less money than they could have had any whereelse. They got many kinds of non-monetary rewards: fame and appreciation, forexample. And creativity is also fun, a reward in itself
    Then most of them left when offered a chance to do the same interesting workfor a lot of money
    What the facts show is that people will program for reasons other than richesbut if given a chance to make a lot of money as well, they will come to expect anddemand it. Low-paying organizations do poorly in competition with high-payingones, but they do not have to do badly if the high-paying ones are banned
    We need the programmers desperately. If they demand that we stop helpinour neighbors, we have to obe
    You re never so desperate that you have to obey this sort of demand. remember:millions for defense. but not a cent for tribute!
    Programmers need to make a living somehow .
    o In the short run, this is true. However, there are plenty of ways that program-ners could make a living without selling the right to use a program. This way iscustomary now because it brings programmers and businessmen the most money,not because it is the only way to make a living. It is easy to find other ways if youwant to find them
    Here are a number of examples
    a manufacturer introducing a new computer will pay for the porting of operating systems onto the new hardware
    The sale of teaching, hand-holding and maintenance services could also employ programmers
    People with new ideas could distribute programs as freeware, asking for dona-tions from satisfied users, or selling hand-holding services. I have met peoplewho are already working this way successfully
    Users with related needs can form users'groups, and pay dues. A group wouldcontract with programming companies to write programs that the group'smembers would like to use
    All sorts of development can be funded with a software Tax
    Suppose everyone who buys a computer has to pay x percent of the price as asoftware tax. The government gives this to an agency like the nsf to spendon software development

==========第46页==========
    Chapter 2: The GNU Manifesto
    But if the computer buyer makes a donation to software development himselfhe can take a credit against the tax. He can donate to the project of his ownchoosing--often, chosen because he hopes to use the results when it is don
    He can take a credit for any amount of donation up to the total tax he had topay
    The total tax rate could be decided by a vote of the payers of the tax, weightedaccording to the amount they will be taxed on
    The consequences
    The computer-using community supports software development
    This community decides what level of support is needed
    Users who care which projects their share is spent on can choose this for them-
    In the long run, making programs free is a step toward the post-scarcity worldwhere nobody will have to work very hard just to make a living. People will be freeto devote themselves to activities that are fun, such as programming, after spendinthe necessary ten hours a week on required tasks such as legislation, family counseling, robot repair, and asteroid prospecting. There will be no need to be able tomake a living from programming
    We have already greatly reduced the amount of work that the whole society mustdo for its actual productivity, but only a little of this has translated itself into leisurefor workers because much nonproductive activity is required to accompany productive activity. The main causes of this are bureaucracy and isometric strugglesagainst competition. Free software will greatly reduce these drains in the area ofsoftware production. We must do this, in order for technical gains in productivityo translate into less work for us

==========第47页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第48页==========
    Chapter 3: Free Software Definition
    43
    3 Free software Definition
    We maintain this free software definition to show clearly what must be true abouta particular software program for it to be considered free software
    Free software"is a matter of liberty, not price. To understand the concept, youshould think of“free”asin“ free speech;” not as in‘ free beer:
    Free software is a matter of the users' freedom to run copdistribute, study,change, and improve the software. More precisely, it refers to four kinds of freedom. for the users of the software
    Freedom 0: The freedom to run the program, for any purpose
    Freedom 1: The freedom to study how the program works, and adapt it to yourneeds. (Access to the source code is a precondition for this.
    2: The freedom to redistribute copies so you can help your neighbor
    Freedom 3: The freedom to improve the program and release your improvements to the public, so that the whole community benefits.(Access to thesource code is a precondition for this.
    A program is free software if users have all of these freedoms. Thus, you shouldbe free to redistribute copies, either with or without modifications, either gratis orcharging a fee for distribution, to anyone anywhere. Being free to do these thingsmeans(among other things) that you do not have to ask or pay for permission
    You should also have the freedom to make modifications and use them privatelyin your own work or play, without even mentioning that they exist. If you do publishyour changes, you should not be required to notify anyone in particular, or in anyparticular way
    The freedom to use a program means the freedom for any kind of person ororganization to use it on any kind of computer system, for any kind of overall joband without being required to communicate subsequently with the developer or anyother specific entity.
    The freedom to redistribute copies must include binary or executable forms ofthe program as well as source code, for both modified and unmodified versions(Distributing programs in runnable form is necessary for conveniently installablefree operating systems. It is ok if there is no way to produce a binary or executableform, but people must have the freedom to redistribute such forms should they finda way to make them
    In order for freedoms 1 and 3( the freedom to make changes and the freedom topublish improved versions) to be meaningful, one must have access to the sourcecode of the program. Therefore, accessibility of source code is a necessary condition for free software
    Originally written in 1996, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第49页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    In order for these freedoms to be real they must be irrevocable as long as you donothing wrong; if the developer of the software has the power to revoke the license,ithout your doing anything to give cause, the software is not fre
    However, certain kinds of rules about the manner of distributing free softwareare acceptable, when they dont conflict with the central freedoms. For examplecopyleft(very simply stated) is the rule that when redistributing the program, youcannot add restrictions to deny other people the central freedoms. This rule doesnot conflict with the central freedoms; rather it protects them
    Thus, you may have paid money to get copies of free software, or you may haveobtained copies at no charge. But regardless of how you got your copies, youalways have the freedom to copy and change the software, even to sell copies
    Free software" does not mean"non-commercial. a free program must be avail-able for commercial use, commercial development, and commercial distribution
    Commercial development of free software is no longer unusual: such free commer-cial software is very important
    Rules about how to package a modified version are acceptable, if they do noteffectively block your freedom to release modified versions. Rules that if youmake the program available in this way, you must make it available in that way alsocan be acceptable too, on the same condition.( Note that such a rule still leaves youthe choice of whether to publish the program or not. It is also acceptable for thelicense to require that, if you have distributed a modified version and a previousdeveloper asks for a copy of it, you must send one
    In the gnu project, we use"copyleft to protect these freedoms legally for everyone. But non-copylefted free software also exists We believe there are important reasons why it is better to use copyleft but if your program is non-copyleftedfree software. we can still use it
    Sometimes government export control regulations and trade sanctions can constrain your freedom to distribute copies of programs internationally. software developers do not have the power to eliminate or override these restrictions but whatthey can and must do is refuse to impose them as conditions of use of the program. In this way, the restrictions will not affect activities and people outside thejurisdictions of these governments
    When talking about free software, it is best to avoid using terms like"give awayor"for free, because those terms imply that the issue is about price, not freedom
    Some common terms such as"piracy"embody opinions we hope you wont endorse. See "Words to avoid in this book for a discussion of these terms We alsohave a list of translations of "free software into various languages
    Finally, note that criteria such as those stated in this free software definition require careful thought for their interpretation. To decide whether a specific softwarelicense qualifies as a free software license, we judge it based on these criteria todetermine whether it fits their spirit as well as the precise words. If a license includes unconscionable restrictions, we reject it, even if we did not anticipate theissue in these criteria. Sometimes a license requirement raises an issue that callsfor extensive thought, including discussions with a lawyer, before we can decide ifthe requirement is acceptable. When we reach a conclusion about a new issue we

==========第50页==========
    Chapter 3: Free Software Definition
    45
    often update these criteria to make it easier to see why certain licenses do or dontqualify.
    If you are interested in whether a specific license qualifies as a free softwarelicense,seeourlistoflicenseshttp://www.gnu.org/licenses/license-list.html.Ifthe license you are concerned with is not listed there, you can ask us about it bysending us email at licensing@ gnu. org

==========第51页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第52页==========
    Chapter 4: Why Software Should Not Have Owners
    4 Why Software Should not Have Owners
    Digital information technology contributes to the world by making it easier tocopy and modify information. Computers promise to make this easier for all of us
    Not everyone wants it to be easier. The system of copyright gives software programs owners, most of whom aim to withhold software's potential benefit fromthe rest of the public. They would like to be the only ones who can copy and modifythe software that we use
    The copyright system grew up with printing-a technology for mass productioncopying. Copyright fit in well with this technology because it restricted only themass producers of copies. It did not take freedom away from readers of books. Anordinary reader, who did not own a printing press, could copy books only with penand ink, and few readers were sued for that
    Digital technology is more flexible than the printing press: when informationhas digital form, you can easily copy it to share it with others. This very flexibilitymakes a bad fit with a system like copyright. Thats the reason for the increasinglynasty and draconian measures now used to enforce software copyright. Considerthese four practices of the Software Publishers Association (SPa
    Massive propaganda saying it is wrong to disobey the owners to help yourfriend
    Solicitation for stool pigeons to inform on their coworkers and colleagues
    Raids(with police help) on offices and schools, in which people are told theymust prove they are innocent of illegal
    Prosecution(by the U.s. government, at the sPas request) of people suchas MITs David LaMacchia, not for copying software(he is not accused ofcopying any ), but merely for leaving copying facilities unguarded and failingto censor their use
    All four practices resemble those used in the former Soviet Union, where everycopying machine had a guard to prevent forbidden copying, and where individualshad to copy information secretly and pass it from hand to hand as samizdat. Thereis of course a difference: the motive for information control in the soviet unionwas political; in the U.S. the motive is profit. But it is the actions that affect us, notthe motive. Any attempt to block the sharing of information, no matter why, leadsto the same methods and the same harshness
    Owners make several kinds of arguments for giving them the power to controlhow we use information
    1 On January 27th, 1995, David LaMacchia's case was dismissed and has not yet been appealed
    Originally written in 1994, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第53页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Name Calling
    Owners use smear words such as"piracy"and" theft, as well as expert terminology such as"intellectual property" and"damage, to suggest a certain line ofthinking to the publica simplistic analogy between programs and physicaljects
    Our ideas and intuitions about property for material objects are about whetherit is right to take an object away from someone else. They don t directly apply tomaking a copy of something. But the owners ask us to apply them any way
    Exaggeration
    Owners say that they suffer "harm"or"economic loss' when users copy pro-grams themselves. But the copying has no direct effect on the owner, and it harmsno one. The owner can lose only if the person who made the copy would otherwisehave paid for one from the owner.
    a little thought shows that most such people would not have bought copies. Yetthe owners compute their "losses as if each and every one would have bought acopy. That is exaggeration--to put it kindly
    The law
    Q. Owners often describe the current state of the law, and the harsh penalties theyn threaten us with. Implicit in this approach is the suggestion that todays lawflects an unquestionable view of morality- yet at the same time we are urged toregard these penalties as facts of nature that cant be blamed on anyone
    This line of persuasion isnt designed to stand up to critical thinking; it's intendedto reinforce a habitual mental pathway
    It's elementary that laws dont decide right and wrong. Every American shouldknow that, forty years ago, it was against the law in many states for a black personto sit in the front of a bus; but only racists would say sitting there was wrong
    Natural Rights
    Authors often claim a special connection with programs they have written andgo on to assert that, as a result, their desires and interests concerning the programsimply outweigh those of anyone else--or even those of the whole rest of the world
    Typically companies, not authors, hold the copyrights on software, but we areexpected to ignore this discrepancy.
    To those who propose this as an ethical axiom-the author is more importantthan you-I can only say that l, a notable software author myself, call it bunk
    But people in general are only likely to feel any sympathy with the natural rightsclaims for two reasons
    One reason is an over-stretched analogy with material objects. When I cookspaghetti, I do object if someone else eats it, because then I cannot eat it. His actionhurts me exactly as much as it benefits him; only one of us can eat the spaghetti

==========第54页==========
    Chapter 4: Why Software Should Not Have Owners
    so the question is, which? The smallest distinction between us is enough to tip theethical balance
    But whether you run or change a program I wrote affects you directly and meonly indirectly. Whether you give a copy to your friend affects you and your friendmuch more than it affects me. I shouldn t have the power to tell you not to do thesethings No one should
    The second reason is that people have been told that natural rights for authors isthe accepted and unquestioned tradition of our society
    As a matter of history the opposite is true. The idea of natural rights of authorswas proposed and decisively rejected when the U.s. Constitution was drawn up
    Thats why the constitution only permits a system of copyright and does not requireone; thats why it says that copyright must be temporary. It also states that thepurpose of copyright is to promote progress-not to reward authors. Copyrightdoes reward authors somewhat and publishers more but that is intended as a meansof modifying their behavior
    The real established tradition of our society is that copyright cuts into the naturalrights of the public-and that this can only be justified for the public's sake
    Economics
    The final argument made for having owners of software is that this leads to pro-duction of more software
    Unlike the others this argument at least takes a legitimate approach to the subject. It is based on a valid goal--satisfying the users of software. And it is em-pirically clear that people will produce more of something if they are well paid fordoing so
    But the economic argument has a flaw: it is based on the assumption that thedifference is only a matter of how much money we have to pay. It assumes thatproduction of software"is what we want, whether the software has owners or not
    People readily accept this assumption because it accords with our experiencesith material objects. Consider a sandwich, for instance. You might well be ableto get an equivalent sandwich either free or for a price. If So, the amount you payis the only difference. hether or not you have to buy it the sandwich has thesame taste, the same nutritional value, and in either case you can only eat it once
    Whether you get the sandwich from an owner or not cannot directly affect anythingbut the amount of money you have afterwards
    This is true for any kind of material object--whether or not it has an owner doesnot directly affect what it is, or what you can do with it if you acquire it
    But if a program has an owner, this very much affects what it is, and what youcan do with a copy if you buy one. The difference is not just a matter of money. Thesystem of owners of software encourages software owners to produce somethingbut not what society really needs. And it causes intangible ethical pollution thataffects us all
    What does society need? It needs information that is truly available to itscitizens-for example, programs that people can read, fix, adapt, and improve, not

==========第55页==========
    50
    Free Software, Free Society: Selected essays of richard m. stallman
    just operate. But what software owners typically deliver is a black box that we cantstudy or change
    Society also needs freedom. When a program has an owner, the users lose freedon to control part of their own lives
    And above all society needs to encourage the spirit of voluntary cooperation inits citizens. When software owners tell us that helping our neighbors in a naturalway is piracy, they pollute our society's civic spirit
    This is why we say that free software is a matter of freedom, not price
    The economic argument for owners is erroneous, but the economic issue is rea
    Some people write useful software for the pleasure of writing it or for admirationand love, but if we want more software than those people write, we need to raisefunds
    For ten years now, free software developers have tried various methods of findingfunds, with some success. There's no need to make anyone rich; the median U. samily income, around $35k, proves to be enough incentive for many jobs that areless satisfying than programming
    For years, until a fellowship made it unnecessary, I made a living from customenhancements of the free software i had written. Each enhancement was added tothe standard released version and thus eventually became available to the generalpublic. Clients paid me so that I would work on the enhancements they wanted,rather than on the features I would otherwise have considered highest priority.
    The Free Software Foundation(fSf). a tax-exempt charity for free software dovelopment, raises funds by selling GNU CD-ROMS, T-Shirts, manuals, and deluxedistributions, (all of which users are free to copy and change) as well as from do-nations. It now has a staff of five programmers plus three employees who handlemail orders
    Some free software developers make money by selling support services. Cygnus
    Support, with around 50 employees [when this article was written, in 1994, estimates that about 15 per cent of its staff activity is free software development-arespectable percentage for a software company.
    a number of companies have funded the continued development of the free gnucompiler for the language C. Meanwhile, the gnu compiler for the Ada languagebeing funded by the u.s. air Force which believes this is the most cost-effectiway to get a high quality compiler [Air Force funding ended some time ago; theGNU Ada Compiler is now in service, and its maintenance is funded commer
    All these examples are small; the free software movement is still small, and stillyoung. But the example of listener-supported radio in the U.S. shows it's possibleto support a large activity without forcing each user to pay
    As a computer user today, you may find yourself using a proprietary program. Ifyour friend asks to make a copy, it would be wrong to refuse Cooperation is moreimportant than copyright But underground, closet cooperation does not make for a
    Cygnus Support continued to be successful, but then it accepted outside investment, got greedy,and began developing non-free software. Then it was acquired by red Hat, which has rereleasedmost of those programs as free software

==========第56页==========
    Chapter 4: Why software Should not have owners
    51
    good society. a person should aspire to live an upright life openly with pride, andthis means saying"No'to proprietary software
    You deserve to be able to cooperate openly and freely with other people who usoftware. You deserve to be able to learn how the software works, and to teach yourstudents with it. You deserve to be able to hire your favorite programmer to fix itwhen it breaks
    You deserve free software

==========第57页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第58页==========
    Chapter 5: What's in a Name?
    53
    5 What's in a Name?
    Names convey meanings; our choice of names determines the meaning of whatwe say. An inappropriate name gives people the wrong idea. a rose by any namewould smell as sweet--but if you call it a pen, people will be rather disappointedwhen they try to write with it. And if you call pens roses, people may not realize what they are good for. If you call our operating system"Linux, that conveys a mistaken idea of the systems origin history and purpose If you call itGNU/Linux, that conveys( though not in detail) an accurate idea
    But does this matter for our community? Is it important whether people knowthe systems origin, history, and purpose? Yes--because people who forget history are often condemned to repeat it. The Free World that has developed aroundGNU/Linux is not secure: the problems that led us to develop gnu are not com-pletely eradicated, and they threaten to come back
    When I explain why it's appropriate to call the operating system"GNU/Linuxrather than"Linux, people sometimes respond this way
    Granted that the gnu Project deserves credit for this work, is it reallyworth a fuss when people dont give credit? Isnt the important thing thatthe job was done, not who did it? You ought to relax, take pride in theb well done and not worry about the credit
    This would be wise advice, if only the situation were like that--if the job weredone and it were time to relax. If only that were true! But challenges abound, andthis is no time to take the future for granted. Our communitys strength rests oncommitment to freedom and cooperation. Using the name gnu/linux is a way forpeople to remind themselves and inform others of these goals
    It is possible to write good free software without thinking of gnu; much goodwork has been done in the name of linux also. But "linux has been associatedever since it was first coined with a philosophy that does not make a commitmentto the freedom to cooperate. As the name becomes used increasingly by businesswe will have even more trouble making it connect with community spirit
    a great challenge to the future of free software comes from the tendency ofthe "Linux,' distribution companies to add non -free software to gnuilinux in thename of convenience and power. All the major commercial distribution developers do this; none produces a distribution that is entirely free. Most of them do notclearly identify the non-free packages in their distributions. Many even developnon-free software and add it to the system some outrageously advertise Linuxsystems that are "licensed per seat, which give the user as much freedom as microsoft windows
    Originally written in 2000, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第59页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    People justify adding non-free software in the name of the "popularity of
    Linux'in effect, valuing popularity above freedom. Sometimes this is openlydmitted. For instance, Wired magazine says that Robert McMillan, editor of linux
    Magazine, feels that the move toward open source software should be fueled bytechnical, rather than political, decisions. And Calderas CEo openly urged usersto drop the goal of freedom and work instead for the"popularity of linux
    Adding non-free software to the gNU/linux system may increase the popularity, if by popularity we mean the number of people using some of gNU/linux incombination with non-free software. But at the same time it implicitly encouragesthe community to accept non-free software as a good thing, and forget the goal offreedom. It is no use driving faster if you cant stay on the road
    When the non-free"add-on''is a library or programming tool, it can become a
    the non-free package, their software cannot be part of a completely free system, on
    trap for free software developers. When they write free software that depends
    If our community keeps moving in this direction, it could redirect the future ofGNU/Linux into a mosaic of free and non-free components. Five years from nowwe will surely still have plenty of free software; but if we are not careful, it willhardly be usable without the non-free software that users expect to find with it. Ifthis happens our campaign for freedom will have failed
    If releasing free alternatives were simply a matter of programming, solving future problems might become easier as our communitys development resources increase. But we face obstacles which threaten to make this harder: laws that prohibitfree software. As software patents mount up and as laws like the dmca are usedto prohibit the development of free software for important jobs such as viewing adVd or listening to a real audio stream we will find ourselves with no clear wayto fight the patented and secret data formats except to reject the non-free programsthat use them
    Meeting these challenges will require many different kinds of effort But whatwe need above all, to confront any kind of challenge, is to remember the goal offreedom to cooperate. We cant expect a mere desire for powerful, reliable softwareto motivate people to make great efforts. We need the kind of determination thatpeople have when they fight for their freedom and their community, determinationto keep on for years and not give up
    In our community, this goal and this determination emanate mainly from theGNU Project. Were the ones who talk about freedom and community as something to stand firm for; the organizations that speak of""Linux normally don t saythis. The magazines about "Linux,are typically full of ads for non-free software
    The Motif and Qt GUI libraries trapped large amounts of free software in this way in the past,creating problems whose solutions took years. The Qt problem is solved because Qt is now freethe Motif problem is still not entirely solved, since its free replacement, LessTif, needs somepolishing(please volunteer!). Suns non-free Java implementation and standard Java libraries arenow causing a similar problem, and replacing them with free software is a major GNU effort not2 The Digital Millennium Copyright Act of 1998 seeks to update U.S. copyright law; topics includedin the dmCa are provisions concerning the circumvention of copyright protection systems, fairuse,and online service provider liability. See Chapter 12 [Misinterpreting Copyright-A Seriesof Errors], page 79, for more details about the dmca

==========第60页==========
    Chapter 5: What's in a Name?
    55
    the companies that package"Linux"add non-free software to the system; othercompanies"support Linux"with non-free applications; the user groups for" Linuxtypically invite salesman to present those applications. The main place people inour community are likely to come across the idea of freedom and determination isin the gnu project
    But when people come across it will they feel it relates to them?
    People who know they are using a system that came out of the gnu project cansee a direct relationship between themsel ves and gnu. they wont automaticallyagree with our philosophy, but at least they will see a reason to think seriously aboutit. In contrast, people who consider themselves"Linux users, "and believe thatthe gnu Project "developed tools which proved to be useful in Linux, typicallperceive only an indirect relationship between gNU and themselves. They mayjust ignore the gnu philosophy when they come across it
    The gnu Project is idealistic, and anyone encouraging idealism today faces agreat obstacle: the prevailing ideology encourages people to dismiss idealism asimpractical. Our idealism has been extremely practical: it is the reason we havea free GNU/Linux operating system. People who love this system ought to knowthat it is our idealism made real
    If the job really were done, if there were nothing at stake except credit, perhapsit would be wiser to let the matter drop. But we are not in that position. To inspirepeople to do the work that needs to be done, we need to be recognized for what wehave already done. Please help us, by calling the operating system GNU/linux

==========第61页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第62页==========
    Chapter 6: Why"Free Software"is Better than"Open Source
    6why“ Free Software is better than“Open
    Source
    While free software by any other name would give you the same freedom,itmakes a big difference which name we use: different words convey different ideas
    In 1998, some of the people in the free software community began using the termopen source software n instead of "free software to describe what they do. Iheterm"open source"quickly became associated with a different approach, a differ-ent philosophy, different values, and even a different criterion for which licensesare acceptable. The Free software movement and the open source movement aretoday separate movements with different views and goals, although we can and dowork together on some practical projects
    The fundamental difference between the two movements is in their values theirways of looking at the world. For the Open Source movement, the issue of whethersoftware should be open source is a practical question, not an ethical one. As oneperson put it, Open source is a development methodology; free software is a socialmovement. For the Open Source movement, non-free software is a suboptimalsolution. For the Free Software movement, non-free software is a social problemand free software is the solution
    Relationship between the Free Software Movement and
    Open Source movement
    The Free Software movement and the Open Source movement are like two political camps within the free software community
    Radical groups in the 1960s developed a reputation for factionalism: organizations split because of disagreements on details of strategy, and then treated eachother as enemies. Or at least, such is the image people have of them, whether ornot it was true
    The relationship between the Free Software movement and the Open Sourcemovement is just the opposite of that picture. We disagree on the basic principlesbut agree more or less on the practical recommendations. So we can and do worktogether on many specific projects. We dont think of the Open Source movementas an enemy. The enemy is proprietary software
    We are not against the Open Source movement, but we dont want to be lumpedn with them. We acknow ledge that they have contributed to our community, butwe created this community, and we want people to know this. We want people to
    http://www.opensource.org
    Originally written in 1998, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第63页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    associate our achievements with our values and our philosophy, not with theirs. Wewant to be heard, not obscured behind a group with different views
    So please mention the Free Software movement when you talk about the workhave done, and the software we have developed-such as the gNU/Linux operatinsystem
    Comparing the two terms
    This rest of this article compares the two terms " free softwareand"opensource."It shows why the term "open source " does not solve any problems, and infact creates some
    Ambiguit
    g
    The term"free software"has an ambiguity problem: an unintended meaning
    Software you can get for zero price, fits the term just as well as the intendedmeaning,"software which gives the user certain freedoms. We address this problem by publishing a more precise definition of free software(see the"Free Software
    Definition, but this is not a perfect solution; it cannot completely eliminate theproblem. An unambiguously correct term would be better, if it didnt have otherproblems
    Unfortunately, all the alternatives in English have problems of their own. We'velooked at many alternatives that people have suggested, but none is so clearlyrightthat switching to it would be a good idea. Every proposed replacementfor "free software" has a similar kind of semantic problem, or worse--and thisincludes"open source software
    The official definition of"open source software, as published by the Open
    Source Initiative, is very close to our definition of free software; however, it is alittle looser in some respects and they have accepted a few licenses that we con-sider unacceptably restrictive of the users. However, the obvious meaning for theexpression "open source software is "You can look at the source code Thisis a much weaker criterion than free software. it includes free software. but alsoincludes semi-free programs such as Xv, and even some proprietary programs, in-cluding Qt under its original license(before the QPL
    That obvious meaning for open source"is not the meaning that its advocatesintend. The result is that most people misunderstand what those advocates areadvocating. Here is how writer Neal Stephenson defined"open source
    Linux is"open source"software meaning, simply, that anyone can get copiesits source code files
    I dont think he deliberately sought to reject or dispute the"definitionthink he simply applied the conventions of the English language to come up with ameaning for the term. The state of Kansas published a similar definition
    Make use of open-source software(OSS). oss is software for which the sourcecode is freely and publicly available, though the specific licensing agreements varyas to what one is allowed to do with that code

==========第64页==========
    Chapter 6: Why"Free Software"is Better than"Open Source
    59
    Of course, the open source people have tried to deal with this by publishing aprecise definition for the term, just as we have done for free software
    But the explanation for "free software"is simple-a person who has graspedthe idea of"free speech, not free beer"will not get it wrong again. There is nosuccinct way to explain the proper meaning of open source"and show clearly whythe natural definition is the wrong one
    Fear of freedom
    The main argument for the term "open source software is that "free softwaremakes some people uneasy. Thats true: talking about freedom, about ethical issuesabout responsibilities as well as convenience, is asking people to think about thingsthey might rather ignore This can trigger discomfort, and some people may rejectthe idea for that. It does not follow that society would be better off if we stoptalking about these things
    Years ago. free software developers noticed this discomfort reaction, and somestarted exploring an approach for avoiding it. They figured that by keeping quietabout ethics and freedom, and talking only about the immediate practical benefitsof certain free software they might be able to"sell the software more effectivelyto certain users, especially business. The term "open source"is offered as a wayof doing more of this-a way to be"more acceptable to business. The views andvalues of the open source movement stem from this decision
    This approach has proved effective, in its own terms. Today many people areswitching to free software for purely practical reasons. That is good, as far as itgoes, but that isnt all we need to do! Attracting users to free software is not thewhole job, just the first step
    A Sooner or later these users will be invited to switch back to proprietary softwareor some practical advantage. Countless companies seek to offer such temptationand why would users decline? Only if they have learned to value the freedom fresoftware gives them for its own sake. It is up to us to spread this idea--and inorder to do that, we have to talk about freedom. a certain amount of the keepquiet' approach to business can be useful for the community, but we must haveplenty of freedom talk too
    At present, we have plenty of"keep quiet, but not enough freedom talk. Mostpeople involved with free software say little about freedom--usually because theyseek to be"more acceptable to business. Software distributors especially show thispattern. Some gnu/Linux operating system distributions add proprietary packagesto the basic free system, and they invite users to consider this an advantage, ratherthan a step backwards from freedom
    We are failing to keep up with the influx of free software users, failing to teachpeople about freedom and our community as fast as they enter it. This is why nonfree software (which Qt was when it first became popular), and partially non-freeoperating system distributions, find such fertile ground. To stop using the wordfree now would be a mistake. we need more. not less talk about freedom
    n If those using the term "open source"draw more users into our community, thata contribution but the rest of us will have to work even harder to bring the issue

==========第65页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    of freedom to those users'attention. We have to say, It's free software and it givesyou freedom: more and louder than ever before
    Would a Trademark Help?
    The advocates of"open source software"tried to make it a trademark, saying thiswould enable them to prevent misuse. The attempt went awry when the applicationwas allowed to lapse in 1999: thus. the legal status of "open source" is the same asthat of"free software: there is no legal constraint on using it I have heard reportsof a number of companies' calling software packages"open source"even thoughthey did not fit the official definition i have observed some instances myself
    But would it have made a big difference to use a term that is a trademark? Notnecessarily
    Companies also made announcements that give the impression that a programis"open source software"without explicitly saying So. For example, one IBMannouncement, about a program that did not fit the official definition, said this: Asis common in the open source community, users of the... technology will also bable to collaborate with ibm
    This did not actually say that the program was"open source, but many readersdid not notice that detail. (I should note that IBm was sincerely trying to makethis program free software and later adopted a new license which does make it freesoftware and"open source but when that announcement was made, the programdid not qualify as either one.
    And here is how Cygnus Solutions, which was formed to be a free softwarecompany and subsequently branched out(so to speak) into proprietary softwareadvertised some proprietary software products: Cygnus Solutions is a leader inthe open source market and has just launched two products into the [gnu/linuxmarketplace.”
    Unlike IBM, Cygnus was not trying to make these packages free software, andthe packages did not come close to qualifying But Cygnus didnt actually say thatthese are"open source software, they just made use of the term to give carelessreaders that impression
    These observations suggest that a trademark would not have truly prevented theconfusion that comes with the term "open source
    Misunderstandings(2)of“ Open Source”
    The Open Source Definition is clear enough, and it is quite clear that the typical non-free program does not qualify. So you would think thatOpen Sourcecompany"would mean one whose products are free software(or close to it), right?
    Alas, many companies are trying to give it a different meaning
    At the Open Source Developers Day"meeting in August 1998, several of thecommercial developers invited said they intend to make only a part of their workfree software (or "open source). The focus of their business is on developinproprietary add-ons(software or manuals)to sell to the users of this free software

==========第66页==========
    Chapter 6: Why"Free Software"is Better than"Open Source
    61
    They ask us to regard this as legitimate, as part of our community, because some ofthe money is donated to free software development
    In effect, these companies seek to gain the favorable cachet of"open sourcefor their proprietary software productseven though those are not"open sourcesoftware''because they have some relationship to free software or because thesame company also maintains some free software. (One company founder saidquite explicitly that they would put, into the free package they support, as little oftheir work as the community would stand for.)
    Over the years. many companies have contributed to free software development
    Some of these companies primarily developed non-free software, but the two activities were separate; thus, we could ignore their non-free products, and work withthem on free software projects. Then we could honestly thank them afterward fortheir free software contributions, without talking about the rest of what they did
    We cannot do the same with these new companies, because they won t go let us
    These companies actively try to lead the public to lump all their activities together;they want us to regard their non-free software as favorably as we would regard areal contribution, although it is not one. They present themselves as"open sourcecompanies, hoping that we will get a warm fuzzy feeling about them, and that wewill be fuzzy-minded in applying it
    This manipulative practice would be no less harmful if it were done using theterm "free software. But companies do not seem to use the term "free softwarethat way; perhaps its association with idealism makes it seem unsuitable. The termopen source "opened the door for this
    At a trade show in late 1998, dedicated to the operating system often referred toas"Linux. the featured speaker was an executive from a prominent software company.
    as probably invited on account of his companys decision to"support
    that system. Unfortunately, their form of"support" consists of releasing non-freesoftware that works with the system-in other words using our community as amarket but not contributing to it
    He said There is no way we will make our product open source but perhapswe will make it internal open source. If we allow our customer support staff tohave access to the source code, they could fix bugs for the customers, and we couldprovide a better product and better service. This is not an exact quote, as I did notwrite his words down, but it gets the gist.
    People in the audience afterward told me, He just doesn ' t get the point. But isthat so? Which point did he not get?
    He did not miss the point of the open source movement That movement doesnot say users should have freedom, only that allowing more people to look at thesource code and help improve it makes for faster and better development Theexecutive grasped that point completely; unwilling to carry out that approach in fullusers included. he was considering implementing it partially, within the company
    y The point that he missed is the point that "open source" was designed not toise: the point that users deserve freedom
    Spreading the idea of freedom is a big job--it needs your help Thats whystick to the term"free softwarein the gnu Project, so we can help do that job

==========第67页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    If you feel that freedom and community are important for their own sake--not justfor the convenience they bring--please join us in using the term"free software. 2
    Joe barr wrote an article called i
    nd let license that gives his perspective on this issue

==========第68页==========
    Chapter 7: Releasing Free Software if You Work at a University
    63
    7 Releasing Free Software if You Work at a
    University
    In the free Software movement we believe computer users should have the freedom to change and redistribute the software that they use. The free in free softare refers to freedom: it means users have the freedom to run. modify and redistribute the software Free software contributes to human knowledge while non -freesoftware does not universities should therefore encourage free software for thesake of advancing human knowledge, just as they should encourage scientists andscholars to publish their work
    Alas, many university administrators have a grasping attitude towards software(and towards science); they see programs as opportunities for income, not as op-portunities to contribute to human knowledge. Free software developers have beencoping with this tendency for almost 20 years
    When I started developing the gnu operating system in 1984, my first step wasto quit my job at MIT. I did this specifically so that the mit licensing office wouldbe unable to interfere with releasing GNU as free software. I had planned an approach for licensing the programs in gnu that ensures that all modified versionsmust be free software as well, an approach that developed into the gnu general
    Public License ( GNU GPl), and i did not want to have to beg the mit administration to let me use it
    Over the years, university affiliates have often come to the Free Software Foundation for advice on how to cope with administrators who see software only as something to sell. One good method, applicable even for specifically funded projects, isto base your work on an existing program that was released under the GNu GPl
    Then you can tell the administrators, "Were not allowed to release the modifiedversion except under the gnu gPl-any other way would be copyright infringement." After the dollar signs fade from their eyes, they will usually consent toreleasing It as free software
    You can also ask your funding sponsor for help When a group at nyu developed the gnu Ada compiler, with funding from the u.s. Air Force, the contractexplicitly called for donating the resulting code to the free software Foundation
    Work out the arrangement with the sponsor first, then politely show the universityadministration that it is not open to renegotiation They would rather have a con-tract to develop free software than no contract at all, so they will most likely goalong
    Whatever you do, raise the issue early---certainly before the program is halffinished. At this point, the university still needs you, so you can play hardball: tell
    Originally written in 2002, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第69页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    the administration you will finish the program, make it usable, if they have agreedin writing to make it free software(and agreed to your choice of free software
    ) Oth
    il work on it onl
    and never make a version good enough to release. when the administrators knowtheir choice is to have a free software package that brings credit to the university ornothing at all, they will usually choose the former
    Not all universities have grasping policies. The University of Texas has a policythat, by default, all software developed there is released as free software under theGNU General Public license. Univates in brazil. and the indian Institute of in-formation Technology in Hyderabad, India, both have policies in favor of releasinsoftware under the GPl. By developing faculty support first, you may be able toinstitute such a policy at your university. Present the issue as one of principle: doesthe university have a mission to advance human knowledge, or is its sole purposeto perpetuate itself?
    Whatever approach you use, it helps to have determination and adopt an ethicalperspective, as we do in the Free Software Movement. To treat the public ethically,the software should be freeas in freedom--for the whole public
    Many developers of free software profess narrowly practical reasons for doinSO: they advocate allowing others to share and change software as an expedient formaking software powerful and reliable. If those values motivate you to developfree software, well and good, and thank you for your contribution. But those valuesill not give you a good footing to stand firm when university administrators try totempt you to make the program non-free
    For instance, they may argue that" We could make it even more powerful andreliable with all the money we can get. This claim may or may not come truein the end, but it is hard to disprove in advance. They may suggest a license tooffer copies" free of charge, for academic use only, which would tell the generalpublic they dont deserve freedom, and argue that this will obtain the cooperationof academia, which is all( they say) you need
    If you start from"pragmatic"values, it is hard to give a good reason for rejectinthese dead-end proposals, but you can do it easily if you base your stand on ethicaland political values. What good is it to make a program powerful and reliable atthe expense of users' freedom? Shouldnt freedom apply outside academia as wellas within it? The answers are obvious if freedom and community are among yourgoals. Free software respects the users' freedom, while non-free software negatesit
    Nothing strengthens your resolve like knowing that the communitys freedomdepends, in one instance, on you

==========第70页==========
    Chapter 8: Selling Free Software
    65
    8 Selling Free Software
    Many people believe that the spirit of the gnu project is that you should notcharge money for distributing copies of software, or that you should charge as littleas possible--just enough to cover the cost
    s Actually, we encourage people who redistribute free software to charge as muchas they wish or can. If this seems surprising to you, please read on
    The word"free has two legitimate general meanings: it can refer either to freedom or to price. When we speak of"free software, we're talking about freedom,
    not pr
    Specifically, it means that a user is free to run the program, change the
    program, and redistribute the program with or without changes
    Free programs are sometimes distributed gratis, and sometimes for a substantialprice. Often the same program is available in both ways from different places. Theprogram is free regardless of the price, because users have freedom in using it
    Non-free programs are usually sold for a high price, but sometimes a store willgive you a copy at no charge. That doesnt make it free software, though. Price orno price. the program is non-free because users dont have freedom
    Since free software is not a matter of price a low price isnt more free or closerto free. So if you are redistributing copies of free software, you might as wellcharge a substantial fee and make some money. Redistributing free software is agood and legitimate activity; if you do it, you might as well make a profit from it
    Free software is a community project, and everyone who depends on it ought tolook for ways to contribute to building the community. For a distributor, the way todo this is to give a part of the profit to the Free Software Foundation or some otherfree software development project. By funding development, you can advance theworld of free software
    Distributing free software is an opportunity to raise funds for development Dontwaste it
    n order to contribute funds, you need to have some extra If you charge too lowa fee, you wont have anything to spare to support development
    Will a higher distribution price hurt some users?
    People sometimes worry that a high distribution fee will put free software out ofrange for users who don' t have a lot of money. With proprietary software, a highprice does exactly that-but free software is different
    1 Remember to think of“free”asin" free speech,”" not as in“ free beer
    Originally written in 1996, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第71页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    The difference is that free software naturally tends to spread around, and thereare many ways to get it.
    Software hoarders try their damnedest to stop you from running a proprietaryprogram without paying the standard price. If this price is high, that does make ithard for some users to use the program
    With free software, users don't have to pay the distribution fee in order to usethe software. They can copy the program from a friend who has a copy, or withthe help of a friend who has network access. Or several users can join together,split the price of one CD-ROM, then each in turn can install the software. A highCD-ROM price is not a major obstacle when the software is free
    Will a higher distribution price discourage use of freesoftware?
    Another common concern is for the popularity of free software. People thinkthat a high price for distribution would reduce the number of users, or that a lowprice is likely to encourage users
    This is true for proprietary software-but free software is different. With somany ways to get copies, the price of distribution service has less effect on popularity
    In the long run how many people use free software is determined mainly by howmuch free software can do, and how easy it is to use many users will continue touse proprietary software if free software cant do all the jobs they want to do. Thusif we want to increase the number of users in the long run we should above alldevelop more free software
    The most direct way to do this is by writing needed free software or manualsyourself. But if you do distribution rather than writing, the best way you can helpis by raising funds for others to write them
    The term "selling software can be confusing too
    Strictly speaking, "selling?means trading goods for money. Selling a copy of afree program is legitimate, and we encourage it.
    However, when people think of"selling software, they usually imagine doing ithe way most companies do it: making the software proprietary rather than free
    So unless you're going to draw distinctions carefully, the way this article doeswe suggest it is better to avoid using the term "selling software?' and choose someother wording instead. For example, you could say" distributing free software for afee''-that is unambiguous
    High or low fees, and the gNu gPl
    Except for one special situation, the gnu General Public License (GNU GPl)has no requirements about how much you can charge for distributing a copy of freesoftware. You can charge nothing, a penny, a dollar, or a billion dollars. It's up to

==========第72页==========
    Chapter 8: Selling Free Software
    67
    you, and the marketplace, so dont complain to us if nobody wants to pay a billiondollars for a copy
    The one exception is in the case where binaries are distributed without the corresponding complete source code. Those who do this are required by the gnu gPlto provide source code on subsequent request. Without a limit on the fee for thesource code, they would be able set a fee too large for anyone to pay--such as abillion dollars-and thus pretend to release source code while in truth concealing it.
    So in this case we have to limit the fee for source. to ensure the user's freedom Inordinary situations, however, there is no such justification for limiting distributionfees. so we do not limit them
    Sometimes companies whose activities cross the line of what the gNU GPLpermits plead for permission, saying that they"wont charge money for the gnusoftware"or such like. They dont get anywhere this way. Free software is aboutfreedom. and enforcing the gPl is defending freedom when we defend usersfreedom, we are not distracted by side issues such as how much of a distributionfee is charged. Freedom is the issue, the whole issue, and the only issue

==========第73页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第74页==========
    Chapter 9: Free Software Needs Free Documentation
    69
    9 Free Software Needs free Documentation
    The biggest deficiency in free operating systems is not in the software--it is thelack of good free manuals that we can include in these systems. Many of our mostimportant programs do not come with full manuals. Documentation is an essentialpart of any software package; when an important free software package does notcome with a free manual, that is a major gap We have many such gaps today
    Once upon a time, many years ago, I thought i would learn Perl. I got a copy of afree manual. but i found it hard to read. when i asked perl users about alternativesthey told me that there were better introductory manuals-but those were not free
    Why was this? The authors of the good manuals had written them for o'Reilly
    Associates, which published them with restrictive terms--no copying, no modification source files not available-which exclude them from the free softwarecommunity.
    That wasnt the first time this sort of thing has ha
    d, and (to our com
    nity's great loss)it was far from the last. Proprietary manual publishers have enticedgreat many authors to restrict their manuals since then. Many times I have hearda gnu user eagerly tell me about a manual that he is writing, with which he expects to help the gnu project-and then had my hopes dashed, as he proceeded toexplain that he had signed a contract with a publisher that would restrict it so that'e cannot use it
    Given that writing good English is a rare skill among programmers, we can illfford to lose manuals this way
    Free documentation, like free software, is a matter of freedom, not price. Theproblem with these manuals was not that O'Reilly Associates charged a price forprinted copies--that in itself is fine. (The Free Software Foundation sells printedcopies of free gNu manuals, too. But gnu manuals are available in source codeform while these manuals are available only on paper gnu manuals come withpermission to copy and modify; the perl manuals do not. These restrictions are theproblems
    The criterion for a free manual is pretty much the same as for free software: it isa matter of giving all users certain freedoms. Redistribution including commercialredistribution) must be permitted, so that the manual can accompany every copy ofthe program, on-line or on paper. Permission for modification is crucial too
    As a general rule, I dont believe that it is essential for people to have permissionto modify all sorts of articles and books. The issues for writings are not necessarilythe same as those for software. For example i dont think you or i are obliged to
    Originally written in 2000, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第75页==========
    70
    Free Software, Free Society: Selected essays of richard m. stallman
    give permission to modify articles like this one, which describe our actions and ourviews
    But there is a particular reason why the freedom to modify is crucial for docu-mentation for free software. When people exercise their right to modify the sofware, and add or change its features, if they are conscientious they will change themanual too--so they can provide accurate and usable documentation with the modified program. A manual that forbids programmers to be conscientious and finish
    change the program, does not fill our community's need anual from scratch if theythe job, or more precisely requires them to write a new m
    While a blanket prohibition on modification is unacceptable, some kinds of limitson the method of modification pose no problem. For example, requirements topreserve the original authors copyright notice, the distribution terms, or the listof authors, are OK. It is also no problem to require modified versions to includenotice that they were modified even to have entire sections that may not be deletedor changed, as long as these sections deal with nontechnical topics. (Some gnumanuals have them.)
    These kinds of restrictions are not a problem because, as a practical matter theydont stop the conscientious programmer from adapting the manual to fit the modified program. In other words, they dont block the free software community frommaking full use of the manual
    However, it must be possible to modify all the technical content of the manual,and then distribute the result in all the usual media through all the usual channelsotherwise, the restrictions do block the community, the manual is not free, and soe need another manual
    Unfortunately, it is often hard to find someone to write another manual when aproprietary manual exists. The obstacle is that many users think that a proprietarymanual is good enough--so they dont see the need to write a free manual. Theydo not see that the free operating system has a gap that needs fillin
    Why do users think that proprietary manuals are good enough? Some have notconsidered the issue. I hope this article will do something to change that
    Other users consider proprietary manuals acceptable for the same reason so manypeople consider proprietary software acceptable: they judge in purely practicalterms, not using freedom as a criterion. These people are entitled to their opin
    Ions, but since those opinions spring from values which do not include freedomthey are no guide for those of us who do value freedom
    Please spread the word about this issue. We continue to lose manuals to proprietary publishing. If we spread the word that proprietary manuals are not sufficient,perhaps the next person who wants to help gnu by writing documentation willrealize. before it is too late that he must above all make it free
    We can also encourage commercial publishers to sell free, copylefted manualsinstead of proprietary ones. One way you can help this is to check the distribution terms of a manual before you buy it, and prefer copylefted manuals to noncopylefted ones
    Note The Free Software Foundation maintains
    Web page
    www.gnu.org/doc/other-free-books.htmlthatlistsfreebooksavailablefrom other publishers

==========第76页==========
    Chapter 10: Free Software Song
    10 Free Software Song
    To the melody of the bulgarian folk song" Sadi moma
    hustle
    oin us now and share the soft- ware You ll be
    Hoard-ers may
    When we have e- nough free soft-ware At
    orchestral strings
    fr
    hack
    you' ll be
    fre
    oin us now and
    hack
    the
    But they can-not
    call. hack
    We'l kick out those
    ·
    求
    ●··
    share
    h
    oft-ware You'
    free hack - ers
    youll be
    neigh- bors That’snot
    that’snot
    y li-cens-es
    more. hack - ers
    more
    Originally written in 1993, this version is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第77页==========
    72
    Free Software. Free Society Selected essays of richard M. stallman

==========第78页==========
    Section two
    73
    Section two
    Copyright, Copyleft, and Patents

==========第79页==========
    74
    Free Software. Free Society Selected essays of richard M. stallman

==========第80页==========
    Chapter ll: The right to read
    75
    11 The Right to read
    Lunarian Revolution, published in Luna City in 20% about the antecedents of theFrom "The road To Tycho, a collection of articles
    For Dan halbert the road to tycho began in college-when Lissa lenz asked toborrow his computer. Hers had broken down and unless she could borrow anothershe would fail her midterm project. There was no one she dared ask, except Dan
    This put Dan in a dilemma. He had to help her-but if he lent her his computershe might read his books. Aside from the fact that you could go to prison for manyyears for letting someone else read your books, the very idea shocked him at first.
    Like everyone. he had been taught since elementary school that sharing books wasnasty and wrong-something that only pirates would do
    And there wasnt much chance that the spa-the software protection
    Authority--would fail to catch him. In his software class, Dan had learned thateach book had a copyright monitor that reported when and where it was read, andby whom, to Central Licensing. (They used this information to catch readinpirates, but also to sell personal interest profiles to retailers. The next time hiscomputer was networked, Central Licensing would find out. He, as computerowner, would receive the harshest punishment--for not taking pains to prevent thcrime
    Of course, Lissa did not necessarily intend to read his books. She might want thecomputer only to write her midterm But dan knew she came from a middle-classfamily and could hardly afford the tuition, let alone her reading fees. Reading hisbooks might be the only way she could graduate. He understood this situation; hehimself had had to borrow to pay for all the research papers he read. (10% of thosefees went to the researchers who wrote the papers since dan aimed for an academiccareer, he could hope that his own research papers, if frequently referenced, wouldbring in enough to repay this loan.)
    ater on, dan would learn there was a time when anyone could go to the library and read journal articles, and even books, without having to pay. Therewere independent scholars who read thousands of pages without government library grants. But in the 1990s, both commercial and nonprofit journal publishershad begun charging fees for access. By 2047, libraries offering free public accessto scholarly literature were a dim memory.
    This article first appeared in the February 1997 issue of Communications of the ACM (Volume 40, Number 2); theAuthor'sNote"was later updated in 2002. This version is part of Free Software, Free Society: Selected Essays of richard M. Stallman, 2nd ed (Boston: GNU Press, 2004), ISBN I882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第81页==========
    76
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    There were ways, of course, to get around the spa and central licensing. Theywere themselves illegal. Dan hadhad a classmate in software, Frank martucciho had obtained an illicit debugging tool, and used it to skip over the copyrightmonitor code when reading books. but he had told too many friends about it, andone of them turned him in to the SPa for a reward(students deep in debt were easilytempted into betrayal). In 2047, Frank was in prison, not for pirate reading, but forpossessing a debugger.
    Dan would later learn that there was a time when anyone could have debuggintools. There were even free debugging tools available on cd or downloadable overthe net. But ordinary users started using them to bypass copyright monitors, andeventually a judge ruled that this had become their principal use in actual practice
    This meant they were illegal; the debuggers' developers were sent to prison
    Programmers still needed debugging tools, of course, but debugger vendors in2047 distributed numbered copies only, and only to officially licensed and bondedprogrammers. The debugger Dan used in software class was kept behind a specialfirewall so that it could be used only for class exercises
    It was also possible to bypass the copyright monitors by installing a modified system kernel. Dan would eventually find out about the free kernels, even entire freeoperating systems, that had existed around the turn of the century. But not onlywere they illegal, like debuggers--you could not install one if you had one, without knowing your computer's root password. And neither the FBI nor Microsoft
    Support would tell you that
    Dan concluded that he couldnt simply lend Lissa his computer. But he couldntrefuse to help her, because he loved her. Every chance to speak with her filled himwith delight. And that she chose him to ask for help, that could mean she loved him
    Dan resolved the dilemma by doing something even more unthinkable--he lenther the computer and told her his password. This way if Lissa read his books
    Central licensing would think he was reading them It was still a crime but theSPA would not automatically find out about it. They would only find out if lissareported him
    Of course, if the school ever found out that he had given Lissa his own passwordit would be curtains for both of them as students regardless of what she had usedit for. School policy was that any interference with their means of monitoringstudents' computer use was grounds for disciplinary action. It didnt matter whetheryou did anything harmful-the offense was making it hard for the administrators tocheck on you. They assumed this meant you were doing something else forbidden,and they did not need to know what it was
    Students were not usually expelled for this--not directly. Instead they werebanned from the school computer systems, and would inevitably fail all theirclasses
    Later, Dan would learn that this kind of university policy started only in the1980s, when university students in large numbers began using computers. Previ-ously, universities maintained a different approach to student discipline; they pun-ished activities that were harmful, not those that merely raised suspicion

==========第82页==========
    Chapter ll: The right to read
    Lissa did not report Dan to the SPA. his decision to help her led to their marriage, and also led them to question what they had been taught about piracy aschildren. The couple began reading about the history of copyright, about the soviet
    Union and its restrictions on copying, and even the original United States Constiution. They moved to Luna, where they found others who had likewise gravitatedaway from the long arm of the spa. when the Tycho uprising began in 2062. theuniversal right to read soon became one of its central aims
    Author’ s Note
    The right to read is a battle being fought today. Although it may take 50 years forour present way of life to fade into obscurity, most of the specific laws and practicesdescribed above have already been proposed many have been enacted into law inthe U.s.and elsewhere. In the U.s., the 1998 Digital Millennium Copyright Actestablished the legal basis to restrict the reading and lending of computerized booksand other data too). The European Union imposed similar restrictions in a 2001copyright directive
    There is one exception: the idea that the Fbi and microsoft will keep the rootpasswords for personal computers, and not let you have them, has not been pro-posed. This is an extrapolation from the Clipper chip and similar U.s. governmentkey-escrow proposals, together with a long-term trend: computer systems are in-creasingly set up to give absentee operators control over the people actually usingthe computer system
    But we are coming steadily closer to that point. In 2001, Disney-funded Senator
    Hollings proposed a bill called the sssca (now renamed the CBdtpa) that wouldrequire every new computer to have mandatory copy-restriction facilities that theuser cannot bypass
    In 2001 the U.s. began attempting to use the proposed Free Trade Area of the
    Americas treaty to impose the same rules on all the countries in the western hemisphere. The ftaa is one of the so-called"free trade''treaties, actually designedto give business increased power over democratic governments; imposing laws likethe dmca is typical of this spirit. The Electronic Frontier Foundation asks peopleto explain to the other governments why they should oppose this plan
    The sPa, which actually stands for Software Publishers Association, has beenreplaced in this police-like role by the bsa or Busines Software Alliance. It is nottoday, an official police force; unofficially, it acts like one. Using methods reminiscent of the erstwhile Soviet Union, it invites people to inform on their coworkersand friends. A bSa terror campaign in argentina in 2001 made veiled threats thatpeople sharing software would be raped in prison
    When this story was written, the Spa was threatening small Internet Servic
    Providers (isps), demanding they permit the SPa to monitor all users. Most ISPssurrender when threatened, because they cannot afford to fight back in court, (Atlanta Journal-Constitution. 1 Oct 96, D3). At least one IsP. Community conneXion in Oakland, California, refused the demand and was actually sued. The Spalater dropped the suit, but obtained the DMCA, which gave them the power theysought

==========第83页==========
    78
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    The university security policies described above are not imaginary. For examplea computer at one Chicago-area university prints this message when you log in
    This system is for the use of authorized users only. Individuals usingthis computer system without authority or in the excess of their author-ity are subject to having all their activities on this system monitored andrecorded by system personnel. In the course of monitoring individualsimproperly using this system or in the course of system maintenancethe activities of authorized users may also be monitored. Anyone usingthis system expressly consents to such monitoring and is advised that ifsuch monitoring reveals possible evidence of illegal activity or violationof University regulations system personnel may provide the evidence ofsuch monitoring to University authorities and/or law enforcement offi
    o This is an interesting approach to the Fourth Amendment: pressure most everyle to agree, In advance, to waive their rights under it.
    References
    The administrations White Paper: "Information Infrastructure Task Force, Intellectual Propertyand the National Information Infrastructure: The report of the working group on Intellectual Property rights"(1995
    An explanation of the white Paper:"The Copyright Grab, Pamela Samuelson, Wired, Jan1996(http://www.wired.com/wired/archive/4.01/white.paper-pr.html)
    Sold Out, James Boyle, The New York Times, 31 March 1996
    Public Data or Private Data, The Washington Post, 4 Nov 1996. (We used to have a link to thison our Web site, but the The Washington Post has decided to start charging users who wishesto read articles on the web site and therefore we have decided to remove the link.
    Union for the Public domain-an organization that aims to resist and reverse the overextensionofcopyrightandpatentpowers(http://www.public-domain.org/)

==========第84页==========
    Chapter 12: Misinterpreting Copyright--A Series of Errors
    12 Misinterpreting Copyright--A Series of
    Errors
    Something strange and dangerous is happening in copyright law. Under the u.s
    Constitution, copyright exists to benefit users--those who read books, listen to music, watch movies, or run software--not for the sake of publishers or authors. Yeteven as people tend increasingly to reject and disobey the copyright restrictionsimposed on them" for their own benefit, the U.s. government is adding more restrictions, and trying to frighten the public into obedience with harsh new penalties
    How did copyright policies come to be diametrically opposed to their stated pur-pose? And how can we bring them back into alignment with that purpose? Tounderstand, we should start by looking at the root of United States copyright lawthe u.s. constitution
    Copyright in the U.s. Constitution
    When the u.s. constitution was drafted the idea that authors were entitled toa copyright monopoly was proposed-and rejected. The founders of our countryadopted a different premise, that copyright is not a natural right of authors, but anartificial concession made to them for the sake of progress. The Constitution givespermission for a copyright system with this paragraph(Article I, Section 8
    Congress shall have the power to promote the progress of science andthe useful arts by securing for limited times to authors and inventors theexclusive right to their respective writings and discoveries
    The Supreme Court has repeatedly affirmed that promoting progress means ben-efit for the users of copyrighted works. For example, in Fox Film v. doyal, thecourt said
    The sole interest of the United States and the primary object in conferrinthe [copyright] monopoly lie in the general benefits derived by the publfrom the labors of authors
    This fundamental decision explains why copyright is not required by the con-stitution, only permitted as an option-and why it is supposed to last for limitedtimes. If copyright were a natural right, something that authors have because theydeserve it, nothing could justify terminating this right after a certain period of time,any more than everyone 's house should become public property after a certain lapseof time from its construction
    Originally written in 2002, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第85页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    The“ copyright bargain”
    The copyright system works by providing privileges and thus benefits to publishers and authors but it does not do this for their sake. rather it does this to modifytheir behavior: to provide an incentive for authors to write more and publish more
    In effect, the government spends the publics natural rights, on the public's behalf,as part of a deal to bring the public more published works. Legal scholars call thisconcept the"copyright bargain. It is like a government purchase of a highway oran airplane using taxpayers money, except that the government spends our freedom
    Instead of our money.
    But is the bargain as it exists actually a good deal for the public? Many alternative bargains are possible; which one is best? Every issue of copyright policy ispart of this question. If we misunderstand the nature of the question, we will tendto decide the issues badly
    The Constitution authorizes granting copyright powers to authors. In practice,luthors typically cede them to publishers; it is usually the publishers, not the authors, who exercise these powers and get most of the benefits, though authors mayget a small portion. Thus it is usually the publishers that lobby to increase copyrightpowers. To better reflect the reality of copyright rather than the myth, this articlerefers to publishers rather than authors as the holders of copyright powers. It alsorefers to the users of copyrighted works as"readers, even though using them doesnot always mean reading, because"users"is remote and abstrac
    The first error: "striking a balance
    The copyright bargain places the public first: benefit for the reading public isan end in itself; benefits (if any) for publishers are just a means toward that end
    Readers' interests and publishers interests are qualitatively unequal in priority
    The first step in misinterpreting the purpose of copyright is the elevation of thepublishers to the same level of importance as the readers
    It is often said that U.S. copyright law is meant to"strike a balance""between theinterests of publishers and readers. Those who cite this interpretation present it asa restatement of the basic position stated in the Constitution; in other words, it issupposed to be equivalent to the copyright bargain
    But the two interpretations are far from equivalent; they are different conceptually, and different in their implications. The balance concept assumes that thereaders' and publishers' interests differ in importance only quantitatively, in"howmuch weight,we should give them, and in what actions they apply to The termstakeholders"is often used to frame the issue in this way; it assumes that all kindsof interest in a policy decision are equally important. This view rejects the quali-tative distinction between the readers' and publishers'interests which is at the rootof the governments participation in the copyright bargain
    The consequences of this alteration are far-reaching, because the great protectionfor the public in the copyright bargain--the idea that copyright privileges can bejustified only in the name of the readers, never in the name of the publishers--isdiscarded by the balance interpretation. Since the interest of the publishers is

==========第86页==========
    Chapter 12: Misinterpreting Copyright--A Series of Errors
    regarded as an end in itself, it can justify copyright privileges; in other words, thebalance"concept says that privileges can be justified in the name of someone otherthan the pub
    As a prac
    matter, the consequence of the "balance" concept is to reverse the
    burden of justification for changes in copyright law. The copyright bargain placesthe burden on the publishers to convince the readers to cede certain freedoms. Theconcept of balance reverses this burden, practically speaking, because there is generally no doubt that publishers will benefit from additional privilege. So unlessharm to the readers can be proved, sufficient to"outweigh"this benefit, we are ledto conclude that the publishers are entitled to almost any privilege they request
    Since the idea of"striking a balance" between publishers and readers denies thereaders the primacy they are entitled to, we must reject i
    Balancing against what?
    When the government buys something for the public, it acts on behalf of thepublic, its responsibility is to obtain the best possible deal--best for the public, notfor the other party in the agreement
    For example, when signing contracts with construction companies to build hiways, the government aims to spend as little as possible of the public's money
    Government agencies use competitive bidding to push the price down
    As a practical matter, the price cannot be zero, because contractors will not bidthat low. Although not entitled to special consideration, they have the usual rightsof citizens in a free society, including the right to refuse disadvantageous contractseven the lowest bid will be high enough for some contractor to make money. Sothere is indeed a balance. of a kind but it is not a deliberate balancing of twointerests each with claim to special consideration. It is a balance between a publicgoal and market forces. The government tries to obtain for the taxpaying motoriststhe best deal they can get in the context of a free society and a free market
    In the copyright bargain, the government spends our freedom instead of ourmoney. Freedom is more precious than money, so governments responsibility tospend our freedom wisely and frugally is even greater than its responsibility tospend our money thus Governments must never put the publishers interests on apar with the public's freedom
    Not“ balance, but“ trade-of”
    The idea of balancing the readers' interests against the publishers' is the wronway to judge copyright policy, but there are indeed two interests to be weighedtwo interests of the readers. Readers have an interest in their own freedom in usinpublished works; depending on circumstances, they may also have an interest inencouraging publication through some kind of incentive system
    The word "balance. in discussions of copyright, has come to stand as shorthandfor the idea of striking a balance" between the readers and the publishers. Therefore, to use the word "balance in regard to the readers'two interests would beconiusing--we need another term

==========第87页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    In general, when one party has two goals that partly conflict, and cannot com-pletely achieve both of them, we call this a trade-off. Therefore, rather than
    ing the right trade-off between spending our freedom and keeping peak of"find-peaking of"striking the right balance"between parties, we should sp
    The second error: maximizing one output
    The second mistake in copyright policy consists of adopting the goal ofmaximizing--not just increasingthe number of published works. The erroneousconcept ofstriking a balance" elevated the publishers to parity with the readersthis second error places them far above the readers
    When we purchase something, we do not generally buy the whole quantity instock or the most expensive model. Instead we conserve funds for other purchasesby buying only what we need of any particular good, and choosing a model of sufficient rather than highest quality. The principle of diminishing returns suggests thatspending all our money on one particular good is likely to be inefficient allocationof resources; we generally choose to keep some money for another use
    Diminishing returns applies to copyright just as to any other purchase. The firstfreedoms we should trade away are those we miss the least, while giving the largestencouragement to publication. As we trade additional freedoms that cut closer tohome, we find that each trade is a bigger sacrifice than the last, while bringing asmaller increment in literary activity. Well before the increment becomes zero, wemay well say it is not worth its incremental price; we would then settle on a bargainwhose overall result is to increase the amount of publication, but not to the utmostpossibde extent
    Accepting the goal of maximizing publication rejects all these wiser, more advantageous bargains in advance--it dictates that the public must cede nearly all ofits freedom to use published works, for just a little more publication
    The rhetoric of maximization
    In practice, the goal of maximizing publication regardless of the cost to freedom is supported by widespread rhetoric which asserts that public copying is illegitimate, unfair, and intrinsically wrong. For instance, the publishers call peoplewho copy" pirates, a smear term designed to equate sharing information with yourneighbor with attacking a ship. (This smear term was formerly used by authorsto describe publishers who found lawful ways to publish unauthorized editionsits modern use by the publishers is almost the reverse. This rhetoric directly re-jects the Constitutional basis for copyright, but presents itself as representing theunquestioned tradition of the american legal syste
    The pirate" rhetoric is typically accepted because it blankets the media so thatfew people realize that it is radical. It is effective because if copying by the publicis fundamentally illegitimate, we can never object to the publishers demand thatwe surrender our freedom to do so. In other words, when the public is challenged toshow why publishers should not receive some additional power, the most importantreason of all-We want to copy' is disqualified in advance

==========第88页==========
    Chapter 12: Misinterpreting Copyright--A Series of Errors
    83
    This leaves no way to argue against increasing copyright power except using sideissues. Hence opposition to stronger copyright powers today almost exclusivelyites side issues, and never dares cite the freedom to distribute copies as a legitimatepublic value
    As a practical matter, the goal of maximization enables publishers to argue thata certain practice is reducing our sales--or we think it might--so we presume itdiminishes publication by some unknown amount, and therefore it should be pro-hibited. We are led to the outrageous conclusion that the public good is measuredby publishers' sales: What's good for General Media is good for the U.s.A
    The third error: maximizing publishers'power
    Once the publishers have obtained assent to the policy goal of maximizing publication output at any cost, their next step is to infer that this requires giving themthe maximum possible powers--making copyright cover every imaginable use ofa work, or applying some other legal tool such as"shrink wrap? licenses to equivalent effect. This goal, which entails the abolition of"fair use"and the"right offirst sale, is being pressed at every available level of government, from states ofthe u.s. to international bodies
    This step is erroneous because strict copyright rules obstruct the creation of useful new works. For instance, Shakespeare borrowed the plots of some of his playsfrom other plays published a few decades before, so if todays copyright law hadbeen in effect, his plays would have been illegal
    Even if we wanted the highest possible rate of publication, regardless of cost tothe public, maximizing publishers' power is the wrong way to get it. As a means
    g progress, it is self-defeating
    The results of the three errors
    The current trend in copyright legislation is to hand publishers broader powersfor longer periods of time. The conceptual basis of copyright, as it emerges distorted from the series of errors, rarely offers a basis for saying no. Legislatorsgive lip service to the idea that copyright serves the public, while in fact givingpublishers whatever they ask for
    For example, here is what Senator Hatch said when introducing S. 483, a 1995bill to increase the term of copyright by 20 years
    I believe we are now at such a point with respect to the question ofwhether the current term of copyright adequately protects the interestsof authors and the related question of whether the term of protection continues to provide a sufficient incentive for the creation of new works ofauthorship
    This bill extended the copyright on already-published works written since th1920s. This change was a giveaway to publishers with no possible benefit to thepublic, since there is no way to retroactively increase now the number of books

==========第89页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    published back then. Yet it cost the public a freedom that is meaningful today-thefreedom to redistribute books from that era
    The bill also extended the copyrights of works yet to be written. For works madefor hire, copyright would last 95 years instead of the present 75 years. Theoreticallythis would increase the incentive to write new works; but any publisher that claimsto need this extra incentive should substantiate the claim with projected balancesheets for the year 2075
    Needless to say, Congress did not question the publishers' arguments: a lawextending copyright was enacted in 1998. It was called the Sonny Bono Copyright
    Term Extension Act, named after one of its sponsors, who died earlier that year
    His widow, who served the rest of his term made this statement
    Actually, Sonny wanted copyright to last forever. I am informed by staffthat such a change would violate the Constitution. I invite all of you towork with me to strengthen our copyright laws in all ways available tous. As you know, there is also Jack Valenti's proposal to last forever lessone day. Perhaps the committee may look at that next Congress
    The Supreme Court has agreed to hear a case that seeks to overturn the law onthe grounds that the retroactive extension fails to serve the Constitutions goal ofpromoting progress
    Another law, passed in 1996, made it a felony to make sufficiently many copiesof any published work, even if you give them away to friends just to be nice. Previously this was not a crime in the u.s. at al
    An even worse law, the Digital Millennium Copyright Act (DMCA), was designed to bring back copy protection(which computer users detest) by making it acrime to break copy protection, or even publish information about how to break it
    This law ought to be called the"Domination by Media Corporations Act"becauseit effectively offers publishers the chance to write their own copyright law. It saysthey can impose any restrictions whatsoever on the use of a work, and these restrictions take the force of law provided the work contains some sort of encryption orlicense manager to enforce them
    One of the arguments offered for this bill was that it would implement a recenttreaty to increase copyright powers. The treaty was promulgated by the World In-tellectual Property Organization, an organization dominated by copyright-holdinand patent-holding interests, with the aid of pressure from the clinton administra-tion; since the treaty only increases copyright power, whether it serves the publicinterest in any country is doubtful. In any case, the bill went far beyond what thetreaty required
    Libraries were a key source of opposition to this bill, especially to the aspects thatblock the forms of copying that are considered"fair use. How did the publishersrespond? Former representative Pat Schroeder. now a lobbyist for the associationof American Publishers, said that the publishers"could not live with what thelibraries are] asking for. Since the libraries were asking only to preserve part ofthe status quo, one might respond by wondering how the publishers had surviveduntil the present da

==========第90页==========
    Chapter 12: Misinterpreting Copyright--A Series of Errors
    85
    Congressman Barney Frank, in a meeting with me and others who opposed thisbill, showed how far the U.S. Constitutions view of copyright has been disregarded
    He said that new powers, backed by criminal penalties, were needed urgently because the" movie industry is worried, as well as the"music industry"and otherindustries. I asked him, But is this in the public interest? His response wastelling: Why are you talking about the public interest? These creative people donthave to give up their rights for the public interest! The"industry has been identified with the"creative people'"it hires, copyright has been treated as its entitlementand the Constitution has been turned upside down
    The dMCa was enacted in 1998. As enacted it says that fair use remains nominally legitimate but allows publishers to prohibit all software or hardware that youcould practice it with. Effectively fair use is prohibited
    Based on this law, the movie industry has imposed censorship on free softwarefor reading and playing dvds, and even on the information about how to read them
    In april 2001. professor edward felten of princeton university was intimidatedby lawsuit threats from the recording Industry Association of America (RIAAinto withdrawing a scientific paper stating what he had learned about a proposedencryption system for restricting access to recorded musIc
    We are also beginning to see e-books that take away many of readers'traditionalfreedoms--for instance, the freedom to lend a book to your friend, to sell it to aused book store, to borrow it from a library, to buy it without giving your nameto a corporate data bank, even the freedom to read it twice. Encrypted e-booksgenerally restrict all these activities-you can read them only with special secretsoftware designed to restrict you
    I will never to buy one of these encrypted restricted e-books, and i hope you willreject them too. If an e-book doesnt give you the same freedoms as a traditionalpaper book, dont accept it
    Anyone independently releasing software that can read restricted e-books risksprosecution. A Russian programmer, Dmitry Sklyarov, was arrested in 2001 whilevisiting the u.s. to speak at a conference, because he had written such a programin Russia, where it was lawful to do so Now Russia is preparing a law to prohibitit too, and the European Union recently adopted one
    Mass-market e-books have been a commercial failure so far but not becausereaders chose to defend their freedom they were unattractive for other reasons
    such as that computer display screens are not easy surfaces to read from. W
    cant rely on this happy accident to protect us in the long term; the next attemptto promote e-books will use "electronic paper"-book-like objects into which anencrypted, restricted e-book can be downloaded. If this paper-like surface provesmore appealing than todays display screens, we will have to defend our freedomin order to keep it. Meanwhile, e-books are making inroads in niches: NYU andother dental schools require students to buy their textbooks in the form of restrictede-books
    The media companies are not satisfied yet. In 2001, Disney-funded Senator
    Hollings proposed a bill called the Security systems standards and certification

==========第91页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Act(SSSCA), which would require all computers(and other digital recording andplayback devices) to have government-mandated copy restriction systems. That istheir ultimate goal, but the first item on their agenda is to prohibit any equipmentthat can tune digital HDTV unless it is designed to be impossible for the public totamper with(i.e, modify for their own purposes). Since free software is softwarethat users can modify we face here for the first time a proposed law that explicitlyprohibits free software for a certain job. Prohibition of other jobs will surely fol-low. If the fCC adopts this rule, existing free software such as gnu Radio wouldbe censored
    To block these bills and rules requires political action. 2
    Finding the right bargain
    What is the proper way to decide copyright policy? If copyright is a bargainmade on behalf of the public, it should serve the public interest above all. Thegovernments duty when selling the public's freedom is to sell only what it mustand sell it as dearly as possible. At the very least, we should pare back the extent ofcopyright as much as possible while maintaining a comparable level of publication
    Since we cannot find this minimum price in freedom through competitive bidding, as we do for construction projects, how can we find it
    One possible method is to reduce copyright privileges in stages, and observe theresults. By seeing if and when measurable diminutions in publication occur, wewill learn how much copyright power is really necessary to achieve the public'spurposes. We must judge this by actual observation, not by what publishers saywill happen, because they have every incentive to make exaggerated predictions ofdoom if their powers are reduced in any way
    Copyright policy includes several independent dimensions, which can be ad-justed separately. After we find the necessary minimum for one policy dimensionit may still be possible to reduce other dimensions of copyright while maintaining
    One important dimension of copyright is its duration, which is now typically onthe order of a century. Reducing the monopoly on copying to ten years, startingfrom the date when a work is published, would be a good first step. Another aspectof copyright, which covers the making of derivative works, could continue for alonger period
    Why count from the date of publication? Because copyright on unpublishedworks does not directly limit readers' freedom; whether we are free to copy a workis moot when we do not have copies. So giving authors a longer time to get a workpublished does no harm. Authors(who generally do own the copyright prior to
    I Since renamed to the unpronounceable CBDTPA, for which a good mnemonic is, "Consume, But
    Dont Try Programming Anything, but it really stands for the "Consumer Broadband and Digital
    Television promotion act
    would like to help, I recommend the Web sites digitalspeech org andeff. ora

==========第92页==========
    Chapter 12: Misinterpreting Copyright--A Series of Errors
    87
    publication) will rarely choose to delay publication just to push back the end of thecopyright term
    Why ten years? Because that is a safe proposal; we can be confident on practical grounds that this reduction would have little impact on the overall viability ofpublishing today. In most media and genres, successful works are very profitable injust a few years, and even successful works are usually out of print well before ten
    Even for reference works, whose useful life may be many decades, ten-year copyright should suffice: updated editions are issued regularly, and many readers willbuy the copyrighted current edition rather than copy a ten-year-old public domainversion
    Ten years may still be longer than necessary; once things settle down, we couldtry a further reduction to tune the system. At a panel on copyright at a literary convention, where I proposed the ten-year term, a noted fantasy author sitting besideme objected vehemently, saying that anything beyond five years was intolerable
    But we don t have to apply the same time span to all kinds of works. Maintainingthe utmost uniformity of copyright policy is not crucial to the public interest, andcopyright law already has many exceptions for specific uses and media. It would befoolish to pay for every highway project at the rates necessary for the most difficultprojects in the most expensive regions of the country; it is equally foolish to"payfor all kinds of art with the greatest price in freedom that we find necessary for anyone kind
    So perhaps novels, dictionaries, computer programs, songs, symphonies, andmovies should have different durations of copyright, so that we can reduce theduration for each kind of work to what is necessary for many such works to bepublished. Perhaps movies over one hour long could have a twenty-year copyright,because of the expense of producing them. In my own field, computer program-ming, three years should suffice, because product cycles are even shorter than thatanother dimension of copyright policy is the extent of fair use: some ways ofreproducing all or part of a published work that are legally permitted even thoughit is copyrighted. The natural first step in reducing this dimension of copyrightpower is to permit occasional private small-quantity noncommercial copying anddistribution among individuals. This would eliminate the intrusion of the copyrightpolice into people's private lives, but would probably have little effect on the salesof published works. (It may be necessary to take other legal steps to ensure thatshrink-wrap licenses cannot be used to substitute for copyright in restricting suchcopying. The experience of Napster shows that we should also permit noncommercial verbatim redistribution to the general public--when so many of the publicwant to copy and share, and find it so useful, only draconian measures will stopthem, and the public deserves to get what it wants
    For novels. and in general for works that are used for entertainment noncommercial verbatim redistribution may be sufficient freedom for the readers Computerprograms, being used for functional purposes(to get jobs done), call for additionalfreedoms beyond that, including the freedom to publish an improved version. See" Free Software Definition, in this book, for an explanation of the freedoms thatsoftware users should have. But it may be an acceptable compromise for these

==========第93页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    freedoms to be universally available only after a delay of two or three years fromthe programs publication
    Changes like these could bring copyright into line with the public's wish to udigital technology to copy. Publishers will no doubt find these proposals" unbalanced; they may threaten to take their marbles and go home, but they wont reallydo it, because the game will remain profitable and it will be the only game in town
    As we consider reductions in copyright power, we must make sure media compa-nies do not simply replace it with end-user license agreements. It would be neces-sary to prohibit the use of contracts to apply restrictions on copying that go beyondthose of copyright. Such limitations on what mass-market nonnegotiated contractscan require are a standard part of the u.s. legal system
    Apersonal note
    I am a software designer, not a legal scholar. I've become concerned with copy-right issues because there's no avoiding them in the world of computer networks
    As a user of computers and networks for thirty years, I value the freedoms thathave lost and the ones we may lose next As an author. i can reject the romantic mystique of the author as semidivine creator often cited by publishers tojustify increased copyright powers for authors, which authors will then sign awayto publishers
    Most of this article consists of facts and reasoning that you can check,, and pro-posals on which you can form your own opinions. But I ask you to accept one thinon my word alone: that authors like me dont deserve special power over you. Ifyou wish to reward me further for the software or books I have written, I wouldgratefully accept a check--but please dont surrender your freedom in my name
    3 The Internet being the largest of the worlds computer networks

==========第94页==========
    Chapter 13: Science Must 'Push' Copyright Aside
    13 Science must‘Push’ Copyright aside
    It should be a truism that scientific literature exists to disseminate scientificknowledge. and that scientific journals exist to facilitate the process. It thereforefollows that rules for use of scientific literature should be designed to help achievethat goal
    copyright, were established in the age of the
    printing press, an inherently centralized method of mass-production copying. In aprint environment, copyright on journal articles restricted only journal publishersrequiring them to obtain permission to publish an article, and would-be plagiarists
    It helped journals to operate and disseminate knowledge, without interfering withthe useful work of scientists or students either as writers or readers of articles
    These rules fit that system well
    The modern technology for scientific publishing, however, is the World wide
    Web. What rules would best ensure the maximum dissemination of scientific articles, and knowledge, on the Web? Articles should be distributed in non-proprietaryformats, with open access for all. and everyone should have the right to"mirrorarticles: that is to republish them verbatim with proper attribution
    These rules should apply to past as well as future articles, when they are distributed in electronic form. But there is no crucial need to change the present copyright system as it applies to paper publication of journals, because the problem isnot in that domain
    Unfortunately, it seems that not everyone agrees with the truisms that began thisarticle. Many journal publishers appear to believe that the purpose of scientificliterature is to enable them to publish journals so as to collect subscriptions fromscientists and students. Such thinking is known as"confusion of the means withe enas
    Their approach has been to restrict access even to read the scientific literature tothose who can and will pay for it. They use copyright law, which is still in forcedespite its inappropriateness for computer networks, as an excuse to stop scientistsfrom choosing new rules
    For the sake of scientific cooperation and humanitys future, we must reject thatapproach at its root--not merely the obstructive systems that have been institutedbut the mistaken priorities that inspired them
    Journal publishers sometimes claim that on-line access requires expensive highpowered server machines, and that they must charge access fees to pay for theseservers. This problem"is a consequence of its own solution. Give everyone the
    THisessayoriginallyappearedin1991onwww.naturecominthewebDebatessectionThisver
    sion is part of Free Software, Free Society: Selected Essays of richard M. stallman, 2nd ed. (Boston GNU Press, 2004), ISBN I882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第95页==========
    90
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    freedom to mirror. and libraries around the world will set up mirror sites to meetthe demand. This decentralized solution will reduce network bandwidth needs andprovide faster access, all the while protecting the scholarly record against accidental
    Publishers also argue that paying the editors requires charging for access. Letus accept the assumption that editors must be paid; this tail need not wag the dog
    The cost of editing for a typical paper is between 1 and 3%o of the cost of fundinthe research to produce it. Such a small percentage of the cost can hardly justifyobstructing the use of the results
    Instead, the cost of editing could be recovered, for example, through pagecharges to the authors, who can pass these on to the research sponsors. The spsors should not mind, given that they currently pay for publication in a more cum-bersome way through overhead fees for the university librarys subscription to thejournal. By changing the economic model to charge editing costs to the researchsponsors, we can eliminate the apparent need to restrict access. The occasional author who is not affiliated with an institution or company and who has no researchsponsor, could be exempted from page charges, with costs levied on institutionbased authors
    Another justification for access fees to on-line publications is to fund conversionof the print archives of a journal into on-line form. That work needs to be done, bute should seek alternative ways of funding it that do not involve obstructing accessto the result. The work itself will not be any more difficult, or cost any more. It islf-defeating to digitize the archives and waste the results by restricting access
    The U.s. Constitution says that copyright exists to promote the progress of sci-ence. When copyright impedes the progress of science, science must push copyright out of the way

==========第96页==========
    Chapter 14: What is Copyleft?
    14 What is Copyleft?
    Copyleft is a general method for making a program free software and requiringll modified and extended versions of the program to be free software as well
    The simplest way to make a program free is to put it in the public domain, uncopyrighted. This allows people to share the program and their improvements, ifthey are so minded. But it also allows uncooperative people to convert the programinto proprietary software. They can make changes, many or few, and distribute theresult as a proprietary product. People who receive the program in that modifiedform do not have the freedom that the original author gave them; the middlemanhas stripped it away
    In the gnu project, our aim is to give all users the freedom to redistribute andchange gnU software. If middlemen could strip off the freedom, we might havemany users, but those users would not have freedom. So instead of putting GNusoftware in the public domain, we"copyleft"it. Copyleft says that anyone whoredistributes the software, with or without changes, must pass along the freedom tofurther copy and change it. Copyleft guarantees that every user has freedom
    Copyleft also provides an incentive for other programmers to add to free software. Important free programs such as the gnu c++ compiler exist only becauseof this
    Copyleft also helps programmers who want to contribute improvements to freesoftware get permission to do that. These programmers often work for companiesor universities that would do almost anything to get more money. a programmermay want to contribute her changes to the community but her employer may wantto turn the changes into a proprietary software product
    When we explain to the employer that it is illegal to distribute the improvedversion except as free software the employer usually decides to release it as freesoftware rather than throw it away
    To copyleft a program, we first state that it is copyrighted; then we add distribution terms, which are a legal instrument that gives everyone the rights to use,modify, and redistribute the program's code or any program derived from it but onlyif the distribution terms are unchanged. Thus the code and the freedoms becomelegally inseparable
    Proprietary software developers use copyright to take away the users' freedomwe use copyright to guarantee their freedom. Thats why we reverse the name,changing“ copyright”into‘ copyleft.”
    Copyleft is a general concept; there are many ways to fill in the details. Inthe Gnu Project, the specific distribution terms that we use are contained in
    Originally written in 1996, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第97页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    the gnu general public license. The gnu General public license is often called the GNU GPl for short. There is also a Frequently Asked Questionspage(http:/www.gnu.org/licenses/gpl-faq.htmlaboutthegnugpl.Youcan also read about why the fsf gets copyright assignments from contributors(http://www.gnu.org/copyleft/why-assign.html
    An alternate form of copyleft, the gnu Lesser General Public License (LGPl)applies to a few(but not all) gnU libraries. This license was formerly called the
    Library GPl, but we changed the name, because the old name encouraged developers to use this license more often than it should be used. For an explanation ofwhy this change was necessary, read the article why you shouldnt use the libraryGPL for your next library
    The gnu Library General Public license is still available in HTML and textformat although it has been superseded by the Lesser gPl
    The gnu Free Documentation License(FDL) is a form of copyleft intended foruse on a manual, textbook or other document to assure everyone the effective freedom to copy and redistribute it, with or without modifications, either commerciallyor noncommercial
    c The appropriate license is included in many manuals and in each GNU sourcede distribution
    The gnu GPl is designed so that you can easily apply it to your own programif you are the copyright holder. You dont have to modify the gnu gpl to do thisjust add notices to your program which refer properly to the gNu gPl
    If you would like to copyleft your program with the GNU GPL or the
    GnuLgpl,pleaseseetheGplinstructionspage(www.gnu.org/copyleft/gpl-howto. html) for advice. Please note that you must use the entire text of the GPLif you use it. It is an integral whole, and partial copies are not permitted. Likewisefor the lgPl)
    Using the same distribution terms for many different programs makes it easyto copy code between various different programs. Since they all have the samedistribution terms there is no need to think about whether the terms are compatibl
    The Lesser gPl includes a provision that lets you alter the distribution terms to theordinary GPl, so that you can copy code into another program covered by the gPl
    If you would like to copy left your manual with the GNU FDL, please sethe instructions at the end of the Fdl text, and the gFDl instructions page(http://www.gnu.org/copyleft/fdl-howto.html).AswiththeGnuGpl,youmustuse the entire license; partial copies are not permitted

==========第98页==========
    Chapter 15: Copyleft: Pragmatic Idealism
    93
    15 Copyleft: Pragmatic Idealism
    Every decision a person makes stems from the persons values and goals. Peoplecan have many different goals and values; fame, profit, love, survival, fun, andfreedom, are just some of the goals that a good person might have. When the goalis to help others as well as oneself, we call that idealism
    My work on free software is motivated by an idealistic goal: spreading freedomand cooperation. I want to encourage free software to spread, replacing proprietarysoftware that forbids cooperation and thus make our society better
    Thats the basic reason why the gnu general public license is written the wayit is-as a copyleft. All code added to a gPL-covered program must be free software,even if it is put in a separate file. I make my code available for use in freesoftware and not for use in proprietary software in order to encourage other peoplewho write software to make it free as well. I figure that since proprietary softwaredevelopers use copyright to stop us from sharing, we cooperators can use copyrightto give other cooperators an advantage of their own they can use our code
    Not everyone who uses the GNU GPl has this goal. Many years ago, a friendof mine was asked to rerelease a copylefted program under non-copyleft terms, andhe responded more or less like this
    Sometimes I work on free software, and sometimes I work on proprietarysoftware-but when I work on proprietary software, I expect to get paid
    He was willing to share his work with a community that shares software but sawno reason to give a handout to a business making products that would be off limitsto our community. His goal was different from mine, but he decided that the gnuGPL was useful for his goal too
    If you want to accomplish something in the world, idealism is not enough-youneed to choose a method that works to achieve the goal. In other words, you needto be"pragmatic. Is the gPl pragmatic? Lets look at its results
    Consider GNu C++. why do we have a free C++ compiler? only becausethe gnu GPL said it had to be free. GNu C++ was developed by an industryconsortium, MCC, starting from the gnu c compiler. MCC normally makes itswork as proprietary as can be. But they made the C++ front end free softwarebecause the gnU GPl said that was the only way they could release it. The C++front end included many new files but since they were meant to be linked withGCC. the gpl did apply to them the benefit to our community is evident
    Consider gnu objective C. NeXt initially wanted to make this front end
    I An operating system created by Steve Jobs, eventually bought out by apple
    Originally written in 1998, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第99页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    proprietary; they proposed to release it as o files, and let users link them with therest of GCC, thinking this might be a way around the GPLs requirements. But ourlawyer said that this would not evade the requirements that it was not allowed. Andso they made the objective c front end free software
    hose examples happened years ago, but the GNU GPL continues to bring usmore free software
    Many gnu libraries are covered by the GNu Library General Public license,but not all. One gnu library that is covered by the ordinary gnu gpl is readline, which implements command-line editing. I once found out about a non-freeprogram that was designed to use Readline, and told the developer this was notallowed. He could have taken command-line editing out of the program but whathe actually did was re-release it under the gPl. now it is free software
    The programmers who write improvements to GCC (or Emacs, or Bash, or
    Linux, or any GPL-covered program) are often employed by companies or universities. When the programmer wants to return his improvements to the communitand see his code in the next release, the boss may say
    Hold on there-your code belongs to us! We dont want to share it; whave decided to turn your improved version into a proprietary softwareproduct
    Here the gnu gPl comes to the rescue. The programmer shows the boss thatthis proprietary software product would be copyright infringement, and the bossrealizes that he has only two choices: release the new code as free software or nott all. Almost always he lets the programmer do as he intended all along, and thecode goes into the next release
    The GNU GPL is not Mr. Nice Guy. It says"no"to some of the things thatpeople sometimes want to do. There are users who say that this is a bad thing-thatthe gPl"excludes "some proprietary software developers who"need to be broughtinto the free software community
    But we are not excluding them from our community they are choosing not toenter. Their decision to make software proprietary is a decision to stay out of ourcommunity. Being in our community means joining in cooperation with us; wecannot"bring them into our community" if they dont want to join
    What we can do is offer them an inducement to join. The GNU GPL is designedto make an inducement from our existing software: If you will make your softwarefree, you can use this code. Of course, it wont win 'em all, but it wins some ofthe time
    Proprietary software development does not contribute to our community, but itsdevelopers often want handouts from us. Free software users can offer free software developers strokes for the ego--recognition andd gratitude--but it can betempting when a business tells you
    Just let us put your package in our proprietary program and your programwill be used by many thousands of people!
    The temptation can be powerful, but in the long run we are all better off if wresist it. The temptation and pressure are harder to recognize when they come in-directly, through free software organizations that have adopted a policy of catrin

==========第100页==========
    Chapter 15: Copyleft: Pragmatic Idealism
    95
    to proprietary software. The X Consortium(and its successor, the Open Group)offers an example: funded by companies that made proprietary software, they havestrived for a decade to persuade programmers not to use copyleft. Now that the
    Open Group has made Xiir6 4 non-free software, those of us who resisted thatpressure are glad that we did. 2
    Pragmatically speaking, thinking about greater long-term goals will strengthenyour will to resist this pressure. If you focus your mind on the freedom and community that you can build by staying firm, you will find the strength to do it. " Standfor something, or you will fall for nothing.
    And if cynics ridicule freedom, ridicule community. if"hard-nosed realistssay that profit is the only ideal
    st ignore them, and use copy left all the same
    n September 1998, several months after XllR6. 4 was released with non-free distribtion termsthe Open group reversed its decision and rereleased it under the same non-copyleft free softwarelicense that was used for X1lR6.3. Thank you, Open Group--but this subsequent reversal doesnot invalidate the conclusions we draw from the fact that adding the restrictions was possible

==========第101页==========
    96
    Free Software. Free Society Selected essays of richard M. stallman

==========第102页==========
    Chapter 16: The Danger of Software Patents
    97
    16 The Danger of Software Patents
    You might have been familiar with my work on free software. This speech isnot about that. This speech is about a way of misusing laws to make softwaredevelopment a dangerous activity. This is about what happens when patent lawgets applied to the field of software
    It is not about patenting software. That is a very bad way, a misleading way, todescribe it, because it is not a matter of patenting individual programs. If it wereit would make no difference it would be basically harmless. Instead it is aboutpatenting ideas. Every patent covers some idea. Software patents are patents whichcover software ideas, ideas you would use in developing software. That is whatmakes them a dangerous obstacle to all software development
    Y
    intellectual property
    This term, as you can see, is biased: it makes an assumption that, whatever it isyou are talking about, the way to treat it is as a kind of property, which is actuallyone among many alternatives. This term" intellectual property prejudges the mostbasic question in whatever area you are dealing with. This is not conducive to clearand open-minded thinking
    There is an additional problem in the term, which has nothing to do with the promotion of any one opinion: it gets in the way of understanding even the facts. Theterm"intellectual propertyis a catch-all: it lumps together completely disparateareas of law such as copyrights and patents which are completely different everydetail is different. It also lumps together trademarks, which are even more differentand various other things less commonly encountered. None of them has anything incommon with any of the others. Their origins historically are completely separatethe laws were designed independently they covered different areas of life and activities. The public policy issues they raise are completely unrelated so if you try tothink about them by lumping them together, you are guaranteed to come to foolishconclusions. There is literally no sensible, intelligent opinion you can have aboutintellectual property So if you want to think clearly, dont lump them together
    Think about copyrights, and then think about patents. Learn about copyright law,
    ately learn about patent la
    To give you some of the biggest differences between copyrights and patents
    Copyrights cover the details of expression of a work; copyrights dont coverany ideas. Patents only cover ideas and the use of ideas
    Copyrights happen automatically. Patents are issued by a patent office in response to an application
    This is an edited transcript of a speech given at University of Cambridge, London, on March 25, 2002. This tran
    script is part of Free Software, Free Society: Selected Essays of richard M. stallman, 2nd ed (Boston: GNU Press, 2004), ISBN I882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第103页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    Patents cost a lot of money. They cost even more paying the lawyers to writethe application than they cost to actually apply. It typically takes some yearsfor the application to get considered, even though patent officces do an extremely sloppy job of considering them
    Copyrights last tremendously long. In some cases they can last as long as 150years. Patents last 20 years, which is long enough that you can outlive thembut still quite long by the timescale of a field such as software. Think backabout 20 years ago when the PC was a new thing. Imagine being constrainedto develop software using only the ideas that were known in 1982
    Copyrights cover copying only. If you write a novel that turns out to be wordfor-word the same as gone with The wind, and you can prove you never saw
    Gone With The wind, that would be a defense to any accusation of copyrightinfringement
    A patent is an absolute monopoly on using an idea. Even if you could proveyou had the idea on your own, that would be entirely irrelevant if the idea ispatented by somebody else
    I hope you will forget about copyrights for the rest of this talk, because this talkis about patents and you should never lump together copyrights and patents--forthe sake of understanding these legal issues clearly
    Imagine what would happen in your understanding of practical chemistry [orcooking] if you confused water and ethanol
    When you hear people describe the patent system, they usually describe it fromthe point of view of somebody who is hoping to get a patent--what it would be likefor you to get a patent, what it would be like for you to be walking down the streetwith a patent in your pocket, so that every so often you can pull it out and point itat somebody and say"Give me your money
    There is a reason for this bias which is that most of the people who will tellyou about the patent system have a stake in it, so they want you to like it. There isanother reason: the patent system is a lot like a lottery, because only a tiny fractionof patents actually bring any benefit to those who hold the patents. In fact, The
    Economist once compared it to a"time-consuming lottery If you have seen adsfor lotteries, they always invite you to think about winning. They dont invite youto think about losing, even though losing is far more likely. It is the same withads for the patent system: they al ways invite you to think about being the one who
    wIns
    To balance this bias, I am going to describe the patent system from the pointof view of its victims--that is, from the point of view of somebody who wants todevelop software but is forced to contend with a system of software patents thatmight result in getting sued
    So, what is the first thing you are going to do after you have had an idea of whatkind of program you are going to write?
    The first thing you might want to try to do, to deal with the patent system, is findout what patents may cover the program you want to write. This is impossible
    The reason is that some of the patent applications that are pending are secret
    After a certain amount of time they may get published like 18 months But that

==========第104页==========
    Chapter 16: The Danger of Software Patents
    is plenty of time for you to write a program, and even release it, not knowing thatthere is going to be a patent and you are going to get sued
    This is not just academic. In 1984, the compress program was written, a programfor data compression. At the time, there was no patent on the lzw compressionalgorithm it used. Then, in 1985, the U.S. issued a patent on this algorithm, andover the next few years those who distributed the compress program started gettingthreats
    There was no way that the author of compress could have realized that he waslikely to get sued. All he did was use an idea that he found in a journal, just asprogrammers had always done. He hadnt realized that you could no longer safelyuse ideas that you found in a journal
    Let's forget about that problem. The issued patents are published by the patentoffice, so you can find the whole long list of them and see exactly what they say
    Of course, you couldnt actually read the whole list, as there are too many ofthem. In the u.s.. there are hundreds of thousands of software patents There is noway you can keep track of what they are all about. You would have to try to searchfor relevant ones
    Some people say that should be easy in these modern days of computers. Youcould search for key words and so on but that only works to a certain extent. Youwill find some patents in the area. However, you wont necessarily find them all
    For instance, there was a software patent(which may have expired by now)onnatural-order recalculation in spreadsheets. This means basically that when youmake certain cells depend on other cells, it always recalculates everything afterthings it depends on, so that after one recalculation, everything is up to date. Thefirst spreadsheets did their recalculation top-down, so if you made a cell dependon a cell lower down, and you had a few such steps, you had to recalculate severaltimes to get the new values to propagate upwards. (You were supposed to havethings depend on cells above them
    Then someone realized, why dont I do the recalculation so that each thing getsrecalculated after the things it depends on? This algorithm is called topologicalsorting. The first reference I could find to it is in 1963. The patent covered severaldozen different ways you could implement topological sortin
    But you wouldnt have found this patent by searching for "spreadsheet. Youcouldnt have found it by searching for"natural order"or "topological sort. Itdidnt have any of those terms in it. In fact, it was described as a method of"compiling formulas into object code. When I first saw it, I thought it was the wronpaten
    Let's suppose that you got a list of patents and you want to see what you are notallowed to do. When you try studying these patents, you will discover they are veryhard to understand, as they are written in tortuous legal language whose meaning isvery hard to understand. The things patent offices say often dont mean what theyseem to mean
    There was an australian government study of the patent system in the 1980s
    It concluded that aside from international pressure there was no reason to havepatent system-it did no good for the public-and recommended abolishing it ifnot for international pressure. One of the things they cited was that engineers dont

==========第105页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    y reading patents to learn anything, as it is too hard to understand them. Theyquoted one engineer saying"I cant recognize my own inventions in patentee
    This is not just theoretical. Around 1990, a programmer named Paul Heckelsued Apple, claiming that Hypercard infringed a couple of his patents. When hefirst saw Hypercard, he didnt think it had anything to do with his patents, with hisinventions. It didnt look similar. When his lawyer told him that you could readthe patents as covering part of Hypercard, he decided to attack Apple. when I gavea speech about this at stanford. he was in the audience. He said. That's not true, Ijust didnt understand the extent of my protection! I said,"Yes, thats what I said
    So, in fact, you will have to spend a lot of time talking with lawyers to figureout what these patents prohibit you from doing. Ultimately they are going to saysomething like this: If you do something in here, you are sure to lose; if you dosomething here(RMs gestures, sweeping out a large area), there is a substantialchance of losing, and if you really want to be safe, stay out of this area(he gesturesagain, sweeping out an even larger area). And, by the way, there is a substantialelement of chance in the outcome of any lawsuit
    Now that you have a predictable terrain for doing business(), what are you goingto do? Well, there are three approaches you might try, any of which is applicable insome cases. They are
    avoiding the patent
    2. licensing the patent, and
    3. overturning a patent in court
    Let me describe these three approaches and what makes them workable or unworkable
    Avoiding the patent
    Avoiding the patent''-that means dont use the idea that the patent covers. Thcan be easy or hard, depending on what that idea is
    In some cases, a feature is patented. Then you avoid the patent by not implementing that feature. Then it just matters how important that feature is
    In some cases, you can live without it. a while ago, the users of the word processor Xy Write got a downgrade in the mail. The downgrade removed a featurethat allowed you to predefine abbreviations. That is, when you typed an abbreviation followed by a punctuation character, it would immediately replace itself withsome expansion of the abbreviation. That way, you could define the abbreviationfor some long phrase, type the abbreviation, and then the phrase would be in yourdocument. They(the developers) wrote to me about this because they knew the
    Emacs editor has a similar feature. In fact. it had it since the 70s This was interesting as it showed me that I had at least one patentable idea in my life. I know itwas patentable because somebody else patented it afterward
    Actually they considered all three approaches. First they tried negotiating withthe patent holder, who turned out not to negotiate in good faith. Then they lookedat whether they could have a chance at overturning the patent. What they decidedto do was to take out the feature

==========第106页==========
    Chapter 16: The Danger of Software Patents
    01
    You can live without this feature. If the word processor lacks only this featuremaybe people will still use it. But as various features start getting hit, eventuallyyou end up with a program people think is not very good, and they are likely to
    relect it
    That is a rather narrow patent on a very specific feature. What do you do withthe british Telecom patent on traversing hyperlinks together with dial-up access?
    Traversing hyperlinks is absolutely essential to a major use of computers these days
    Dial-up access is also essential How do you do without this feature? Which, by theway, isnt even one feature--it is really a combination of two features arbitrarilyjuxtaposed. It is rather like having a patent on a sofa and television in the sameroom
    Sometimes the idea that's patented will be so broad and basic that it basicallyrules out an entire field. For instance, the idea of public key encryption, which waspatented in the u.s. The patent expired in 1997. Until then, it largely blocked theuse of public key encryption in the U.S. A number of programs that people startedto develop got crushed--they were never really available because the patent holdersthreatened them. Then, one program got away, the program PGP, which initiallywas released as free software. Apparently, the patent holders, by the time they gotaround to attacking, realized they might get too much bad publicity. So they im-posed restrictions, making it for non-commercial use only, which meant it couldntcatch on too much. So they greatly limited the use of Public Key Encryption for adecade or more. There was no way around that patent. There was nothing else youcould do like public key encryption
    e Sometimes a specific algorithm gets patented. For instance, there is a patent onoptimized version of the Fast Fourier Transform(FFT). It runs about twice asfast. You can avoid that by using an ordinary FFTin your program. That part of theprogram will take twice as long. Maybe that doesnt matter, maybe that is a smallpart of the programs running time. Maybe if it is twice as slow, you wont reallynotice. Or maybe your program wont run at all as it will take twice real time to doits job. The effects vary
    In some cases, you can find a better algorithm. This may or may not do you anygood. Because we couldnt use compress in the gNu Project, we started lookinfor an alternative algorithm for data compression. Somebody wrote to us sayinhe had one; he had written a program and decided to contribute it to us. We weregoing to release it. Just by chance, I happened to see a copy of the New York Timesit happened to have the weekly patent column in it. (I didn t see a copy of the Timesmore than once every few months. ) So I looked at it and it said someone had got apatent for"inventing a new method of compressing data. I figured I'd better take alook at this patent. I got a copy and it turned out to cover the program that we werejust a week away from releasing. That program died before it was born
    Later on we did find another algorithm which was unpatented. That became theprogram gzip, which is now effectively the de facto standard for data compression
    As an algorithm to use in a program for data compression, it was fine. Anyone whowanted to do data compression could use gzip instead of compress
    The same patented Lzw compression algorithm was also used in image formatssuch as the giF format. But there, because the job people wanted to do was not

==========第107页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    to simply compress data but to make an image that people could display with theirsoftware. it turned out extremely hard to switch over to a different algorithm. Wha
    able to do it in 10
    d the
    define another image format, once people started getting threatened with lawsuitsfor using GiF files. When we started saying to people stop using GiF files, switchover to this, people said"We cant switch. The browsers dont support the newformat yet. The browser developers said"We're not in a hurry about this. Afterall, nobody is using this new file format
    In effect, society had so much inertia in the use of the gif format, we have notbeen able to get people to switch. Essentially, the communitys use of the gifformat is still pushing sites into using GiF format, with the result that they arevulnerable to these threats
    In fact, the situation is even more bizarre. There are in fact two patents coveringthe lzw compression algorithm The patent office couldnt even tell they wereissuing two patents on the same thing; they couldnt keep track. There is a reasonfor this: it takes a while of studying these two patents to see that they really coverthe same thing
    If they were patents on some chemical process, it would be much easier. Youcould see what substances were being used, what the inputs were, what the outputswere, which physical actions were being taken. No matter how they were describedyou'd see what they were and then you would see they were similar. If somethinis purely mathematical, there are many ways of describing it, which are a lot moredifferent. They are not superficially similar. You have to really understand themto see that they are really talking about the same thing. The patent office doesnthave time. The U.S. patent office, as of a few years ago, was spending on average17 hours per patent. This is not long enough to think carefully about them, So ocourse they make mistakes like that. In fact, I told you about the program that diedbefore it was born. That algorithm also had two patents issued for it in the U.sapparently, it is not that unusual
    Avoiding the patents may be easy, or it may be impossible. It may be easy butmake your program useless--it varies depending on the situation
    Here is another point I should mention: Sometimes a company or consortiumcan make a format or protocol the de facto standard. Then if that format or protocolis patented. that is a real disaster for you. There are even official standards that arerestricted by patents. There was a big political uproar in September of 2001 whenthe World Wide Web Consortium was proposing to start adopting standards thatwere covered by patents. The community objected, so they reversed themselves
    They went back to insisting that any patents had to be freely implementable byanyone and that the standards had to be free for anyone to implement That is aninteresting victory. I think that was the first time any standards body has madethat decision. It is normal for standards bodies to be willing to put something ina standard that is restricted by patents and people are not allowed to go ahead andimplement freely. We need to go to other standards bodies and call on them tochange their rules

==========第108页==========
    Chapter 16: The Danger of Software Patents
    103
    Licensing the patent
    The second possibility instead of avoiding the patent is to get a license for thepatent. This is not necessarily an option. The patent holder does not have to offeryou a license; it is not required. Ten years ago, the League for Programming Freedom got a letter asking for help from somebody whose family business was makingambling machinery for casinos, and they already] used computers back then. Hereceived a threat from another company that said, " We have a patent. You are not
    Flowed to make these things shut down!
    I looked at that patent. It covered having a number of computers on a network forplaying games such that each computer supported more than one game and allowedyou to play more than one game at a time
    You will find that the patent office really thinks there is something brilliant aboutdoing more than one of anything. They dont realize that in compu
    thats the most obvious way to generalize anything. You did it once, so now youcan do it any number of times, you can make a subroutine. They think that if youdo anything more than once, that somehow means you are brilliant and that nobodycan possibly argue with you and that you have the right to boss them around
    Anyway, he was not offered a license. He had to shut down. He couldnt evenafford to go to court. I would say that particular patent was an obvious idea. It ispossible that a judge might have agreed, but we will never know because he couldnot afford to go to court
    However. a lot of patent holders do offer licenses They often charge a lot ofmoney for that, though. The company licensing the natural-order recalculationpatent was demanding 5%o of the gross sales of every spreadsheet in the U.s.I amtold that was the cheap pre-lawsuit price--if you actually made them sue you andthey won, they'd demand more
    You might be able to afford that 5% for licensing this one patent, but what if youneed to license 20 different patents to make the program? Then all the money youtake in goes on patents. What if you need to license 21 patents? People in businesstold me that practically speaking, two or three such patent licenses would make anybusiness unfeasible
    There is a situation where licensing patents is a very good solution. That is ifyou are a multinational mega-corporation. Because these companies own a lot ofpatents, and they cross-license with each other. That way, they escape most of theharm that the patent system does and they get only the good
    IBM published an article in Think magazine believe it was issue No. 5 of990--on IBMS patent portfolio, which said that IBM got two kinds of benefitfrom its 9000 U.S. patents. (I believe the number is larger today. These were, first,collecting royalties and second. getting "access to the patents of others They saidthat the latter benefit is an order of magnitude greater. So the benefit that IBM gotfrom being allowed to use the ideas that were patented by others was ten times thedirect benefit IBM could get from licensing patents
    What does this really mean? What is the benefit that IBM gets from this"accessto the patents of others"? It is basically the benefit of bein
    sed from th
    trouble that the patent system can cause you. The patent system is like a lottery

==========第109页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    what happens with any given patent could be nothing, could be a windfall for somepatent holder, or a disaster for everyone else. But IBM being so big, it averages outfor them. They get to measure the average harm and good of the patent system. Forthem, the trouble of the patent system would have been ten times the goodI say "would have been"because IBM through cross-licensing avoids experiencing that trouble. That trouble is only potential, it doesnt really happen to them
    But when they measure the benefits of avoiding that trouble, they estimate it as tentimes the value of the money they collect from their patents
    This phenomenon of cross-licensing refutes a common myth, the myth of thestarving genius, the myth that patents thesmall inventor. Thoseterms are propaganda terms. You shouldn t use them
    The scenario is like this: Suppose there is a"brilliant"designer of whatever
    Suppose he has spent"years starving in the attic"designing a new wonderful kindof whatever, and now wants to manufacture it Isn't it a shame the big companiesare golng to go into competition with him, take away all the business, and he'llstarve”?
    I have to point out that people in high-tech fields are not generally working ontheir own, that ideas dont come in a vacuum-they are based on ideas of othersand these people have pretty good chances of getting a job if they need to thesedays. So this scenario--the idea that a brilliant idea came from this brilliant person working alone-is unrealistic. and the idea that he is in danger of starving isunrealistic
    But it is conceivable that somebody could have an idea and this idea along with100 or 200 other ideas can be the basis of making some kind of product, and thatbig companies might want to compete with him. So let's see what happens if hetries to use a patent to stop them. He says" Oh no, IBM, You cannot compete withme.I've got this patent. IBM says, "Lets see Lets look at your product. Hmmmve got this patent, and this one, and this one and this one and this one and this one.which parts of your product infringe. If you think you can fight against all of themin court, I will just go back and find some more. So, why dont you cross-licensewith me? "And then the brilliant small inventor says"Well, OK, I'll cross-license
    So he can go back and make these wonderful whatever-it-is but so can IbM. IBMgets"access"to his patent, and gets the right to compete with him, which meansthis patent didnt"protect him at all. The patent system doesnt really do that
    The mega-corporations avoid, for the most part, the harm of the patent systemthey see mainly the good side. That is why they want to have software patentsthey are the ones who will benefit from it. But if you are a small inventor or workfor a small company, the small company will not be able to do this. They try
    The problem is that small companies cannot get enough patents to do this (makeeveryone cross-license with them)
    patents pointing there, there, and there, and somebody over there(Stallman indAny given patent is pointing in a certain direction. So if a small company ha
    cates to a different place) points a patent at them and says give me your money,the small company is helpless. IBM can do it, because with 9000 patents, they arepointing everywhere; no matter where you are, there is probably an IBM patentpointing at you. So IBM can almost always make you cross-license. Small compa-

==========第110页==========
    Chapter 16: The Danger of Software Patents
    105
    nies can only occasionally make someone cross-license. They will say they wantpatents for defensive purposes, but they wont get enough to be able to defendthe
    There are cases where even ibm cannot make someone cross-license. That iswhen there is a company whose sole business is taking a patent and squeezingmoney out of people. The company that had the natural-order recalculation patentwas exactly such a company. Their sole business was to threaten to sue people andcollect money from people who were really developing something
    There are no patents on legal procedures. I guess the lawyers understand whata pain it would be to have to deal with the patent system themselves. The result isthat there is no way to get a patent to make that company cross-license with you
    So they go around squeezing everyone. But I guess companies like IBM figure thatis part of the price of doing business so they can live with it
    So that is the possibility of licensing a patent, which may or may not be possibleand you may or may not be able to afford it-which leads us to our third possibility
    Overturning a patent in Court
    Supposedly, in order to be patented, something has to be new, useful, and un-obvious. (That is the language used in the u.s.; I think other countries have otherlanguage which is pretty much equivalent to it. )Of course, when the patent officgets into the game, they start interpreting"new"and"unobvious. New'turns outto mean“ we don' t have it in our files.and“ unobvious” tends to mean“ unobviousto someone with an I Q of 50.
    Somebody who studies most of the software patents issued in the U.S.--or atleast he used to. i dont know if he can still keep up with them--said 90%o of themwouldn t have passed the Crystal City test, which meant if the people in the patentoffice went outside to the newsstand and got some computer magazines, they wouldsee that these ideas are already known
    The patent office does things that are so obviously foolish, you wouldnt evenhave to know the state of the art to see they are foolish. This is not limited tosoftware. I once saw the famous Harvard mouse patent, that was obtained after
    Harvard genetically engineered a mouse with a cancer-causing gene. The cancercausing gene was already known, and was inserted using known techniques into analready existing strain of mouse. The patent they got covered inserting any cancercausing gene into any kind of mammal using any method whatsoever. You donthave to know anything about genetic engineering to realize that is ridiculous. Iam told that this overclaiming is normal practice, and that the u.s. patent officesometimes invites patent applicants to make their claims broader. Basically, youmake the claims broader until you think they are running into something else thatsunambiguous prior art. See how much land grab in mental space you can get awayith
    When programmers look at a lot of software patents, they say " this is ridicu-lously obvious! Patent bureaucrats have all sorts of excuses to justify ignoringwhat programmers think. They say"Oh! but you have to consider it in terms of theway things were ten or twenty years ago. Then they discovered that if they tall

==========第111页==========
    106
    Free Software, Free Society: Selected essays of richard m. stallman
    something to death then you can eventually lose your bearings. anything can lookunobvious if you tear it apart enough, analyze it enough. You simply lose all standard of obviousness, or at least lose the ability to justify any standard of obvious orunobvious. Then, of course, they describe the patent holders as brilliant inventorsll of them; therefore we can t question their entitlement to power over what we do
    If you go to court, the judges are likely to be a little more stringent about what isobvious or not. But the problem is that it costs millions of dollars to do that
    I heard of one patent case, the defendant i remember was Qualcomm and Ibelieve the ruling was ultimately $13 million (USD) of which most went to pay thelawyers on both sides. There were a few million dollars left over for the plaintiff
    Qualcomm lost)
    To a large extent, the question of the validity of a patent will depend on historicalaccidents. Lots of historical accidents, such as precisely what was published whenand which of those things somebody manages to find, which of them didnt get lost,precise dates, and so on. Many historical accidents determine whether a patent isvalid
    In fact, it is a weird thing that the British Telecom "following hyperlinks togetherwith telephone access"patent was applied for in 1975. I think it was in 1974 thatI developed the Info package for the first time. The Info package allows you totraverse hyperlinks, and people did use telephones to dial up and access the system
    So in fact, I did produce a piece of prior art for this patent. This is the secondpatentable idea I know I have produced in my life
    But I dont think I have any proof of that. I didnt think this was interestingenough to publish it. After all, the idea of following hyperlinks I got from thedemo of englebart's editor. he is the one who had an idea that was interesting topublish. What I had done I calledpoor mans hypertext, as I had to implement itin the context of TECO. It was not as powerful as his hypertext, but it was at leastuseful for browsing documentation which is all it was meant for And as for therebeing dial-up access to the system, well, there was, but it didnt occur to me that theone had anything particular to do with the other. I wasnt going to publish a papersaying, Oh! I implemented this poor mans hypertext, and guess what! There aredial-up lines on the computer too!
    i suspect there is no way to tell precisely on what date i implemented this Was itpublished in any sense? Well, we invited guests to come in across the ArPaNEt,and log in on our machineso they could have browsed documentation using Infoand seen the thing. If they had asked us, they would have found we had dial-upaccess. As you can see, historical accident determines whether you have prior art
    Now of course, there is a publication made by englebart about hypertext, whichthey, the defendants, are going to show. I dont think it says anything about havindial-ups on the computer, however, so whether it will suffice is not clear
    The possibility of going to court to overturn the patent is an option. Because ofthe expense, it is often out of the question even if you can find solid prior art whichought to be sufficient to overturn the patent. As a result, an invalid patent, a patentthat nominally shouldnt have existed(but in fact lots and lots of them do), isdangerous weapon. If someone attacks you with an invalid patent, that can reallycause a lot of trouble for you. You might be able to bluff them away by showing

==========第112页==========
    Chapter 16: The Danger of Software Patents
    them the prior art. It depends on whether they can get scared off that way. Theymight think, ""Well, you are just bluffing, we figure you cant really go to court; youcant afford it, so we'll sue you anyway.
    All of these three options are things that sometimes you can manage to use, butoften you cant. So you have to face patent after patent after patent each time youmay be able to find one of these three possibilities you can use, then there is anotherpatent, then another and another. It gets like crossing a minefield. Each step youtake, each design decision, probably won't step on a patent, so you can take a fewsteps and probably there wont be an explosion. But the chance you can get all theway through the minefield and develop the program you want to develop withoutever stepping on a patent gets less and less as the program gets bigger
    Now, people used to say to me, Well, there are patents in other fields, whyshould software be exempt? Note the bizarre assumption in there that somehowwe are all supposed to suffer through the patent system. It is like saying"Somepeople get cancer. Why should you be exempt? As I see it, each person whodoesnt get cancer is a good thing
    But there is, behind that, a less biased question, a good question, which is: Issoftware different from other fields? Should patent policy be different in differentfields? If so. why?
    Let me address that question: patents relate to different fields differently becausein different fields, patents relate to products differently
    On one extreme we have pharmaceuticals, where a given chemical formulawould be patented, so that patent covers one and only one product. A new drugwouldnt be covered by the existing patent. If there is to be a patent for this newproduct, the patent holder would be whoever developed the new product
    That fits in with the naive idea of the patent system that we have, that if you aredesigning a new product, you are going to get the patent. The idea is that there isone patent per product and that it covers the idea of the product. In some fields it iscloser to being true: in other fields it is further from being true
    The software field is at the latter extreme: one program intersects many patents
    This is because software packages are usually very big. They use many differentdeas in combination. If the program is new and not just copied then it is proba-bly using a different combination of ideas-embodied, of course, in newly writtencode, because you cant just magically say the names of these ideas and have themwork. You have to implement them all. You have to implement them all in thatcombination
    The result is that even when you write a program, you are using lots of differentideas, any one of which might be patented by somebody. a pair of them may bepatented as a combination by somebody. There might be several different waysof describing one idea, which might be patented by various different people. Sothere are possibly thousands of things, thousands of points of vulnerability in yourprogram, that might be patented by somebody else already
    This is why software patents tend to obstruct the progress of software-the workof software development. If it were" one patent, one product, then these patentswouldnt obstruct the development of products because if you develop a new prod

==========第113页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    uct, it wouldnt be patented by somebody else already but when one productcorresponds to many different ideas combined, it gets very likely your new product(either part or all of your product) is going to be patented by somebody else alread
    In fact, there is economic research now showing just how imposing a patentsystem on a field where there is incremental innovation can retard progress. Yousee, the advocates of software patents say Well, yes, there may be problems, butmore important than any problems, the patents must promote innovation, and thatis so important it doesnt matter what problems they cause. Of course, they dontsay that out loud because it is ridiculous but implicitly they want you to believethat as long as the patent system promotes progress, that outweighs any possiblecost. But actually, there is no reason to believe it does promote progress. We nowhave a model showing precisely how patents can retard progress. The case wherethat model applies describes the software field pretty well; incremental innovation
    Why is software on that extreme of the spectrum? The reason is that in softwarewe are developing idealized mathematical objects. You can build a complicatedcastle and have it rest on a thin line and it will stay up because it doesn't weighanything. In other fields, people have to cope with the perversity of matter-ofphysical objects. Matter does what it is going to do. You can try to model it, but ifthe actual behaviour doesn't fit the model then tough on you, because the challengeis to make physical objects that really work
    If I want to put an if-statement in a while-statement, I dont have to worry about
    Thether the if-statement will oscillate at a certain frequency and rub against thwhile-Statement and eventually they will fracture. I dont have to worry whether itwill oscillate at a certain high frequency and induce a signal in the value of someother variable. I don t have to worry about how much current that if-statementwill draw, and whether it can dissipate the heat there inside that while-statementor whether there will be a voltage drop across the while-statement that will makethe if-statement not function. I dont have to worry that if i run this program in asalt water environment, the salt water may get in between the if-statement and thewhile-statement and cause corrosion. [The audience laughs all through this. II dont have to worry when I refer to the value of a variable, whether I amexceeding the fan-out limit by referring to it 20 times. I dont have to worry howmuch capacitance it has, and whether there has been sufficient time to charge upthe value
    I dont have to worry, when I write the program, about how I am going to physically assemble each copy and whether I can manage to get access to put that if-statement inside the while-Statement. I don t have to worry about how i am going togain access in case that if-Statement breaks, to remove it and replace it with a newone. There are so many problems that we dont have to worry about in softwarethat makes it fundamentally easier to write a program than to design a physicalobject thats going to work
    This may seem strange, because you have probably heard people talking abouthow hard software is to design and how this is a big problem and considering howwe are going to solve it. They are not really talking about the same question as Iam. I am comparing physical and software systems of the same complexity, thesame number of parts. I am saying the software system is much easier to design

==========第114页==========
    Chapter 16: The Danger of Software Patents
    than the physical system. But the intelligence of people in these various fields isthe same, so what do we do when we are confronted with an easy field? We pushit further! We push our abilities to the limit. If systems of the same size are easy,lets make systems that are ten times as big-then it will be hard! Thats what wedo: we make software systems that are far bigger in terms of number of parts thanphysical systems
    a physical system whose design has a million different pieces in it is a megapro-ect.A computer program whose design has a million pieces in it is maybe 300,000lines; a few people will write that in a couple of years. That is not a particularlygiant program. GNU Emacs now has several million pieces in its design, I think.
    It has a million lines of code. This is a project done with essentially no fundingwhatsoever, mostly done by people in their spare time
    There is another big saving. If you have designed a physical product, the nextthing you have to do is design the factory to make it. To build this factory maycost millions or tens of millions, whereas to make copies of the program you justhave to type"copy. The same copy command will copy any program. You wantcopies on CD, then fine, you burn a master CD and send it off to a Cd plant. Theywill use the same equipment that will copy any contents on a CD. You dont haveto build a specialized factory to make each particular product. This is tremendoussimplification and tremendous reduction in costs of designing things
    An automobile company, which will spend $50 million to build a factory to builda new model of auto, can hire some lawyers to cope with patent license negotiation
    They can even cope with a lawsuit if they wanted to. To design a program ofthe same complexity may cost $50,000 or $100,000. By comparison, the cost ofdealing with the patent system is crushing-actually designing a program with thesame complexity as the mechanical design of an auto is probably a months work
    How many parts does an auto have... that is, if it is an auto which doesnt havecomputers in it. That is not to say designing a good one is easy but just that thereare not that many different parts in it
    The result is that software really is different from other fields because when weare working with mathematical stuff, designing something is far, far easier. Theresult is that we regularly make systems which are much, much larger and do sowith just a few people. The result is that instead of being close to one product, onepatent, we are in a system where one product involves many, many ideas that couldbe patented already
    The best way to explain this by analogy is with symphonies. A symphony is alsolong and has many notes in it, and probably uses many musical ideas. Imagine ifthe governments of Europe in the 1700s had decided they wanted to promote theprogress of symphonic music by establishing a European Musical Patent Office thatwould give patents for any kind of musical ideas that you could state in words
    There are approximatly 300-400 unique parts in an automatic transmission, and a transmissionis generally the most complicated component of an auto. To design a transmission may take sixmonths to a year, and even then it may take longer to actually get it built and functioning. However,a program with 500 to 800 functional parts would have 200 to 300 lines of actual code, and wouldprobably take a good programmer a day to a week to write, test and debug

==========第115页==========
    110
    Free Software, Free Society: Selected essays of richard m. stallman
    Then imagine it is around 1800. and you are beethoven and you want to write asymphony. You will find that getting your symphony so that it doesnt infringe anypatents is going to be harder than writing a good symphony
    When you complain about this, the patent holders would say Aw Beethoven, youare just bitching because you have no ideas of your own. All you want to do is ripoff our inventions Beethoven as it happens had a lot of new musical ideas-buthe had to use a lot of existing musical ideas in order to make recognizable music. inorder to make music that listeners could possibly like that they could recognize asmusic. Nobody is so brilliant that he can re-invent music completely different andmake something that people would want to listen to. Pierre Boulez said he wouldtry to do that, but who listens to Pierre Boulez?
    Nobody is so brilliant he can re-invent all of computer science, completely new
    If he did, he would make something that the users would find so strange that theywouldnt want to use it. If you look at a word processor todayly, you would find. Ithink, hundreds of different features. If you develop a nice new innovative wordprocessor, that means there are some new ideas in it, but there must be hundreds ofold ideas in it. If you are not allowed to use them, you cannot make an innovativeword processor. Because the work of software development is so big, the result isthat we dont need any artificial scheme to incentivize new ideas. You just havepeople writing software and they will have some new ideas. If you want to write aprogram and you want to make it good, some ideas will come to you and you willsee a way to use some of them
    What used to happen -because i was in the software field before there weresoftware patents-was most of the developers would publish any new ideas thatthey thought were noteworthy, that they thought that they might get any credit orrespect for. The ideas that were too small or not impressive enough they wouldnot publish because that would be silly. Now, the patent system is supposed toencourage disclosure of ideas. In fact, in the old days, nobody kept the ideas secret.
    They kept the code secret, it's true. The code, after all, represented the bulk ofthe work. They would keep the code secret and publish the ideas so that way theemployees would get some credit and feel good
    After software patents, they still kept the code secret and they patented the ideasso in fact, disclosure has not been encouraged in any meaningful sense. The samethings are kept secret now as were kept secret before but the ideas that used to bepublished so that we could use them are now likely to be patented and off limits for20 years
    What can a country do to change this? How should we change the policy to solvethis problem?
    There are two places you can attack it. One is the place where patents are beinissued, in the patent office. The other is where patents are being applied. That is aquestion of what does a patent cover
    One way is to keep a good criterion for issuing patents. This can work in a country that has not authorized software patents before, for instance, for the most part,in Europe. Simply to clearly reinforce the European Patent Office's rules which saythat software is not patentable is a good solution for Europe. Europe is now con-sidering a directive on software patents. The directive I suppose may be broader

==========第116页==========
    Chapter 16: The Danger of Software Patents
    than that, but one of its important implications is for software patents. Simplymodifying this to say software ideas cannot be patented will keep the problem outof Europe for the most part, except for some countries that may have admitted theproblem on their own, unfortunately one of them being the U. K(unfortunately foryou.)
    That approach wont work in the U.s. The reason is that the U.s. already haslarge numbers of software patents, and any change in the criteria for issuing patentswont get rid of the existing ones. So, in the u.s., the solution would have to bedone through changing the applicability, the scope, of patents: saying that a puresoftware implementation, running on general-purpose computer hardware that doesnot in itself infringe the patent, is not covered by any patent, and you cannot getsued for it. That is the other kind of solution
    The first kind of solution, the solution that operates on what types of patents canbe valid is a good solution for europe to use
    When the U.s. started having software patents, there was no political debate
    In fact, nobody noticed. The software field, for the most part, didnt even notice
    There was a Supreme court decision in 1981 that considered a patent on a process for curing rubber. The ruling was that the fact that the apparatus included acomputer and a program as part of the process to cure the rubber didnt make itunpatentable. The next year, the appeals court that considers all patent cases reversed the quantifiers: they said the fact that there is a computer and a programin this makes it patentable The fact that there is a computer and program in anything makes it patentable. This is why the U.S. started having business procedurepatents: because the business procedures were carried out on a computer and thatmade them patentable
    So this ruling was made, and I think the natural-order recalculating patent wasone of the first or might have even been the first
    Throughout the 80s, we didnt know about this. It was around 1990 that programmers in the U. s started to become aware that they were faced with a dangerfrom software patents. I saw how the field worked before and how the field workedafter. I saw no particular speed-up in progress after 1990
    There was no political debate in the U.s., but in Europe there has been a bigpolitical debate. Several years ago there was a push to amend the munich treatythat established the European Patent Office. It has a clause saying that software isnot patentable. The push was to amend that to start allowing software patents. Butthe community took notice of this. It was actually free software developers andfree software users who took the lead. but we are not the only ones threatened bsoftware patents. All software developers are threatened by software patents, andeven software users are threatened by software patents
    For instance, Paul Heckel--when App Apple found that very scary. Theyle wasn't very scared of his threats
    threatened to start suing Apples customers
    say"software patents"but what do i really mean? The U.S. patent office doesn't officially dividepatents into software patents and other patents. So, in fact, any patent might conceivably getyou sued for writing software if it could apply to some software Software patents are patentsthat might potentially apply to software, patents that might potentially get you sued for writinsoftware

==========第117页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    figured they couldnt afford to have their customers being sued like that, even ifthey would ultimately win. So the users can get sued too either as a way of attackng a developer or just as a way to squeeze money out of them on their own or tocause mayhem. All software developers and users are vulnerable
    But it was the free software community in Europe that took the lead in organizinopposition. In fact, twice now the countries that govern the european Patent Officevoted not to amend that treaty. Then the e.u. took a hand and the directorates ofthe e u were divided on the issue. The one whose job is to promote software isagainst software patents, it seems, but they were not in charge of this issue. It isthe Open market Directorate that is in charge, and it is run by somebody who is infavor of software patents. They basically disregarded public opinion that has beenexpressed to them. They have proposed a directive to allow software patents
    The French government has already said they are against it. People are workingon various other governments in europe to oppose software patents and it is vitalto start doing so here. in britain According to hartmut pilch who is one of theleaders in the European struggle against software patents, the main impetus forthem comes from the u. K. patent office. The u.K. patent office is simply biased infavor of software patents. It had a public consultation, and most of the responseswere opposed to software patents. They then wrote a report saying peopIe seemto be content with them completely disregarding the answers. You see, the freesoftware community said, Please send the answers to them and to us too. So theypublished these answers, which were generally opposed. Youd have never guessedthat from the report that the U. K. patent office published
    They use a term that they call" technical effect. This is a term that can stretchtremendously. You are supposed to think it means a program idea would bepatentable only if it relates only to specific physical acts. If that is the interpretation, it would mostly solve the problem. If the only software ideas that can bepatented were those that really did relate to a particular technical, physical resultthat you might have patented if you didnt use a program, that would be oK. Theproblem is that you can stretch that term. You can describe the result you get byrunning any program as a physical result. How does this physical result differentfrom any other? Well it is as a result of this computation. The result is that the U. K.patent office is proposing something that looks as if it leads to mostly solving theproblem but really gives carte blanche for patenting almost anything
    The people in the same ministry are also involved in the copyright issue, whichreally has nothing to do with software patents except that it is being handled by thesame people.(Perhaps they have been led by the term "intellectual property tolump the issues together. It is a question of interpreting the recent E U. copyrightdirective, a horrible law like the Digital Millennium Copyright Act ( DMCA)in the
    U.S. but there is some latitude for countries to decide how to implement it The
    U. K. is proposing the most draconian possible way of implementing this directiv
    You could greatly reduce the harm it does by implementing it properly. The U. Kwants to maximize the tyrannical effect of this directive. It seems there is a certaingroup-the Department of Trade and Industry?who need to be reined in. It isnecessary to put a check on their activities, stop their creating new forms of power

==========第118页==========
    Chapter 16: The Danger of Software Patents
    113
    Software patents tie up every software developer and every computer user in anew form of bureaucracy. If the businesses that use computers realized how muchtrouble this can cause for them, they would be up in arms, and I am sure they couldstop it. Business doesnt like being tied up in bureaucracy. Sometimes, of courseit serves an important purpose. There are some areas where we wish the U. Kgovernment did a more careful job in tying certain businesses up in bureaucracylike when it involves moving animals around. But in cases when it doesnt serveany purpose except to create artificial monopolies so that somebody can interferewith software development--squeeze money out of developers and users- -then weshould reject it. We need to make management aware of what software patents willdo to them, and get their support in fighting against software patents in Europe
    The battle is not over. It still can be won
    3 To make it harder for foot-and-mouth disease to spread

==========第119页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第120页==========
    Section Three
    Section three
    Freedom, Society, and software
    人3
    TELAL
    绕
    Ie

==========第121页==========
    116
    Free Software. Free Society Selected essays of richard M. stallman

==========第122页==========
    Chapter 17: Can You Trust Your Computer?
    17 Can You Trust Your Computer?
    Who should your computer take its orders from? Most people think their com-puters should obey them, not obey someone else. With a plan they call"trustedcomputing, " large media corporations (including the movie companies and recordcompanies), together with computer companies such as Microsoft and Intel,areplanning to make your computer obey them instead of you. Proprietary programshave included malicious features before, but this plan would make it universal
    Proprietary software means, fundamentally, that you dont control what it doesyou cant study the source code, or change it. It's not surprising that clever businessmen find ways to use their control to put you at a disadvantage. Microsoft hasdone this several times: one version of Windows was designed to report to Mi-crosoft all the software on your hard disk: a recent "security upgrade in windows
    Media player required users to agree to new restrictions. But microsoft is not alonethe Kazaa music-Sharing software is designed so that KaZaa's business partner canrent out the use of your computer to their clients These malicious features are of-ten secret, but even once you know about them it is hard to remove them, since youdon't have the source code
    In the past, these were isolated incidents. "Trusted computing,would make itpervasive. " Treacherous computing"is a more appropriate name, because the plans designed to make sure your computer will systematically disobey you. In fact, itis designed to stop your computer from functioning as a general-purpose computer
    Every operation may require explicit permission
    The technical idea underlying treacherous computing is that the computer in-cludes a digital encryption and signature device, and the keys are kept secret fromyou.(Microsott's version of this is called"palladium )Proprietary programs willuse this device to control which other programs you can run, which documentsor data you can access, and what programs you can pass them to. These programswill continually download new authorization rules through the Internet and imposethose rules automatically on your work. If you dont allow your computer to obtainthe new rules periodically from the Internet, some capabilities will automatically
    Of course, Hollywood and the record companies plan to use treacherous computing for" DRM(Digital Restrictions Management), so that downloaded videosand music can be played only on one specified computer. Sharing will be entirelyimpossible, at least using the authorized files that you would get from those companies. You, the public, ought to have both the freedom and the ability to share thesethings. (I expect that someone will find a way to produce unencrypted versions, and
    Originally written in 2002, this essay is from Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsBn1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第123页==========
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    to upload and share them so drm will not entirely succeed but that is no excusefor the system.)
    Making sharing impossible is bad enough, but it gets worse. There are plans touse the same facility for email and documents--resulting in email that disappearsin two weeks, or documents that can only be read on the computers in one company
    Imagine if you get an email from your boss telling you to do something that youthink is risky; a month later, when it backfires, you cant use the email to show thatthe decision was not yours."Getting it in writing"doesnt protect you when theorder is written in disappearing ink
    Imagine if you get an email from your boss stating a policy that is illegalmorally outrageous, such as to shred your company's audit documents or to allowa dangerous threat to your country to move forward unchecked. Today you cansend this to a reporter and expose the activity. With treacherous computing, thereporter wont be able to read the document her computer will refuse to obey her
    Treacherous computing becomes a paradise for corruption
    Word processors such as microsoft Word could use treacherous computing whenthey save your documents, to make sure no competing word processors can readthem. Today we must figure out the secrets of Word format by laborious experiments in order to make free word processors read Word documents. If word en-crypts documents using treacherous computing when saving them, the free softwarecommunity wont have a chance of developing software to read them-and if wecould, such programs might even be forbidden by the Digital Millennium Copyright
    Act
    Programs that use treacherous computing will continually download new autho-rization rules through the Internet, and impose those rules automatically on yourwork. If Microsoft, or the U.s. government, does not like what you said in a document you wrote, they could post new instructions telling all computers to refuse tot anyone read that document. Each computer would obey when it downloads thenew instructions. Your writing would be subject to 1984-style retroactive erasure
    You might be unable to read it yourself
    You might think you can find out what nasty things a treacherous computingapplication does, study how painful they are, and decide whether to accept them. Itould be short-sighted and foolish to accept but the point is that the deal you thinkyou are making wont stand still. Once you come depend on using the programyou are hooked and they know it; then they can change the deal. Some applicationswill automatically download upgrades that will do something different-and theywon't give you a choice about whether to upgrade
    Today you can avoid being restricted by proprietary software by not using it. Ifyou run GNU/Linux or another free operating system, and if you avoid installinproprietary applications on it, then you are in charge of what your computer does
    If a free program has a malicious feature, other developers in the community willtake it out, and you can use the corrected version. You can also run free applicationprograms and tools on non-free operating systems; this falls short of fully givingyou freedom but many users do it
    Treacherous computing puts the existence of free operating systems and free applications at risk, because you may not be able to run them at all. Some versions of

==========第124页==========
    Chapter 17: Can You Trust Your Computer?
    119
    treacherous computing would require the operating system to be specifically authorized by a particular company. Free operating systems could not be installed. Someversions of treacherous computing would require every program to be specificallauthorized by the operating system developer. You could not run free applicationson such a system. If you did figure out how, and told someone that could be acrime
    There are proposals already for U.s. laws that would require all computers toupport treacherous computing, and to prohibit connecting old computers to the
    Internet. The CBDTPA (we call it the Consume But Dont Try Programming Act)is one of them but even if they don 't legally force you to switch to treacherouscomputing, the pressure to accept it may be enormous. Today people often use
    Word format for communication, although this causes several sorts of problems(seehttp://www.gnu.org/no-word-attachments.html).Ifonlyatreacherouscomputingmachine can read the latest Word documents, many people will switch to it, ifthey view the situation only in terms of individual action (take it or leave it). Tooppose treacherous computing, we must join together and confront the situation asa collective choice
    information about treacherous computing
    www.cl.camac.uk/users/ria14/tcpa-fag.html
    To block treacherous computing will require large numbers of citizens to orga-nize.Weneedyourhelp!TheElectronicFrontierFoundation(www.eff.org)and
    PublicKnowledge(www.publicknowledge.org)arecampaigningagainsttreacherous computing, and so is the Digital Speech Project sponsored by the Free Software
    Foundation(www.digitalspeech.org).PleasevisittheseWebsitessoyoucansignup to support their work. You can also help by writing to the public affairs officesof Intel, IBM, HP/Compaq, or anyone you have bought a computer from, explaining that you don t want to be pressured to buy trusted" computing systems so youdont want them to produce any. This can bring consumer power to bear. If you dothis on your own, please send copies of your letters to the organizations above
    Postscript:
    The gnu Project distributes the gnu Privacy Guard, a program that implementspublic-key encryption and digital signatures, which you can use to send secure andprivate email. It is useful to explore how GPg differs from trusted computing, andsee what makes one helpful and the other so dangerous
    When someone uses GPG to send you an encrypted document, and you use GPGto decode it, the result is an unencrypted document that you can read, forwardcopy, and even re-encrypt to send it securely to someone else. A treacherous computing application would let you read the words on the screen, but would not letyou produce an unencrypted document that you could use in other ways. GPG,aree software package, makes security features available to the users; they use
    Treacherous computing is designed to impose restrictions on the users; it uses them

==========第125页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第126页==========
    Chapter 18: Why Software Should Be Free
    121
    18 Why Software Should Be free
    The existence of software inevitably raises the question of how decisions aboutits use should be made. For example, suppose one individual who has a copy ofprogram meets another who would like a copy. It is possible for them to copy theprogram; who should decide whether this is done? The individuals involved? Oranother party, called the"owner"?
    Software developers typically consider these questions on the assumption thathe criterion for the answer is to maximize developers profits. The political powerof business has led to the government adoption of both this criterion and the answerproposed by the developers: that the program has an owner, typically a corporationassociated with its development
    I would like to consider the same question using a different criterion the prosperity and freedom of the public in general
    This answer cannot be decided by current law-the law should conform to ethicnot the other way around. Nor does current practice decide this question, althoughit may suggest possible answers. The only way to judge is to see who is helpedand who is hurt by recognizing owners of software why and how much. In otherwords, we should perform a cost-benefit analysis on behalf of society as a wholetaking account individual freedom as well as production of material goods
    In this essay, I will describe the effects of having owners, and show that theresults are detrimental. My conclusion is that programmers have the duty to encourage others to share, redistribute study and improve the software we write: inother words to write free software
    How Owners Justify Their Power
    Those who benefit from the current system where programs are property offertwo arguments in support of their claims to own programs: the emotional argumentand the economic argument
    The emotional argument goes like this: I put my sweat, my heart, my soul intothis program. It comes from me, it's mine
    This argument does not require serious refutation. The feeling of attachment isone that programmers can cultivate when it suits them; it is not inevitable. Consider,for example, how willingly the same programmers usually sign over all rights to alarge corporation for a salary; the emotional attachment mysteriously vanishes. By1 The word"free"in"free software"refers to freedom, not to price; the price paid for a copy of afree program may be zero, or small, or (rarely) quite large
    Originally written in 1992, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第127页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    contrast, consider the great artists and artisans of medieval times, who didnt evenign their names to their work To them the name of the artist was not important
    What mattered was that the work was done-and the purpose it would serve. Thisview prevailed for hundreds of vears
    The economic argument goes like this: " I want to get rich(usually describedinaccurately as 'making a living), and if you dont allow me to get rich by pro-gramming, then I wont program. Everyone else is like me, so nobody will everprogram. And then you' ll be stuck with no programs at all! This threat is usuallyveiled as friendly advice from the wise
    I'lI explain later why this threat is a bluff. First I want to address an implassumption that is more visible in another formulation of the argument
    This formulation starts by comparing the social utility of a proprietary progranwith that of no program, and then concludes that proprietary software developmentis. on the whole, beneficial. and should be encouraged. The fallacy here is in com-paring only two outcomes-proprietary software vs no software-and assumingthere are no other possibilitie
    4 Given a system of software copyright, software development is usually linkedwith the existence of an owner who controls the software's use. as long as thislinkage exists, we are often faced with the choice of proprietary software or none
    However, this linkage is not inherent or inevitable; it is a consequence of the specific social/legal policy decision that we are questioning: the decision to have own
    To formulate the choice as between proprietary software vs. no software isbegging the question
    The argument Against Having Owners
    The question at hand is, Should development of software be linked with havingowners to restrict the use of it?
    In order to decide this, we have to judge the effect on society of each of thosetwo activities independently: the effect of developing the software(regardless of itsterms of distribution), and the effect of restricting its use(assuming the softwareas been developed). If one of these activities is helpful and the other is harmfulwe would be better off dropping the linkage and doing only the helpful one
    To put it another way, if restricting the distribution of a program already developed is harmful to society overall, then an ethical software developer will reject theoption of doing So
    To determine the effect of restricting sharing, we need to compare the value tosociety of a restricted (i.e, proprietary) program with that of the same program,available to everyone. This means comparing two possible worlds
    This analysis also addresses the simple counterargument sometimes made thatthe benefit to the neighbor of giving him or her a copy of a program is canceled bythe harm done to the owner. This counterargument assumes that the harm and thebenefit are equal in magnitude. The analysis involves comparing these magnitudesand shows that the benefit is much greater
    To elucidate this argument let's apply it in another area: road construction

==========第128页==========
    Chapter 18: Why Software Should Be Free
    123
    It would be possible to fund the construction of all roads with tolls. This wouldentail having toll booths at all street corners. Such a system would provide a greatentive to improve roads. It would also have the virtue of causing the users ofany given road to pay for that road. However a toll booth is an artificial obstructionto smooth driving-artificial. because it is not a consequence of how roads or cars
    Comparing free roads and toll roads by their usefulness, we find that(all elsebeing equal) roads without toll booths are cheaper to construct, cheaper to runsafer, and more efficient to use. In a poor country, tolls may make the roadsunavailable to many citizens The roads without toll booths thus offer more benefitto society at less cost; they are preferable for society. Therefore, society shouldchoose to fund roads in another way, not by means of toll booths. Use of roadsonce built. should be free
    When the advocates of toll booths propose them as merely a way of raising funthey distort the choice that is available. Toll booths do raise funds, but they dosomething else as well: in effect, they degrade the road. The toll road is not asgood as the free road; giving us more or technically superior roads may not be animprovement if this means substituting toll roads for free roads
    Of course, the construction of a free road does cost money, which the publicmust somehow pay. However, this does not imply the inevitability of toll booths
    We who must in either case pay will get more value for our money by buying a freeroa
    i am not saying that a toll road is worse than no road at all. That would be trueif the toll were so great that hardly anyone used the road--but this is an unlikelypolicy for a toll collector. However, as long as the toll booths cause significantwaste and inconvenience. it is better to raise the funds in a less obstructive fashion
    To apply the same argument to software development, I will now show that having " toll booths for useful software programs costs society dearly: it makes theprograms more expensive to construct, more expensive to distribute, and less sat-isfying and efficient to use. It will follow that program construction should beencouraged in some other way. Then I will go on to explain other methods ofencouraging and (to the extent actually necessary) funding software development
    The Harm Done by Obstructing Software
    Consider for a moment that a program has been developed, and any necessarypayments for its development have been made; now society must choose either to
    The
    d traffic
    alter this conclu
    If we wish to make
    driving more expensive to discourage driving in general, it is disadvantageous to do this usingtoll booths, which contribute to both pollution and congestion. A tax on gasoline is much better.
    Likewise, a desire to enhance safety by limiting maximum driving speed is not relevant; a freeaccess road enhances the average driving speed by avoiding stops and delays, for any given speedlimit

==========第129页==========
    124
    Free Software, Free Society: Selected essays of richard m. stallman
    make it proprietary or allow free sharing and use. assume that the existence of theprogram and its availability is a desirable thing
    Restrictions on the distribution and modification of the program cannot facilitateits use. They can only interfere. So the effect can only be negative. But how much?
    And what kind?
    Three different levels of material harm come from such obstructi
    1. Fewer people use the program
    2. None of the users can adapt or fix the program
    3. Other developers cannot learn from the program, or base new work on it
    Each level of material harm has a concomitant form of psychosocial harm. Thisrefers to the effect that peoples decisions have on their subsequent feelings, attitudes, and predispositions. These changes in people's ways of thinking will thenhave a further effect on their relationships with their fellow citizens, and can havematerial consequences
    The three levels of material harm waste part of the value that the program couldcontribute, but they cannot reduce it to zero. If they waste nearly all the value ofthe program, then writing the program harms society by at most the effort that wentinto writing the program. Arguably a program that is profitable to sell must providesome net direct material benefit
    However, taking account of the concomitant psychosocial harm, there is no limitto the harm that proprietary software development can do
    Obstructing Use of Programs
    The first level of harm impedes the simple use of a program. a copy of a pro-gram has nearly zero marginal cost(and you can pay this cost by doing the workyourself), so in a free market, it would have nearly zero price. a license fee is a sig-nificant disincentive to use the program. If a widely useful program is proprietaryfar fewer people will use it
    It is easy to show that the total contribution of a program to society is reduced byassigning an owner to it. Each potential user of the program, faced with the needto pay to use it, may choose to pay, or may forgo use of the program. When a userchooses to pay, this is a zero-sum transfer of wealth between two parties. But eachtime someone chooses to forgo use of the program, this harms that person withoutbenefitting anyone. The sum of negative numbers and zeros must be negative
    But this does not reduce the amount of work it takes to develop the program asa result. the efficiency of the whole process in delivered user satisfaction per hourof work is reduced
    3 One might regard a particular computer program as a harmful thing that should not be available atall, like the Lotus Marketplace database of personal information, which was withdrawn from saledue to public disapproval. Most of what I say does not apply to this case, but it makes little senseto argue for having an owner on the grounds that the owner will make the program less available
    The owner will not make it completely unavailable, as one would wish in the case of a programwhose use is considered destructive

==========第130页==========
    Chapter 18: Why Software Should Be Free
    125
    This reflects a crucial difference between copies of programs and cars chairs. orsandwiches. There is no copying machine for material objects outside of sciencefiction. But programs are easy to copy; anyone can produce as many copies as areanted, with very little effort. This isnt true for material objects because matter isconserved: each new copy has to be built from raw materials in the same way thatthe first copy was built
    With material objects, a disincentive to use them makes sense, because fewerobjects bought means less raw material and work needed to make them. It's truethat there is usually also a startup cost, a development cost, which is spread overthe production run. But as long as the marginal cost of production is significant,dding a share of the development cost does not make a qualitative difference. Andit does not require restrictions on the freedom of ordinary users
    However, imposing a price on something that would otherwise be free is a qualitative change. a centrally-imposed fee for software distribution becomes a powerful disincentive
    What's more central production as now practiced is inefficient even as a meansof delivering copies of software. This system involves enclosing physical disks ortapes in superfluous packaging, shipping large numbers of them around the world,and storing them for sale. This cost is presented as an expense of doing businessin truth, it is part of the waste caused by having owners
    Damaging Social Cohesion
    Suppose that both you and your neighbor would find it useful to run a certainprogram. In ethical concern for your neighbor, you should feel that proper handlingof the situation will enable both of you to use it. A proposal to permit only one ofyou to use the program, while restraining the other, is divisive; neither you nor yourneighbor should find it acceptable
    Signing a typical software license agreement means betraying your neighborI promise to deprive my neighbor of this program so that I can have a copy formyself. People who make such choices feel internal psychological pressure to jus-tify them, by downgrading the importance of helping ones neighbors--thus publicspirit suffers. This is psychosocial harm associated with the material harm of discouraging use of the program
    Many users unconsciously recognize the wrong of refusing to share, so theydecide to ignore the licenses and laws, and share programs anyway. But they oftenfeel guilty about doing So. They know that they must break the laws in order tobe good neighbors, but they still consider the laws authoritative, and they concludethat being a good neighbor(which they are) is naughty or shameful. That is alsoa kind of psychosocial harm, but one can escape it by deciding that these licensesand laws have no moral force
    Programmers also suffer psychosocial harm knowing that many users will not beallowed to use their work. This leads to an attitude of cynicism or denial. A programmer may describe enthusiastically the work that he finds technically excitinthen when asked, Will i be permitted to use it?, his face falls, and he admits the

==========第131页==========
    126
    Free Software, Free Society: Selected essays of richard m. stallman
    answer is no. To avoid feeling discouraged, he either ignores this fact most of thetime or adopts a cynical stance designed to minimize the importance of it
    Since the age of reagan the greatest scarcity in the United States is not technical innovation, but rather the willingness to work together for the public good. Itmakes no sense to encourage the former at the expense of the latter
    Obstructing Custom Adaptation of Programs
    The second level of material harm is the inability to adapt programs. The ease ofmodification of software is one of its great advantages over older technology. Butmost commercially available software isnt available for modification, even afteryou buy it. It's available for you to take it or leave it, as a black box--that is alla program that you can run consists of a series of numbers whose meaning isobscure. No one, not even a good programmer, can easily change the numbers tomake the program do something different
    Programmers normally work with the"source code"for a program, which iswritten in a programming language such as Fortran or C. It uses names to designatethe data being used and the parts of the program, and it represents operations withsymbols such as for addition and- for subtraction. It is designed to help pro-grammers read and change programs. Here is an example; a program to calculatethe distance between two points in a plane
    loat
    struct point p0, pl
    float dist
    float ydist
    return sart
    Here is the same program in executable form, on the computer I normally use
    31425894
    232267772
    1634862
    1411907592
    231844736
    2159150
    1420296208
    234880989
    234879837
    234879966
    232295424
    1644167167
    3214848
    1090581031
    1962942495
    572518958
    803143692
    314803317
    Source code is useful (at least potentially) to every user of a program. But mostcrs are not allowed to have copies of the source code usually the source code fora proprietary program is kept secret by the owner, lest anybody else learn something
    Ronald reagan, the 40th President of the United States, is famous for having made cuts to manysocial programs. He also created an economic policy, often called trickle down economicsthought of by many as a failure.
    5 Understanding how this source code works is not important; what is important is to notice that thesource code is written at a level of abstraction that is fairly comprehensible
    Notice the incomprehensibleness of the executable code: it is clearly harder to make sense of thanthe source code above

==========第132页==========
    Chapter 18: Why Software Should Be Free
    from it. Users receive only the files of incomprehensible numbers that the computerwill execute. This means that only the program's owner can change the program
    of working
    in a bank for about
    months, writing a program similar to something that was commercially available
    She believed that if she could have gotten source code for that commercially available program it could easily have been adapted to their needs The bank was wiing to pay for this, but was not permitted to-the source code was a secret. So shehad to do six months of make-work, work that counts in the gross national productbut was actually waste
    The MiT artificial Intelligence Lab(AI Lab) received a graphics printer as a giftfrom Xerox around 1977. It was run by free software to which we added manyconvenient features. For example, the software would notify a user immediately oncompletion of a print job. Whenever the printer had trouble, such as a paper jamor running out of paper, the software would immediately notify all users who hadprint jobs queued. These features facilitated smooth operation
    Later Xerox gave the AI Lab a newer, faster printer, one of the first laser printers
    It was driven by proprietary software that ran in a separate dedicated computer, sowe couldnt add any of our favorite features. We could arrange to send a notificationwhen a print job was sent to the dedicated computer, but not when the jobactually printed(and the delay was usually considerable). There was no way tofind out when the job was actually printed; you could only guess. And no one wasinformed when there was a paper jam, so the printer often went for an hour withoutbeing fixed
    The system programmers at the aI Lab were capable of fixing such problemsprobably as capable as the original authors of the program. Xerox was uninterestedin fixing them, and chose to prevent us, so we were forced to accept the problems
    They were never fixed
    Most good programmers have experienced this frustration. The bank could af-ford to solve the problem by writing a new program from scratch, but a typical user,no matter how skilled, can only give up
    Giving up causes psychosocial harmto the spirit of self-reliance. It is demoralizing to live in a house that you cannot rearrange to suit your needs. It leads toresignation and discouragement, which can spread to affect other aspects of oneslife. People who feel this way are unhappy and do not do good work
    Imagine what it would be like if recipes were hoarded in the same fashion assoftware. You might say, How do i change this recipe to take out the salt? " andthe great chef would respond, "How dare you insult my recipe, the child of mybrain and my palate, by trying to tamper with it? You dont have the judgment tochange my recipe and make it work right
    But my doctor says I'm not supposed to eat salt! What can I do? will you takeout the salt for me?
    uld be glad to do that; my fee is only $50,000. ( Since the owner has a
    monopoly on changes, the fee tends to be large. )"However, right now I dont havetime. I am busy with a commission to design a new recipe for ship's biscuit for the
    Navy Department. I might get around to you in about two years

==========第133页==========
    128
    Free Software, Free Society: Selected essays of richard m. stallman
    Obstructing Software Development
    The third level of material harm affects software development. Software development used to be an evolutionary process, where a person would take an existingprogram and rewrite parts of it for one new feature, and then another person wouldrewrite parts to add another feature; in some cases, this continued over a period oftwenty years. Meanwhile, parts of the program would be"cannibalized"to formthe beginnings of other programs
    The existence of owners prevents this kind of evolution, making it necessary tostart from scratch when developing a program. It also prevents new practitionersfrom studying existing programs to learn useful techniques or even how large programs can be structured
    Owners also obstruct education. I have met bright students in computer sciencewho have never seen the source code of a large program. They may be good atwriting small programs, but they cant begin to learn the different skills of writinglarge ones if they cant see how others have done it
    In any intellectual field, one can reach greater heights by standing on the shoul-ders of others. But that is no longer generally allowed in the software field-youcan only stand on the shoulders of the other people in your own company
    The associated psychosocial harm affects the spirit of scientific cooperationwhich used to be so strong that scientists would cooperate even when their countries were at war. In this spirit, Japanese oceanographers abandoning their lab on anisland in the Pacific carefully preserved their work for the invading U.s. Maand left a note asking them to take good care of it
    Confict for profit has destroyed what international conflict spared. Nowadaysscientists in many fields dont publish enough in their papers to enable others toreplicate the experiment. They publish only enough to let readers marvel at howmuch they were able to do. This is certainly true in computer science, where thesource code for the programs reported on is usually secret
    It Does Not Matter How Sharing Is Restricted
    I have been discussing the effects of preventing people from copying, changingand building on a program. I have not specified how this obstruction is carried outbecause that doesnt affect the conclusion. Whether it is done by copy protectionor copyright, or licenses, or encryption, or ROM cards, or hardware serial numbersif it succeeds in preventing use, it does harm
    Users do consider some of these methods more obnoxious than others i suggestthat the methods most hated are those that accomplish their objective
    Software should be free
    I have shown how ownership of a program-the power to restrict changing orcopying it-is obstructive. Its negative effects are widespread and important. Itfollows that society shouldnt have owners for programs

==========第134页==========
    Chapter 18: Why Software Should Be Free
    Another way to understand this is that what society needs is free software, andproprietary software is a poor substitute. Encouraging the substitute is not a rationalway to get what we need
    Vaclav Havel has advised us to"Work for something because it is good, not justbecause it stands a chance to succeed. a business making proprietary softwarestands a chance of success in its own narrow terms but it is not what is good forsociety
    Why People will Develop Software
    If we eliminate copyright as a means of encouraging people to develop softwareat first less software will be developed, but that software will be more useful. It isnot clear whether the overall delivered user satisfaction will be less: but if it is. or ifwe wish to increase it anyway, there are other ways to encourage development, justas there are ways besides toll booths to raise money for streets. Before I talk abouthow that can be done. first i want to question how much artificial encouragement istruly necessary.
    Programming Is Fun
    There are some lines of work that few will enter except for money; road construction, for example. There are other fields of study and art in which there is littlechance to become rich, which people enter for their fascination or their perceivedvalue to society. Examples include mathematical logic, classical music, and archaeology; and political organizing among working people. People compete, moresadly than bitterly, for the few funded positions available, none of which is fundedvery well. They may even pay for the chance to work in the field, if they can afford
    Such a field can transform itself overnight if it begins to offer the possibilityof getting rich. When one worker gets rich, others demand the same opportunity
    Soon all may demand large sums of money for doing what they used to do forpleasure. When another couple of years go by, everyone connected with the fieldil deride the idea that work would be done in the field without large financialreturns. They will advise social planners to ensure that these returns are possible,prescribing special privileges, powers, and monopolies as necessary to do so
    This change happened in the field of computer programming in the past decade
    Fifteen years ago, there were articles on"computer addiction: users were"onlining,"and had hundred-dollar-a-week habits. It was generally understood thatpeople frequently loved programming enough to break up their marriages. Today,it is generally understood that no one would program except for a high rate of pay.
    People have forgotten what they knew fifteen years ago
    When it is true at a given time that most people will work in a certain field onlyfor high pay, it need not remain true. The dynamic of change can run in reverse, ifsociety provides an impetus. If we take away the possibility of great wealth, then7 Fifteen years before this article was written was in the year 1977

==========第135页==========
    130
    Free Software, Free Society: Selected essays of richard m. stallman
    after a while, when the people have readjusted their attitudes, they will once againbe eager to work in the field for the joy of accomplishment
    becomes an easier question
    when we realize that it's not a matter of paying them a fortune. a mere living iseasier to raise
    Funding Free Software
    Institutions that pay programmers do not have to be software houses. Many otherinstitutions already exist that can do this
    Hardware manufacturers find it essential to support software development evenif they cannot control the use of the software In 1970. much of their software wasfree because they did not consider restricting it. Today their increasing willingnessto join consortiums shows their realization that owning the software is not what isreally important for them
    Universities conduct many programming projects. Today they often sell the results, but in the 1970s they did not. Is there any doubt that universities woulddevelop free software if they were not allowed to sell software? These projectscould be supported by the same government contracts and grants that now supportproprietary software development
    It is common today for university researchers to get grants to develop a system, develop it nearly to the point of completion and call that finished, "and thenstart companies where they really finish the project and make it usable. Sometimesthey declare the unfinished version"free; if they are thoroughly corrupt, they instead get an exclusive license from the university. This is not a secret; it is openlyadmitted by everyone concerned. Yet if the researchers were not exposed to thetemptation to do these things, they would still do their research
    Programmers writing free software can make their living by selling services related to the software. i have been hired to port the gnu c compiler to new hard-ware, and to make user-interface extensions to gnu Emacs. (I offer these improvements to the public once they are done )I also teach classes for which I am
    aI
    I am not alone in working this way; there is now a successful, growing corporation which does no other kind of work. Several other companies also providecommercial support for the free software of the GNU system. This is the beginninof the independent software support industry-an industry that could become quitelarge if free software becomes prevalent. It provides users with an option generallyunavailable for proprietary software, except to the very wealthy
    New institutions such as the free software foundation can also fund program-mers. Most of the Foundations funds come from users buying disks and tapesthrough the mail. The software on the tapes is free, which means that every user hasthe freedom to copy it and change it, but many nonetheless pay to get copies. Recall that"free software" refers to freedom, not to price. Some users who already
    This article was written on april 24.1992

==========第136页==========
    Chapter 18: Why Software Should Be Free
    have a copy order tapes as a way of making a contribution they feel we deserve
    The Foundation also receives sizable donations from computer manufacturers
    The Free Software Foundation is a charity and its income is spent on hiring asmany programmers as possible. If it had been set up as a business, distributing thesame free software to the public for the same fee, it would now provide a very goodliving for its founder
    Because the Foundation is a charity, programmers often work for the Foundationfor half of what they could make elsewhere They do this because we are free ofbureaucracy, and because they feel satisfaction in knowing that their work will notbe obstructed from use. Most of all, they do it because programming is fun. Inddition, volunteers have written many useful programs for us.(Even technicalwriters volunteer.
    4t. This confirms that programming is among the most fascinating of all fields, alongth music and art. We don t have to fear that no one will want to program
    What Do Users Owe to Developers?
    There is a good reason for users of software to feel a moral obligation to con-tribute to its support Developers of free software are contributing to the usersactivities, and it is both fair and in the long-term interest of the users to give themfunds to continue
    However, this does not apply to proprietary software developers since obstructionism deserves a punishment rather than a reward
    We thus have a paradox: the developer of useful software is entitled to the support of the users, but any attempt to turn this moral obligation into a requirementdestroys the basis for the obligation. a developer can either deserve a reward ordemand it but not both
    I believe that an ethical developer faced with this paradox must act so as to de-serve the reward, but should also entreat the users for voluntary donations. Eventually the users will learn to support developers without coercion just as they haveearned to support public radio and television stations
    What Is software Productivity?
    If software were free, there would still be programmers, but perhaps fewer ofthem would this be bad for society?
    Not necessarily. Today the advanced nations have fewer farmers than in 1900but we do not think this is bad for society, because the few deliver more food tothe consumers than the many used to do. We call this improved productivity. Freesoftware would require far fewer programmers to satisfy the demand, because ofincreased software productivity at all levels
    Wider use of each program that is developed
    The ability to adapt existing programs for customization instead of startingfrom scratch
    Better education of programmers

==========第137页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    The elimination of duplicate development effort
    Those who object to cooperation claiming it would result in the employment offewer programmers are actually objecting to increased productivity. Yet these peo-ple usually accept the widely-held belief that the software industry needs increasedproductivity. How is this? 9
    Software productivity"can mean two different things: the overall productivityof all software development, or the productivity of individual projects. Overall pro-ductivity is what society would like to improve, and the most straightforward wayto do this is to eliminate the artificial obstacles to cooperation that reduce it. Butresearchers who study the field of "software productivity'' focus only on the second, limited, sense of the term, where improvement requires difficult technologicaladvances
    Is Competition Inevitable?
    Perhaps it is. But competition itself is not harmful; the harmful thing is combaIs it inevitable that people will try to compete, to surpass their rivals in society
    There are many ways to compete. Competition can consist of trying to achieveever more to outdo what others have done For example in the old days there wascompetition among programming wizards--competition for who could make thecomputer do the most amazing thing, or for who could make the shortest or fastestprogram for a given task. This kind of competition can benefit everyone, as long asthe spirit of good sportsmanship is maintained
    Constructive competition is enough competition to motivate people to great ef-forts. A number of people are competing to be the first to have visited all thecountries on Earth; some even spend fortunes trying to do this. But they do notbribe ship captains to strand their rivals on desert islands. They are content to letthe best person win
    Competition becomes combat when the competitors begin trying to impede eachother instead of advancing themselveswhen "Let the best person win"gives wayto"Let me win, best or not. Proprietary software is harmful, not because it is aform of competition but because it is a form of combat among the citizens of oursociety
    Competition in business is not necessarily combat. For example, when two gro-ery stores compete, their entire effort is to improve their own operations not tosabotage the rival. but this does not demonstrate a special commitment to business ethics; rather, there is little scope for combat in this line of business short ofhysical violence. Not all areas of business share this characteristic. withholdinginformation that could help everyone advance is a form of combat
    According to Eric raymond, 95%o of the jobs in the software industry involve production of customsoftware, not intended for publication at all. It follows that even if we assume the theoretical worstthat there will be no jobs for free software development(and we already know there are some), theswitch to free software can only have a small effect on the total number of software jobs. There isplenty of room for people to have jobs writing custom software and develop free software in theirspare time. There is no way to know whether full conversion to free software would increase ordecrease the number of jobs in the software field

==========第138页==========
    Chapter 18: Why Software Should Be Free
    Business ideology does not prepare people to resist the temptation to combat thecompetition. Some forms of combat have been banned with anti-trust laws truthn-advertising laws, and so on, but rather than generalizing this to a principledrejection of combat in general, executives invent other forms of combat that arenot specifically prohibited. Societys resources are squandered on the economicequivalent of factional civil war.
    <Why Don't You move to russia?>
    In the United States, any advocate of other than the most extreme form of laissez-faire selfishness has often heard this accusation. For example, it is leveled againstthe supporters of a national health care system, such as is found in all the otherindustrialized nations of the free world. It is leveled against the advocates of publicsupport for the arts, also universal in advanced nations. The idea that citizens haveany obligation to the public good is identified in America with Communism. Buthow similar are these ideas?
    Communism as was practiced in the soviet union was a system of central controlwhere all activity was regimented, supposedly for the common good, but actuallyfor the sake of the members of the Communist party. And where copying equipmentwas closely guarded to prevent illegal copyin
    The american system of software copyright exercises central control over distribution of a program, and guards copying equipment with automatic copyingprotection schemes to prevent illegal copying
    By contrast, I am working to build a system where people are free to decide theirown actions; in particular, free to help their neighbors, and free to alter and improvethe tools that they use in their daily lives. A system based on voluntary cooperationand on decentralization
    Thus, if we are to judge views by their resemblance to Russian Communism, itis the software owners who are the communists
    The Question of Premises
    make the assumption in this paper that a user of software is no less importantthan an author, or even an authors employer. In other words, their interests andneeds have equal weight, when we decide which course of action is best
    This premise is not universally accepted many maintain that an author's em-ployer is fundamentally more important than anyone else. They say, for examplethat the purpose of having owners of software is to give the author's employer theadvantage he deserves--regardless of how this may affect the public
    It is no use trying to prove or disprove these premises Proof requires sharedpremises. So most of what I have to say is addressed only to those who share thepremises I use, or at least are interested in what their consequences are. For those
    Tho believe that the owners are more important than everyone else, this paper is
    Simply irrelevant
    But why would a large number of Americans accept a premise that elevates cer-tain people in importance above everyone else? partly because of the belief that

==========第139页==========
    134
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    this premise is part of the legal traditions of American society. Some people feelthat doubting the premise means challenging the basis of society
    It is important for these people to know that this premise is not part of our legaltradition It never has been
    Thus, the Constitution says that the purpose of copyright is to "promote theprogress of science and the useful arts. The Supreme Court has elaborated onthis, stating in Fox Film vs. Doyal that The sole interest of the United states andthe primary object in conferring the [copyright] monopoly lie in the general benefitsderived by the public from the labors of authors
    We are not required to agree with the Constitution or the Supreme Court. (Atone time, they both condoned slavery. So their positions do not disprove the ownersupremacy premise. I hope that the awareness that this is a radical right-wing assumption rather than a traditionally recognized one will weaken its appeal
    Conclusion
    We like to think that our society encourages helping your neighbor; but eachtime we reward someone for obstructionism, or admire them for the wealth theyhave gained in this way, we are sending the opposite message
    Software hoarding is one form of our general willingness to disregard the welfareof society for personal gain. We can trace this disregard from ronald reagan to Jim
    Bakker, 0 from Ivan Boesky to Exxon, 2 from failing banks to failing schools. Wecan measure it with the size of the homeless population and the prison population
    The antisocial spirit feeds on itself. because the more we see that other people willnot help us, the more it seems futile to help them. Thus society decays into a jungle
    If we dont want to live in a jungle we must change our attitudes. We must startsending the message that a good citizen is one who cooperates when appropriate,not one who is successful at taking from others. I hope that the free softwaremovement will contribute to this: at least in one area, we will replace the junglewith a more efficient system that encourages and runs on voluntary cooperation
    10 Jim Bakker raised millions of dollars over television for his religious groups Heritage USA, PTLand the Inspirational Network in the 1980,s. He was convicted of mail and wire fraud for fundrais
    Ir Ing efforts at PTL and sentenced to forty-five years in federal prisonIvan boesky was
    to prison for insider trading in the 1980s and fined $100 million. He
    famous for having once said, 'Greed is all right. I want you to know i think greed is healthy. you
    I can be greedy and still feel good about yourself.
    In the 1980,s Exxon Valdez caused the largest oil spill in the world off the Alaskan coast, causinimmeasurable damage. Cleanups and fines have cost them over sl billion to date

==========第140页==========
    Chapter 22: Copyright and globalization
    135
    19 Copyright and globalization in the age of
    Computer Networks
    Introduction
    David Thorburn, moderator: Our speaker today, Richard Stallman, is a legendary figure in the computing world, and my experience in trying to find a respondent to share the podium with him was instructive. One distinguished MITprofessor told me that stallman needs to be understood as a charismatic figure in abiblical parable--a kind of old Testament anecdote-lesson. "Imagine he said,"a
    Moses or a Jeremiah--better a Jeremiah. I said, "Well, thats very admirable. Thatsounds wonderful. It confirms my sense of the kind of contribution he has made tothe world. Then why are you reluctant to share the podium with him? His answer
    Like Jeremiah or Moses, he would simply overwhelm me. I wont appear on thesame panel with him, but if you asked me to name five people alive in the worldwho have truly helped us all, Richard stallman would be one of them.
    The speech
    I should begin by explaining why I have refused to allow this forum to be Webcast, in case it wasnt clear fully what the issue is: the software they use for Webbroadcasting requires the user to download certain software in order to receive thebroadcast. That software is not free software. It's available at zero price but onlyas an executable. which is a mysterious bunch of numbers
    What it does is secret. You cant study it, you cant change it, and you certainlycan not publish it in your own modified version. And, those are among the freedomsthat are essential in the definition of " free software
    So if i am to be an honest advocate for free software, I can hardly go aroundgiving speeches, then put pressure on people to use non-free software. Id be undermining my own cause. If I dont show that I take my principles seriously, I cantex pect any body else to take them seriously
    However, this speech is not about free software. After I'd been working onthe free software movement for several years and people started using some ofthe pieces of the gnu operating system, I began getting invited to give speechesat which people started asking me: Well, how do the ideas about freedom forsoftware users generalize to other kinds of things?
    The following is an edited transcript of a speech given at MIT in the Communications Fo
    rum on April 19, 2001. This transcript is part of Free Software, Free Society: Selected Essays of richard M. Stallman,2nded.(boston:GnuPress,2004),IsBn1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第141页==========
    136
    Free Software, Free Society: Selected essays of richard m. stallman
    And, of course, people asked silly questions like, " Well, should hardware befree? "Should this microphone be free?
    Well, what does that mean? Should you be free to copy it and change it? Well,as for changing it, if you buy the microphone, nobody is going to stop you fromchanging it. As for copying it, nobody has a microphone copier. Outside of Star
    Trek, those things dont exist. Maybe some day there'll be nanotechnological analyzers and assemblers, and it really will be possible to copy a physical object, andthen these issues of whether you're free to do that will start being really important
    We'll see agribusiness companies trying to stop people from copying food, and thatwill become a major political issue, if that technological capability will ever existI dont know if it will; it's just speculation at this point
    But for other kinds of information you can raise the issue because any kindof information that can be stored on a computer, conceivably, can be copied andmodified. So, the ethical issues of free software the issues of a user's right to copyand modify software, are the same as such questions for other kinds of publishedinformation. I'm not talking about private information, say, personal information,which is never meant to be available to the public at all. I'm talking about the rightsyou should have if you get copies of published things where theres no attempt tokeep them secret
    The history of Copyright
    In order to explain my ideas on the subject, I'd like to review the history of thedistribution of information and of copyright In the ancient world books were written by hand with a pen, and anybody who knew how to read and write could copy abook about as efficiently as anybody else. Now somebody who did it all day wouldprobably learn to be somewhat better at it, but there was not a tremendous difference. Because the copies were made one at a time, there was no great economy ofscale. Making ten copies took ten times as long as making one copy. There wasalso nothing forcing centralization-a book could be copied anywhere
    Because of this technology, because it didnt force copies to be identical, theresnt, in the ancient world, the same total divide between copying a book andwriting a book. There are things in between that made sense. They did understandthe idea of an author--they knew, say, that this play was written by Sophoclesbut, in between writing a book and copying a book, there were other useful thingsyou could do. For instance, you could copy a part of a book, then write some newwords, copy some more, and write some new words, and on and on. This was calledwriting a commentary. This was a common thing to do, and these commentarieswere appreciated
    You could also copy a passage out of one book, then write some other words, andcopy a passage from another book and write some more, and so on, and this wasmaking a compendium. Compendia were also very useful. There are works thatare lost, but parts of them survived when they were quoted into other books that got
    because it wasn t interesting enougth 6to be more popular than the original. M
    e they copied the most interesting parts
    People made a lot of copies of these, but they didnt bother copying the original

==========第142页==========
    Chapter 22: Copyright and globalization
    137
    Now as far as i can tell, there was no such thing as copyright in the ancient world
    Anyone who wanted to copy a book could copy the book. Later on, the printinpress was developed and books started to be copied on the printing press. Nowthe printing press was not just a quantitative improvement in the ease of copying
    It affected different kinds of copying unevenly because it introduced an inherenteconomy of scale. It was a lot of work to set the type and much less work to makemany identical copies of the page. The result was that copying books tended tobecome a centralized, mass-production activity. Copies of any given book wouldprobably be made in only a few places
    It also meant that ordinary readers couldnt copy books efficiently--only if youhad a printing press could you do that. So it was an industrial activity
    Now for the first few centuries of printing, printed books did not totally replacehand-copying. Hand-copied books were still made, sometimes by rich people andsometimes by poor people. The rich people did this to get an especially beautifulcopy that would show how rich they were, and poor people did it because maybethey didnt have enough money to buy a printed copy but they had the time to copya book by hand. As the song says, Time aint money when all you got is time
    So hand-copying was still done to some extent. I think it was in the 1800s thatprinting actually got to be cheap enough that even poor people could afford printedbooks if they were literate
    Now copyright was developed along with the use of the printing press; and giventhe technology of the printing press, it had the effect of an industrial regulation
    It didnt restrict what readers could do; it restricted what publishers and authorscould do. Copyright in England was initially a form of censorship. You had toget government permission to publish the book. But the idea has changed. By thetime of the U.S. Constitution, people came to a different idea of the purpose ofcopyright, and i think that that idea was accepted in england as well
    For the u.s. Constitution it was proposed that authors should be entitled to acopyright, a monopoly on copying their books. This proposal was rejected. Instead,a crucially different proposal was adopted, which is, that for the sake of promotingprogress, Congress could optionally establish a copyright system that would createthese monopolies. So the monopolies, according to the u.s. Constitution, do notexist for the sake of those who own them; they exist for the sake of promotinthe progress of science. The monopolies are handed out to authors as a way ofmodifying their behavior to get them to do something that serves the public
    So the goal is to have more written and published books which other people canthen read. And this [copyright is believed to contribute to increased literary activity, and increased writing about science and other fields, and society then learnsthrough this Thats the purpose to be served. The creation of private monopolieswas a means to an end only, and the end is a public end
    Now copyright in the age of the printing press was fairly painless because it wasan industrial regulation. It restricted only the activities of publishers and authors
    In some strict sense, the poor people who copied books by hand may have been

==========第143页==========
    138
    Free Software, Free Society: Selected essays of richard m. stallman
    infringing copyright, too. but nobody ever tried to enforce copyright against thembecause it was understood as an industrial regulation
    Copyright in the age of the printing press was also easy to enforce, becauit had to be enforced only where there was a publisher, and publishers, by theirnature, make themselves known. If you're trying to sell books, you ve got to tellpeople where to come to buy them. You dont have to go into everybodys house toenforce copyright
    Finally, copyright may have been a beneficial system in that context. Copyrightn the U.s. is considered by legal scholars as a trade, a bargain between the publicand authors. The public trades away some of its natural rights to make copies, andin exchange gets the benefit of more books being written and published
    Now, is this an advantageous trade? Well, when the general public cant makecopies because they can only be efficiently made on printing presses, and mostpeople don t own printing presses, the result is that the general public is tradinaway a freedom it is unable to exercise, a freedom that is of no practical value. Ifyou have something that is a byproduct of your life and it's useless and you have theopportunity to exchange it for something else of any value, you're gaining. Thatswhy copyright may have been an advantageous trade for the public in that time
    But the context is changing, and that has to change our ethical evaluation ofcopyright. Now, the basic principles of ethics are not changed by advances in technology; they're too fundamental to be touched by such contingencies. But ourdecision about any specific question is a matter of the consequences of the alternatives available, and the consequences of a given choice may change when thecontext changes. That is what is happening in the area of copyright law, becausethe age of the printing press is coming to an end, giving way gradually to the ageof the computer networks
    Computer networks and digital information technology are bringing us back to aworld more like the ancient world, where anyone who can read and use the information can also copy it and can make copies about as easily as anyone else couldmake them. They are perfect copies and theyre just as good as the copies anyoneelse could make. So the centralization and economy of scale introduced by theprinting press and similar technologies is going away
    This changing context changes the way copyright law works. You see, copyrightlaw no longer acts as an industrial regulation: it is now a draconian restriction ona general public. It used to be a restriction on publishers for the sake of authors
    Now, for practical purposes, it's a restriction on a public for the sake of publishers. Copyright used to be fairly painless and uncontroversial. It didnt restrict thegeneral public. Now [today], thats not true. If you have a computer, the pub-fishers consider restricting you to be their highest priority. Copyright was easy toenforce because it was a restriction only on publishers, who were easy to find-andhat they published was easy to see. Now the copyright is a restriction on eachand every one of you. To enforce it requires surveillance, an intrusion, and harsh
    1 The original statutes spoke of publishing and printing only. Copying by hand was completely
    unregulated---most likely because the regulation was aimed at industr

==========第144页==========
    Chapter 22: Copyright and globalization
    139
    punishments, and we are seeing these being enacted into law in the U.s. and othercountries
    Copyright used to be, arguably, an advantageous trade for the public to make,because the public was trading away freedoms it couldnt exercise. Well, nowit can exercise these freedoms. What do you do if you have been producing abyproduct which was of no use to you and you were in the habit of trading it away,and then, all of a sudden, you discover a use for it? You can actually consume ituse it. What do you do? You dont trade it all; you keep some. And thats whatthe public would naturally want to do. Thats what the public does whenever it'sgiven a chance to voice its preference; it keeps some of this freedom and exercisesit. Napster is a big example of that, the public deciding to exercise the freedom tocopy instead of giving it up The natural thing for us to do to make copyright lawfit todays circumstances is to reduce the amount of copyright power that copyrightowners get: to reduce the amount of restriction that they place on the public, and toincrease the freedom that the public retains
    But this is not what the publishers want to do. what they want to do is exactIthe opposite. They wish to increase copyright powers to the point where they canremain firmly in control of all use of information This has led to laws that havegiven an unprecedented increase in the powers of copyright. Freedoms that thepublic used to have in the age of the printing press are being taken away
    For instance, lets look at e-books. There's a tremendous amount of hype about ebooks; you can hardly avoid it. I took a flight in Brazil and in the in-flight magazinethere was an article saying that maybe it would take 10 or 20 years before we allswitched to e-books. Clearly, this kind of campaign comes from somebody payingfor it. Why are they doing that? I think I know. The reason is that e-books arethe opportunity to take away some of the residual freedoms that readers of printedbooks have always had and still have-the freedom. for instance, to lend a book toyour friend, or borrow it from the public library, or sell a copy to a used bookstoreor buy a copy anonymously without putting a record in the database of who boughtthat particular book. And maybe even the right to read it twice
    These are freedoms that the publishers would like to take away, but they can't dos for printed books because that would be too obvious a power grab and wouldraise an outcry. So they have found an indirect strategy. First, they obtain the legislation to take away these freedoms for e-books when there are no e-books: sothere's no controversy There are no pre-existing users of e-books who are accus-tomed to their freedoms and will defend them. That they obtained with the Digital
    Millennium Copyright Act in 1998. Then they introduce e-books and gradually getevery body to switch from printed books to e-books and eventually the result isreaders have lost these freedoms without ever having an instant when those freedoms were being taken away and when they might have fought back to retain them
    We see at the same time efforts to take away people's freedom in using otherinds of published works. For instance, movies that are on DVDs are publishedin an encrypted format that used to be secret-it was meant to be secret--and theonly way the movie companies would tell you the format, so that you could mala dVd player, was if you signed a contract to build certain restrictions into theplayer, with the result that the public would be stopped even from fully exercising

==========第145页==========
    140
    Free Software, Free Society: Selected essays of richard m. stallman
    their legal rights. Then a few clever programmers in Europe figured out the formatof DVDs and they wrote a free software package that would read a DVD. Thismade it possible to use free software on top of the gnu/linux operating systemto watch the dVd that you had bought, which is a perfectly legitimate thing to do
    You ought to be able to do that with free software
    But the movie companies objected and they went to court. You see the moviecompanies used to make a lot of films where there was a mad scientist and somebody was saying, "But, Doctor, there are some things Man was not meant to know
    They must have watched their own films too much, because they came to believehat the format of DVds is something that Man was not meant to know. And theyobtained a ruling for total censorship of the software for playing dvds. Even making a link to a site where this information is legally available outside the U.s. hasbeen prohibited. An appeal has been made against this ruling. I signed a friend-ofthe-court brief in that appeal, I'm proud to say, although I'm playing a fairly smallrole in that particular battle
    The U.s. government intervened directly on the other side. This is not surprisingwhen you consider why the Digital Millennium Copyright Act was passed in thefirst place. The reason is the campaign finance system that we have in the U.swhich is essentially legalized bribery where the candidates are bought by businessbefore they even get elected. And, of course, they know who their master isthey know whom they're working for, and they pass the laws to give business morepower
    What will happen with that particular battle, we dont know. Meanwhile, Australia has passed a similar law and Europe is almost finished adopting one; so theplan is to leave no place on earth where this information can be made available topeople. But the U.s. remains the world leader in trying to stop the public fromdistributing information thats been published
    However. the U.s. is not the first country to make a priority of this The soviet
    Union treated it as very important. There, unauthorized copying and redistributionwas known as samizdat, and to stamp it out. they developed a series of methods
    First, guards watching every piece of copying equipment to check what peoplewere copying to prevent forbidden copying. Second, harsh punishments for anyoneaught doing forbidden copying-you could be sent to Siberia. Third, soliciting informers, asking everyone to rat on their neighbors and coworkers to the informationpolice. Fourth, collective responsibility: You! You're going to watch that group
    If I catch any of them doing forbidden copying, you are going to prison so watchthem hard. And, fifth, propaganda, starting in childhood, to convince everyonethat only a horrible enemy of the people would ever do this forbidden copyin
    The U.s. is using all of these measures now. First, guards watching copyingequipment. Well, in copy stores, they have human guards to check what you copy.
    But human guards to watch what you copy in your computer would be too expen-sive: human labor is too expensive. So they have robot guards. Thats the purposeof the Digital Millennium Copyright Act. This software goes in your computer; it'sthe only way you can access certain data and it stops you from copying.
    2 There are many such packages now the first was called"DeCSS

==========第146页==========
    Chapter 22: Copyright and globalization
    There's a plan now to introduce this software into every hard disk, so that therecould be files on your hard disk that you cant even access except by getting permission from some network server to access the file. And to bypass this softwareor even tell other people how to bypass it is a crime
    Second, harsh punishments. A few years ago, if you made copies of somethinand handed them out to your friends just to be helpful, this was not a crime; it hadnever been a crime in the U.s. Then they made it a felony, so you could be put inprisons for years for sharing with your neighbor
    Third, informers. Well, you may have seen the ads on TV, the ads in the bostonsubways asking people to rat on their coworkers to the information police, whichofficially is called the Software Publishers association
    And fourth, collective responsibility. In the U.s., this has been done by conscripting Internet service providers, making them legally responsible for everything theircustomers post. The only way they can avoid always being held responsible is ifthey have an invariable procedure to disconnect or remove the information withintwo weeks after a complaint. Just a few days ago, I heard that a clever protest sitecriticizing citibank for some of its nasty policies was disconnected in this way
    Nowadays, you dont even get your day in court; your site just gets unplugged
    And finally, propaganda starting in childhood. Thats what the word"pirate? isused for. If you'll think back a few years, the term "pirate" was formerly applied topublishers that didnt pay the author. But now it's been turned completely around
    It's now applied to members of the public who escape from the control of the publisher. It's being used to convince people that only a nasty enemy of the peoplewould ever do this forbidden copying. It says that sharing with your neighbor isthe moral equivalent of attacking a ship " I hope that you don t agree with that andif you dont, I hope you will refuse to use the word in that way
    The publishers are purchasing laws to give themselves more power. In additionthey're also extending the length of time the copyright lasts. The U.s. Constitutionsays that copyright must last for a limited time, but the publishers want copyrightto last forever. However, getting a constitutional amendment would be rather dif-ficult, so they found an easier way that achieves the same result. Every 20 yearsthey retroactively extend copyright by 20 years. So the result is, at any given time,copyright nominally lasts for a certain period and any given copyright will nominally expire some day. But that expiration will never be reached because everycopyright will be extended by 20 years every 20 years; thus no work will ever gointo the public domain again. This has been called" perpetual copyright on the
    Installment plan
    The law in 1998 that extended copyright by 20 years is known as the"Micke
    Mouse Copyright Extension Act" because one of the main sponsors of this lawwas Disney. Disney realized that the copyright on Mickey Mouse was going toexpire, and they don t want that to ever happen because they make a lot of moneyfrom that copyright
    3 The official title is"The Sonny Bono Copyright Term Extension Act

==========第147页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    Globalization
    Now the original title of this talk was supposed to be Copyright and globalization. If you look at globalization, what you see is that it's carried out by anumber of policies which are done in the name of economic efficiency or so-calledfree-trade treaties, which really are designed to give business power over laws andpolicies. They' re not really about free trade. They're about a transfer of powerremoving the power to decide laws from the citizens of any country who mightconceivably consider their own interests and giving that power to businesses whowill not consider the interests of those citizens
    Democracy is the problem in their view, and these treaties are designed to put anend to the problem. For instance, NAFTA actually contains provisions, I believeallowing companies to sue another government to get rid of a law that they believeis interfering with their profits in the other country. So foreign companies havemore power than citizens of the country
    There are attempts being made to extend this beyond NaFTA. For instance, thisis one of the goals of the so-called free trade area of the americas, to extend thisprinciple to all the countries in South America and the Caribbean as well, and themultilateral agreement on investment was intended to spread it to the whole world
    One thing weve seen in the 1990s is that these treaties begin to impose copyrightthroughout the world, and in more powerful and restrictive ways. These treaties arenot free-trade treaties. They're actually corporate-controlled trade treaties beinused to give corporations control over world trade in order to eliminate free trade
    When the U.s. was a developing country in the 1800s, the U.s. did not recognizeforeign copyrights. This was a decision made carefully. and it was an intelligentdecision. It was acknowledged that for the U.s. to recognize foreign copyrightswould just be disadvantageous, that it would suck money out and wouldnt do muchgood
    The same logic would apply today to developing countries, but the U. s.hassufficient power to force them to go against their interests. Actually, it's a mistaketo speak of the interests of countries in this context. In fact, Im sure that most ofyou have heard about the fallacy of trying to judge the public interest by adding upeverybody's wealth. If working Americans lost $1 billion and Bill Gates gained $2billion, would Americans generally be better off? Would this be good for America?
    If you look only at the total, it looks like it's good. However, this example reallyshows that the total is the wrong way to judge because Bill Gates really doesntneed another $2 billion, but the loss of the $I billion by other people who donthave as much to start with might be painful. Well, in a discussion about any ofthese trade treaties, when you hear people talk about the interests of this countryor that country, what theyre doing, within each country, is adding up everybody'sincome. The rich people and the poor people are being added up. So it's actually anexcuse to apply that same fallacy to get you to ignore the effect on the distributionof wealth within the country and whether the treaty is going to make that moreuneven. as it has done in the u.s
    North american Free Trade agreement

==========第148页==========
    Chapter 22: Copyright and globalization
    143
    So it's really not the U.s. interest that is being served by enforcing copyrightaround the world. It's the interests of certain business owners, many of whom arethe u.s. and some of whom are in other countries. It doesnt, in any sense, servethe public interest
    Rethinking Copyright
    But what would make sense to do? If we believe in the goal of copyrightstated, for instance, in the U.s. Constitution-the goal of promoting progresschat would be intelligent policies to use in the age of the computer network
    Clearly, instead of increasing copyright powers, we have to pull them back so as togive the general public a certain domain of freedom where they can make use ofthe benefits of digital technology, make use of their computer networks. But howfar should that go? Thats an interesting question because I dont think we shouldnecessarily abolish copyright totally. The idea of trading some freedoms for moreprogress might still be an advantageous trade at a certain level, even if traditionalcopyright gives up too much freedom. But in order to think about this intelligentlythe first thing we have to recognize is, there's no reason to make it totally uniform
    There's no reason to insist on making the same deal for all kinds of work
    In fact, that already isnt the case because there are a lot of exceptions for music
    Music is treated very differently under copyright law. But the arbitrary insistenceon uniformity is used by the publishers in a certain clever way. They pick somepeculiar special case and they make an argument that, in that special case, it wouldbe advantageous to have this much copyright. Then they say that for uniformity'ssake, there has to be this much copyright for everything. So, of course, they pick
    rare special case and not really very important overal gument, even if it's a rather
    But maybe we should have that much copyright for that particular special case
    We dont have to pay the same price for everything we buy a thousand dollars fora new car might be a very good deal. a thousand dollars for a container of milk ishorrible deal. You wouldnt pay the special price for everything you buy in otherareas of life. why do it here?
    We need to look at different kinds of works, and Id like to propose a way ofdoing this
    The first class of work is that of functional works - -that is works whose use isto get a job done
    This includes recipes, computer programs. manuals and textbooks, and referenceworks like dictionaries and encyclopedias. For all these functional works i believethat the issues are basically the same as they are for software and the same conclusions apply. People should have the freedom even to publish a modified versionbecause its very useful to modify functional works. People's needs are not all thesame. If I wrote this work to do the job i think needs doing, your idea of a jobyou want to do may be somewhat different. So you want to modify this work todo what's good for you. At that point, there may be other people who have similarneeds to yours, and your modified version might be good for them. Everybody whocooks knows this and has known this for hundreds of years It's normal to make

==========第149页==========
    144
    Free Software, Free Society: Selected essays of richard m. stallman
    copies of recipes and hand them out to other people and it's also normal to changea recipe. If you change the recipe and cook it for your friends and they like eatinit, they might ask you, Could I have the recipe? Then may be you ll write downyour version and give them copies. That is exactly the same thing that we muchlater started doing in the free-software community
    So that's one class of work
    The second class of work is works whose purpose is to say what certain peoplethink. Talking about those people is their purpose. This includes, for instancememoirs. essays of opinion scientific papers offers to buy and sell. catalogues ofgoods for sale. The whole point of those works is that they tell you what somebodythinks or what somebody saw or what somebody believes. To modify them is tomisrepresent the authors; so modifying these works is not a socially useful activity
    So verbatim copying is the only thing that people really need to be allowed to do
    The next question is: Should people have the right to do commercial verbatimcopying? Or is noncommercial enough? You see, these are two different activitieswe can distinguish, so that we can consider the questions separately--the rightto do noncommercial verbatim copying and the right to do commercial verbatimcopying. Well, it might be a good compromise policy to have copyright covercommercial verbatim copying but allow everyone the right to do noncommercialverbatim copying. This way, the copyright on the commercial verbatim copying,as well as on all modified versions--only the author could approve a modifiedersion--would still provide the same revenue stream that it provides now to fundthe writing of these works, to whatever extent it does
    By allowing the noncommercial verbatim copying, it means the copyright nolonger has to intrude into everybody's home. It becomes an industrial regulationagain, easy to enforce and painless, no longer requiring draconian punishments andinformers for the sake of its enforcement. So we get most of the benefit and avoidmost of the horror of the current system
    The third category of works is aesthetic or entertaining works, where the mostimportant thing is just the sensation of looking at the work. Now for these worksthe issue of modification is a very difficult one because on the one hand there is theidea that these works reflect the vision of an artist and to change them is to messup that vision. On the other hand, you have the fact that there is the folk processwhere a sequence of people modifying a work can sometimes produce a result thatis extremely rich. Even when you have artists producing the works, borrowing fromprevious works is often very useful. Some of Shakespeare's plays used a story thatwas taken from some other play. if today ' s copyright laws had been in effect backthen those plays would have been illegal. It's a hard question what we should doabout publishing modified versions of an aesthetic or an artistic work, and we mighthave to look for further subdivisions of the category in order to solve this problem
    For example, maybe computer game scenarios should be treated one way; maybeeverybody should be free to publish modified versions of them. But perhaps anovel should be treated differently; perhaps for that, commercial publication shouldequire an arrangement with the original author
    Now if commercial publication of these aesthetic works is covered by copyright,that will give most of the revenue stream that exists today to support the authors and

==========第150页==========
    Chapter 22: Copyright and globalization
    145
    musicians,to the limited extent that the present system supports them, because [thepresent system] does a very bad job. So that might be a reasonable compromise,just as in the case of the works which represent certain people
    If we look ahead to the time when the age of the computer networks will havefully begun, when we're past this transitional stage, we can envision another wayfor the authors to get money for their work. Imagine that we have a digital cashsystem that enables you to get money for your work. Imagine that we have a digitalcash system that enables you to send somebody else money through the Internetthis can be done in various ways using encryption, for instance. And, imagine thatverbatim copying of all these aesthetic works is permitted. But they're written insuch a way that when you are playing one or reading one or watching one, a boxappears on the side of your screen that says, Click here to send a dollar to theauthor, or the musician or whatever. And it just sits there; it doesnt get in yourway; it's on the side. It doesnt interfere with you, but it's there, reminding you thatit's a good thing to support the writers and the musicians
    So if you love the work that you're reading or listening to, eventually you'regoing to say, Why shouldnt I give these people a dollar? It's only a dollar. What'sthat?I wont even miss it. And people will start sending a dollar. The good thingabout this is that it makes copying the ally of the authors and musicians. whensomebody e-mails a friend a copy, that friend might send a dollar too. If you reallylove it, you might send a dollar more than once and that dollar is more than theyregoing to get today if you buy the book or buy the cd because they get a tiny fractionof the sale. The same publishers that are demanding total power over the public inthe name of the authors and musicians are giving those authors and musicians theshaft all the time
    I recommend you read Courtney Love's article in Salon magazine, an articleabout pirates that plan to use musicians work without paying them. These piratesare the record companies that pay musicians 4%of the sales figures, on the average
    Of course, the very successful musicians have more clout. They get more than 4%of their large sales figures, which means that the great run of musicians who have arecord contract get less than 4% of their small sales figures
    Here's the way it works: The record company spends money on publicity andthey consider this expenditure as an advance to the musicians although the mu-sicians never see it. So nominally when you buy a CD, a certain fraction of thatmoney is going to the musicians, but really it isnt. Really, it's going to pay backthe publicity expenses, and only if the musicians are very successful do they eversee any of that money
    The musicians, of course, sign their record contracts because they hope theyregoing to be one of those few who strike it rich. So essentially a rolling lottery isbeing offered to the musicians to tempt them. Although theyre good at music, theymay not be good at careful, logical reasoning to see through this trap. So they signand then probably all they get is publicity. Well, why dont we give them publicityin a different way, not through a system thats based on restricting the public anda system of the industrial complex that saddles us with lousy music thats easy tosell. Instead, why not make the listeners natural impulse to share the music theylove the ally of the musicians? If we have this box that appears in the player as

==========第151页==========
    146
    Free Software, Free Society: Selected essays of richard m. stallman
    a way to send a dollar to the musicians, then the computer networks could be themechanism for giving the musicians this publicity, the same publicity which is allthey get from record contracts now
    We have to recognize that the existing copyright system does a lousy job of supporting musicians, just as lousy as world trade does of raising living standards in the
    Philippines and China. You have these"enterprise zones "where everyone works insweatshop and all of the products are made in sweatshops globalization is a veryinefficient way of raising living standards of people overseas. Say an American isgetting paid twenty dollars an hour to make something, and you give that job to a
    Mexican who is getting paid maybe six dollars a day, what has happened here isthat youve taken a large amount of money away from an American worker, givena tiny fraction, like a few percent, to a Mexican worker and given back the rest tothe company. So if your goal is to raise the living standards of Mexican workersthis is a lousy way to do it
    It's interesting to see how the same phenomenon is going on in the copyrightindustry the same general idea. In the name of these workers who certainly deservesomething, you propose measures that give them a tiny bit and really mainly propup the power of corporations to control our lives
    If you're trying to replace a very good system, you have to work very hard tocome up with a better alternative. If you know that the present system is lousy, it'snot so hard to find a better alternative: the standard of comparison today is verylow. We must always remember that when we consider issues of copyright policy
    So i think ive said most of what i want to say. id like to mention that tomorrow is Phone-In Sick Day in Canada. Tomorrow is the beginning of a summitto finish negotiating the free trade area of the americas to try to extend corporate power throughout additional countries, and a big protest is being planned for
    Quebec. We've seen extreme methods being used to smash this protest. A lot of
    Americans are being blocked from entering Canada through the border that theyresupposed to be allowed to enter through at any time. On the flimsiest of excuses,a wall has been built around the center of quebec to be used as a fortress to keepprotesters out. We've seen a large number of different dirty tricks used againstpublic protest against these treaties. So whatever democracy remains to us aftergovernment powers have been taken away from democratically elected governorsand given to businesses and to unelected international bodies. whatever is left afterthat may not survive the suppression of public protest against it
    Ive dedicated seventeen years of my life to working on free software and alliedissues. I didnt do this because i think it's the most important political issue in theworld. I did it because it was the area where I saw I had to use my skills to do alot of good. But what's happened is that the general issues of politics have evolvedand the biggest political issue in the world today is resisting the tendency to givebusiness power over the public and governments. I see free software and the alliedquestions for other kinds of information that Ive been discussing today as one partof that major issue. So Ive indirectly found myself working on that issue. I hope Icontribute something to the effort
    5 april20,2001

==========第152页==========
    Chapter 22: Copyright and globalization
    147
    Question and Answer Session
    David Thorburn: We'll turn to the audience for questions and comments in amoment. But let me offer a brief general response. It seems to me that the strongestand most important practical guidance that Stallman offers us has two key elements. One is the recognition that old assumptions about copyright--old usages ofcopyright--are inappropriate they are challenged or undermined by the advent ofthe computer and computer networks. That may be obvious, but it is essential
    Second is the recognition that the digital era requires us to reconsider how wedistinguish and weigh forms of intellectual and creative labor. Stallman is surelright that certain kinds of intellectual enterprises justify more copyright protectionthan others. Trying to identify systematically these different kinds or levels ofcopyright protection seems to me a valuable way to engage with the problems forintellectual work posed by the advent of the computer
    But i think i detect another theme that lies beneath what stallman has been saing and that isnt really directly about computers at all, but more broadly aboutquestions of democratic authority and the power that government and corporationsincreasingly exercise over our lives. This populist and anti-corporate side to stallmans discourse is nourishing but also reductive, potentially simplifying. And itis also perhaps overly idealistic. For example, how would a novelist or a poet ora songwriter or a musician or the author of an academic textbook survive in thisbrave new world where people are encouraged but not required to pay authors? Inother words, it seems to me, the gap between existing practice and the visionarypossibilities Stallman speculates about is still immensely wide
    So I'll conclude by asking if Stallman would like to expand a bit on certain as-pects of his talk and, specifically, whether he has further thoughts about the way inwhich what we'll call traditional creators"would be protected under his copyrightsystem
    Richard M. Stallman: First of all, I have to point out that we shouldnt use theterm"protection" to describe what copyright does Copyright restricts people. Theterm"protection"is a propaganda term of the copyright-owning businesses. Theterm"protection" means stopping something from being somehow destroyed. Well,I dont think a song is destroyed if there are more copies of it being played more. Idont think that a novel is destroyed if more people are reading copies of it, either
    So I wont use that word. I think it leads people to identify with the wrong party
    Also, it's a very bad idea to think about "intellectual property for two reasons
    First. it prejudges the most fundamental question in the area. which is: How shouldthese things be treated and should they be treated as a kind of property? To usethe term"intellectual property" to describe the area is to presuppose the answer isyes that thats the way to treat things not some other way
    Second, it encourages over-generalization. Intellectual property is a catch-allfor several different legal systems with independent origins, such as copyrightspatents, trademarks, trade secrets, and some other things as well. They are almostcompletely different; they have nothing in common. But people who hear the termintellectual property"are led to a false picture where they imagine that theresa general principle of intellectual property that was applied to specific areas, so

==========第153页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    they assume that these various areas of the law are similar. This leads not only toconfused thinking about what is right to do, it leads people to fail to understandhat the law actually says, because they suppose that the copyright law and patentlaw and trademark law are similar, when, in fact, they are totally different
    So if you want to encourage careful thinking and clear understanding of what thelaw says, avoid the term"intellectual property. Talk about copyrights, or talk aboutpatents, or talk about trademarks, or whichever subject you want to talk about. Butdont talk about intellectual property. Opinion about intellectual property almosthas to be a foolish one. i dont have an opinion about intellectual property i haveopinions about copyrights, patents, and trademarks, and they 're different. I came tothem through different thought processes because those systems of law are totalldifferent
    Anyway, I made that digression, but it's terribly important
    So, let me now get to the point. Of course, we cant see now how well it wouldwork, whether it would work to ask people to pay money voluntarily to the authorsand musicians they love. One thing that' s obvious is that how well such a systemwould work is proportional to the number of people who are participating in thenetwork, and that number, we know, is going to increase by an order of magnitudeover a number of years. If we tried it today, it might fail, and that wouldnt proveanything because with ten times as many people participating, it might work
    The other thing is, we do not have this digital cash payment system; so we canreally try it today. You could try to do something a little bit like it. There areservices you can sign up for where you can pay money to someone--things like
    Pay Pal. But before you can pay anyone through Pay Pal, you have to go througha lot of rigmarole and give them personal information about you, and they collectrecords of whom you pay. Can you trust them not to misuse that?
    The dollar might not discourage you, but the trouble it takes to pay might discourage you. The whole idea of this is that it should be as easy as falling off alog to pay when you get the urge, so that there's nothing to discourage you exceptthe actual amount of money. And if thats small enough. why should it discourage you? We know, though, that fans can really love musicians, and we know thatencouraging fans to copy and redistribute the music has been done by some bandsthat were, and are, quite successful, like The grateful Dead. They didnt have anytrouble making a living from their music because they encouraged fans to tape itand copy the tapes. They didnt even lose their record sales
    We are gradually moving from the age of the printing press to the age of thecomputer network, but it's not happening in a day. People are still buying lots ofrecords, and that will probably continue for many years--maybe forever. As longas that continues, simply having copyrights that still apply to commercial sales ofrecords ought to do about as good a job of supporting musicians as it does today
    Of course, thats not very good but at least it won t get any worse

==========第154页==========
    Chapter 22: Copyright and globalization
    149
    Question: [A comment and question about free downloading and about Stephen
    Kings attempt to market one of his novels serially over the Web.
    RMS: Yes, it's interesting to know what he did and what happened. When I firstheard about that, I was elated. I thought, maybe he was taking a step towards aworld that is not based on trying to maintain an iron grip on the public. Then I sawthat he had actually written to ask people to pay. To explain what he did, he waspublishing a novel as a serial, by installments, and he said, " If I get enough money,
    I'lI release more. But the request he wrote was hardly a request It brow beat thereader. It said, "If you dont pay, then you're evil. And if there are too many of youwho are evil, then I'm just going to stop writing this
    Well, clearly that's not the way to make the public feel like sending you money
    You ve got to make them love you. not fear you
    Same Questioner: The details were that he required a certain percentage dontknow the exact percentage. around 90% sounds correct- - of people to send a certainamount of money which. i believe, was a dollar or two dollars or somewhere inthat order of magnitude. You had to type in your name and your email address andsome other information to get to download it and if that percentage of people wasnot reached after the first chapter he said that he would not release another chapte
    It was very antagonistic to the public downloading it
    0: Isnt the scheme where there's no copyright but people are asked to makevoluntary donations open to abuse by people plagiarizing?
    RMS: No. Thats not what I proposed. Remember, I'm proposing that thereshould be copyright covering commercial distribution and permitting only verbatimredistribution noncommercially. So anyone who modified it to put in a pointer to his
    Web site, instead of a pointer to the real authors Web site, would still be infringingthe copyright and could be sued exactly as he could be sued today
    Q: I see. So you're still imagining a world in which there is copyright?
    RMS: Yes. As I've said, for those kinds of works. I'm not saying that everythinshould be permitted. I'm proposing to reduce copyright powers, not abolish them
    Thorburn: I guess one question that occurred to me while you were speaking,
    Richard, and again now when you' re responding here to this question is why youdont consider the ways in which the computer itself eliminates the middlemenompletely--in the way that Stephen King refused to do-and might establishpersonal relationship
    RMS: Well, they can and, in fact, this voluntary donation is one way
    Thorburn: You think of that as not involving going through a publisher at all?RMS: Absolutely not. I hope it wont, you see, because the publishers exploit theauthors terribly. When you ask the publishers' representatives about this, they say,
    Well, yes, if an author or if a band doesnt want to go through us, they shouldntbe legally required to go through us. But, in fact, they're doing their utmost to setit up so that will not be feasible. For instance, theyre proposing restricted-copyingmedia formats, and in order to publish in these formats you'lI have to go through the
    6 Stephen King is a New York Times bestselling author who has written many books, most of which
    are in the category of horror. He attempted to sell a book online in a series of installments(youcould buy a chapter at a time), but he ended the service before finishing the book

==========第155页==========
    150
    Free Software, Free Society: Selected essays of richard m. stallman
    big publishers, because they wont tell anyone else how to do it. So theyre hopinfor a world where the players will play these formats, and in order to get anythinthat you can play on those players, it'l have to come through the publishers Soin fact, while there's no law against an author or a musician publishing directly, itwont be feasible. There's also the lure of maybe hitting it rich. They say, We'llpublicize you and maybe youll hit it as rich as the Beatles"(take your pick of somevery successful group), and of course only a tiny fraction of musicians are going tohave that happen. But they may be drawn by that into signing contracts that willlock them down forever
    Publishers tend to be very bad at respecting their contracts with authors. Forinstance, book contracts typically have said that if a book goes out of print, therights revert to the author, and publishers have generally not been very good aboutliving up to that clause. They often have to be forced. Well, what theyre startinto do now is use electronic publication as an excuse to say that it's never going outof print; so they never have to give the rights back. Their idea is, when the authorhas no clout, get him to sign up, and from then on he has no power; it's only thepublisher that has the power
    0: Would it be good to have free licenses for various kinds of works that protectfor every user the freedom to copy them in whatever is the appropriate way for thatkind of work?
    RMS: Well, people are working on this. But for non-functional works, one thindoesnt substitute for another Lets look at a functional kind of work--say, a wordprocessor. Well, if somebody makes a free word processor, you can use that; youdont need the non-free word processors. But I wouldn ' t say that one free songsubstitutes for all the non -free songs or that one free novel substitutes for all thenon-free novels. For those kinds of works, it's different. So what I think we simplyhave to do is to recognize that these laws do not deserve to be respected. It's notwrong to share with your neighbor, and if anyone tries to tell you that you cannotshare with your neighbor, you should not listen to him
    0: With regard to the functional works, how do you, in your own thinking bal-ance out the need for abolishing the copyright with the need for economic incen-tives in order to have these functional works developed?
    RMS: Well. what we see is. first of all. that this economic incentive is a lot lessnecessary than people have been supposing. Look at the free-software movement,where we have over 100,000 part-time volunteers developing free software. Walso see that there are other ways to raise money for this that are not based onstopping the public from copying and modifying these works. Thats the interestinglesson of the free software movement. Aside from the fact that it gives you a wayyou can use a computer and keep your freedom to share and cooperate with otherpeople, it also shows us that this negative assumption that people would never dothese things unless they are given special powers to force people to pay thnem issimply wrong. A lot of people will do these things. Then if you look at, saythe writing of monographs, which serve as textbooks in many fields of scienceexcept for the ones that are very basic, the authors are not making money out ofthat. We now have a free encyclopedia project which is, in fact, a commercialfree encyclopedia project, and it's making progress. We had a project for a GNu

==========第156页==========
    Chapter 22: Copyright and globalization
    151
    encyclopedia but we merged it into the commercial project when they adopted ourlicense. In January, they switched to the gnu Free Documentation License for allthe articles in their encyclopedia. So we said, "Well, let's join forces with themand urge people to contribute to them It's called nupedia, and you can find alinktoitifyoulookathttp://www.gnu.org/encyclopedia.Soherewe'veextendedthe community development of a free base of useful knowledge from software toencyclopedia. Im pretty confident now that in all these areas of functional work,we dont need that economic incentive to the point where we have to mess up theuse of these works
    Thorburn: Well, what about the other two categories Persons thoughts, andentertainment?
    RMS: For the other two classes of work, I dont know. I dont know whether peo-ple will someday write novels without worrying about whether they make moneyfrom it. In a post-scarcity society, I guess they would. Maybe what we need to doin order to reach the post-scarcity society is to get rid of the corporate control overthe economy and the laws. So, in effect, it's a chicken-or-the-egg problem, youknow. Which do we do first? How do we get the world where people dont have todesperately get money except by removing the control by business? And how canwe remove the control? I dont know, but thats why Im trying to propose first acompromise copyright system and, second, the voluntary payment supported by acompromise copyright system as a way to provide a revenue stream to the peoplewho write those works
    Q: How would you really expect to implement this compromise copyright systemunder the chokehold of corporate interests on American politicians due to theircampaign-finance system?
    RMS: It beats me. I wish I knew. It's a terribly hard problem. If i knew howto solve that problem, I would solve it and nothing in the world could make meprouder
    Q: How do you fight the corporate control? Because when you look at thesesums of money going into corporate lobbying in the court case, it is tremendousthink the DeCss (Decryption of Contents Scrambling System) case that you'retalking about is costing something like a million -and-a-half dollars on the defenseside. Lord knows what it's costing on the corporate side. Do you have any ideahow to deal with these huge sums of money
    RMS: I have a suggestion. If I were to suggest totally boycotting movies, I thinkpeople would ignore that suggestion. They might consider it too radical. So I wouldlike to make a slightly different suggestion which comes to almost the same thingin the end, and that is dont go to a movie unless you have some substantial reasonto think it's good. Now this will lead in practice to almost the same result as a totalboycott of Holly wood movies. In extension it's almost the same, but in intensionit's very different. Now I've noticed that many people go to movies for reasons thathave nothing to do with whether they think the movies are good. so if you changethat, if you only go to a movie when you have some substantial reason to think it'sgood, you' ll take away a lot of their money.
    Thorburn: One way to understand all of this discourse today, I think, is to recognize that whenever radical, potentially transforming technologies appear in society,

==========第157页==========
    152
    Free Software, Free Society: Selected essays of richard m. stallman
    theres a struggle over who controls them. We today are repeating what has happened in the past. So from this angle, there may not be a reason for despair, or evenpessimism, about what may occur in the longer run. But, in the shorter term, strugles over the control of text and images, over all forms of information are likely tobe painful and extensive. For example, as a teacher of media, my access to imageshas been restricted in recent years in a way that had never been in place before
    If I write an essay in which I want to use still images, even from films, they aremuch harder to get permission to use, and the prices charged to use those still im-ages are much higher--even when i make arguments about intellectual inquiry andthethe legal category of"fair use. So I think, in this moment of extended transformation, the longer-term prospects may, in fact, not be as disturbing as what'shappening in the shorter term but in any case. we need to understand the whole ofour contemporary experience as a renewed version of a struggle over the control oftechnological resources that is a recurring principle of Western society
    It's also essential to understand that the history of older technologies is itselfa complicated matter. The impact of the printing press in Spain, for example, isradically different from its impact in England or in france
    Q: One of the things that bothers me when I hear discussions of copyright is thatoften they start off with, We want a 180-degree change. We want to do away withany sorts of control. It seems to me that part of what lay under the three categoriesthat were suggested is an acknowledgement that there is some wisdom to copyright
    Some of the critics of the way copyright is going now believe that, in fact, it oughtto be backed up and function much more like patent and trademarks in terms of itsduration. I wonder if our speaker would comment on that as a strategy
    RMS: I agree that shortening the time span of copyright is a good idea. There isabsolutely no need in terms of encouraging publication for a possibility of copyrights' lasting as much as 150 years which, in some cases, it can under presentlaw. Now the companies were saying that a 75-year copyright on a work madefor hire was not long enough to make possible the production of their works. I'dlike to challenge those companies to present projected balance sheets for 75 yearsfrom now to back up that contention. What they really wanted was just to be ableto extend the copyrights on the old works, so that they can continue restricting theuse of them. But how you can encourage greater production of works in the 1920sby extending copyright today escapes me, unless they have a time machine somewhere Of course, in one of their movies, they had a time machine. So maybe thatswhat affected their thinking
    Q: Have you given thought to extending the concept of" fair use, "and are thereany nuances there that you might care to lay out for us?
    RMS: Well, the idea of giving everyone permission for noncommercial verbatimcopying of two kinds of works, certainly, may be thought of as extending what fairuse is. It's bigger than what's fair use currently. If your idea is that the public tradesaway certain freedoms to get more progress, then you can draw the line at variousdifferent places. Which freedoms does the public trade away and which freedomsdoes the public keep
    Q: To extend the conversation for just a moment, in certain entertainment fields,
    we havethe concept of a public presentation. So, for example, copyright does

==========第158页==========
    Chapter 22: Copyright and globalization
    153
    not prevent us from singing Christmas carols seasonally but it prevents the publicperformance. And I'm wondering if it might be useful to think about instead ofexpanding fair use to unlimited noncommercial verbatim copying, to somethinless than that but more than the present concept of fair use
    RMS: I used to think that that might be enough, and then napster convincedme otherwise because Napster is used by its users for noncommercial, verbatimredistribution. The Napster server, itself, is a commercial activity but the peoplewho are actually putting things up are doing so noncommercially, and they couldhave done so on their Web sites just as easily. The tremendous excitement about,interest in, and use of Napster shows that thats very useful. So Im convincednow that people should have the right to publicly, noncommercially redistributeverbatim copies of everything
    Q: One analogy that was recently suggested to me for the whole Napster questionwas the analogy of the public library. I suppose some of you who have heard the
    Napster arguments have heard this analogy. r'm wondering if you would commenton it. The defenders of people who say Napster should continue and there shouldntbe restrictions on it sometimes say something
    this: When folks go into the
    public library and borrow a book, theyre not paying for it, and it can be borroweddozens of times hundreds of time without any additional payment. why is napsterany different?
    RMS: Well, it's not exactly the same. But it should be pointed out that the pubfishers want to transform public libraries into pay-per-use, retail outlets. So theyreagainst public libraries
    Q: Can these ideas about copyright suggest any ideas for certain issues aboutpatent law such as making cheap, generic drugs for use in Africa?
    RMS: No, theres absolutely no similarity. The issues of patents are totally dif-ferent from the issues of copyrights. The idea that they have something to do witheach other is one of the unfortunate consequences of using the term " intellectualproperty"and encouraging people to try to lump these issues together because, asyouve heard, I've been talking about issues in which the price of a copy is not thecrucial thing. But what's the crucial issue about making alds drugs for Africa
    It's the price, nothing but the price.
    Now the issue i've been talking about arises because digital information technology gives every user the ability to make copies. Well, there's nothing giving usall the ability to make copies of medicines. I dont have the ability to copy somemedicine that Ive got. In fact, nobody does; thats not how theyre made. Thosemedicines can be made only in expensive centralized factories, whether they'regeneric drugs or imported from the U.s. Either way, theyre going to be made in asmall number of factories, and the issues are simply how much do they cost and arethey available at a price that people in Africa can afford
    So that 's a tremendously important issue but it's a totally different issue. Therejust one area where an issue arises with patents that is actually similar to these issuesof freedom to copy, and that is in the area of agriculture. Because there are certainpatented things that can be copies, more or less--namely, living things. They copythemselves when they reproduce It's not necessarily exact copying; they re-shufflethe genes. But the fact is, farmers for millennia have been making use of this

==========第159页==========
    154
    Free Software, Free Society: Selected essays of richard m. stallman
    capacity of the living things they grow to copy themselves. Farming is, basicallcopying the things that you grew, and you keep copying them every year. Whenplant and animal varieties get patented, when genes are patented and used in them,the result is that farmers are being prohibited from doing this
    There is a farmer in Canada who had a patented variety growing on his field andhe said, I didnt do that deliberately. The pollen blew, and the wind in those genesgot into my stock of plants. And he was told thatthat doesnt matter; he has todestroy them anywayIt was an extreme example of how much government canside with a monopolist
    So I believe that, following the same principles that I apply to copying things onyour computer, farmers should have an unquestioned right to save their seeds andbreed their livestock. Maybe you could have patents covering seed companies, butthey shouldnt cover farmers
    Q: There's more to making a model successful than just the licensing. Can youspeak to that?
    RMS: Absolutely. Well, you know, I don t know the answers. But part of whatbelieve is crucial for developing free, functional information is idealism. Peoplehave to recognize that it's important for this information to be free, that when theinformation is free, you can make full use of it. When it's restricted, you cant
    They have to recognize that the non-free information is an attempt to divide themand keep them helpless and keep them down. Then they can get the idea,"Letwork together to produce the information we want to use, so that it's not under thecontrol of some powerful person who can dictate to us what we can do
    This tremendously boosts [the development of the free software community]. Idon 't know how much it will work in various different areas but i think that in thearea of education, when you're looking for textbooks, I think i see a way it can bedone. There are a lot of teachers in the world, teachers who are not at prestigiousuniversities--maybe they're in high school; maybe they're in college where theydont write and publish a lot of things and theres not a tremendous demand forthem. But, a lot of them are smart. a lot of them know their subjects well andthey could write textbooks about lots of subjects and share them with the worldand receive a tremendous amount of appreciation from the people who will havelearned from them
    Q: Thats what I proposed. But the funny thing is, i do know the history ofeducation. Thats what I do-educational, electronic media projects. I couldntfind an example. do you know of one?
    RMS: No, I dont. I started proposing this free encyclopedia and learning resource a couple of years ago, and i thought it would probably take a decade to getthings rolling. now we already have an encyclopedia that is rolling. So things aregoing faster than I hoped. I think what's needed is for a few people to start writinsome free textbooks. Write one about whatever is your favorite subject or writefraction of one. Write a few chapters of one and challenge other people to write therest
    Q: Actually what I was looking for is something even more than that. Whatimportant in your kind of structure is somebody that creates an infrastructure to

==========第160页==========
    Chapter 19: Copyright and globalization in the age of Computer Networks 155
    which every body else can contribute. There isnt a K-through-12 infrastructure outthere in any place for a contribution for materials
    I can get information from lots of places but it's not released under free licenseso I can t use it to make a free textbook
    RMS: Actually, copyright doesnt cover the facts. It only covers the way itswritten. So you can learn a field from anywhere and then write a textbook and youcan make that textbook free. if you want
    Q: But I cant write by myself all the textbooks that a student needs going throughschool
    RMS: Well, it's true. And I didnt write a whole free operating system, either. Iwrote some pieces and invited other people to join me by writing other pieces. SoI set an example. I said, " I'm going in this direction. Join me and we'll get there
    And enough people joined in that we got there. So if you think in terms of, howam I going to get this whole gigantic job done, it can be daunting. So the point is,dont look at it that way. Think in terms of taking a step and realizing that afteryou've taken a step, other people will take more steps and, together, it will get thejob done eventually
    Assuming that humanity doesnt wipe itself out, the work we do today to producethe free educational infrastructure the free learning resource for the world will beuseful for as long as humanity exists. If it takes 20 years to get it done, so what
    So dont think in terms of the size of the whole job; think in terms of the piece thatyou're going to do. That will show people it can be done, so others will do otherpIeces

==========第161页==========
    156
    Free Software. Free Society Selected essays of richard M. stallman

==========第162页==========
    Chapter 20: Free Software: Freedom and Cooperation
    157
    20 Free Software: Freedom and Cooperation
    Introduction
    Mike Uretsky: I'm Mike Uretsky. I'm over at the Stern School of Business. Im alsoone of the Co-Directors of the center for Advanced Technology. And on behalf ofall of us in the Computer Science Department, I want to welcome you here. I wantto say a few comments, before I turn it over to Ed, who is going to introduce thespeaker
    The role of a university is a place to foster debate and to have interesting discussions. And the role of a major university is to have particularly interesting discussions. And this particular presentation, this seminar falls right into that mold. Ifind the discussion of open source particularly interesting. In a sense... [aaudience
    Richard M. stallman: I do free software. Open source is a different movement
    Audience laughs [applause
    Uretsky: When I first started in the field in the 1960s, basically software was free
    And we went in cycles. It became free, and then software manufacturers, in theneed to expand their markets, pushed it in other directions. A lot of the developments that took place with the entry of the pc moved in exactly the same kind of acle
    oThere's a very interesting French philosopher, Pierre Levy, who talks aboutmovement to this direction and who talks about the move into cyberspace as notonly relating to technology but also relating to social restructuring, to political restructuring, through a change in the kinds of relationships that will improve thewell-being of mankind. And we're hoping that this debate is a movement in thatdirection, that this debate is something that cuts across a lot of the disciplines thatnormally act as solace within the University. Were looking forward to some veryinteresting discussions. Ed?
    Ed Schonberg: I'm Ed Schonberg from the Computer Science Department at the
    Courant Institute. Let me welcome you all to this event. Introducers are usuallyand particularly, a useless aspect of public presentations, but in this case, actually,they serve a useful purpose, as Mike easily demonstrated, because an introducerfor instance, by making inaccurate comments, can allow Ithe speaker] to straightenout and correct and [audience laughs sharpen considerably the parameters of thedebate
    This is an edited transcript of a speech given at New York University on May 29, 2001. This tran
    script is part of Free Software, Free Society: Selected Essays of richard M. stallman, 2nd ed (Boston: GNU Press, 2004), ISBN I882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第163页==========
    158
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    So let me make the briefest possible introduction to somebody who doesnt needone. Richard is the perfect example of somebody who, by acting locally, startedthinking globally-from problems concerning the unavailability of source code forprinter drivers at the M.I.T. AI Lab many years ago. He has developed a coherentphilosophy that has forced all of us to reexamine our ideas of how software isproduced, of what intellectual property means, and what the software communityactually represents. Let me welcome Richard Stallman. [applause
    Free Software: Freedom and Cooperation
    Richard M. Stallman: Can someone lend me a watch? audience laughs Thankyou. So, I'd like to thank microsoft for providing me the opportunity to audiencelaughs] be on this platform. For the past few weeks, I have felt like an author whosebook was fortuitously banned somewhere. audience laughs Except that all thearticles about it are giving the wrong authors name, because Microsoft describesthe gnu GPl as an open source license, and most of the press coverage followedsuit. Most people, of course just innocently don t realize that our work has nothingto do with open source, that in fact we did most of it before people even coined theterm“ open source.
    We are in the free software movement, and i,m going to speak about what thefree software movement is about, what it means what we have done. and, becausethis is partly sponsored by a school of business, I'll say some things more than Iusually do about how free software relates to business, and some other areas ofsocial life
    Now, some of you may not ever write computer programs but perhaps you cook
    And if you cook, unless you're really great, you probably use recipes. And if youuse recipes, you've probably had the experience of getting a copy of a recipe from afriend who's sharing it. and you've probably also had the experience-unless yourea total neophyte-of changing a recipe. It says certain things, but you dont have todo exactly that. You can leave out some ingredients. Add some mushrooms, causeyou like mushrooms. Put in less salt because your doctor said you should cut downon salt-whatever. You can even make bigger changes, according to your skill
    And if you ve made changes in a recipe, and you cook it for your friends, and theylike it, one of your friends might say, " Hey, could I have the recipe?"And then,what do you do? You could write down your modified version of the recipe andmake a copy for your friend. These are the natural things to do with functionallyuseful recipes of any kind
    Now a recipe is a lot like a computer program. A computer program is a lot lika recipe: a series of steps to be carried out to get some result that you want. Soit's just as natural to do those same things with computer programs-hand a copy toyour friend. Make changes in it because the job it was written to do isnt exactlwhat you want. It did a great job for somebody else, but your job is a different job
    And, after you've changed it, that is likely to be useful for other people. Maybe
    Less than a month before, Microsoft vice president Craig Mundie gave a speech attacking freesoftware( calling it“ open Source”)

==========第164页==========
    Chapter 20: Free Software: Freedom and Cooperation
    159
    they have a job to do thats like the job you do. So they ask, "Hey, can I have acopy? "Of course, if you're a nice person, you're going to give a copy. Thats the
    to be a decent
    So imagine what it would be like if recipes were packaged inside black boxes
    You couldnt see what ingredients theyre using, let alone change them, and imagine if you made a copy for a friend, they would call you a pirate and try to putyou in prison for years. That world would create tremendous outrage from all thepeople who are used to sharing recipes. But that is exactly what the world of pro-prietary software is like. A world in which common decency towards other peopleis prohibited or prevented
    Now, why did I notice this? I noticed this because i had the good fortune in the1970's to be part of a community of programmers who shared software. Now, thiscommunity could trace its ancestry essentially back to the beginning of computing
    In the 1970s, though, it was a bit rare for there to be a community where peopleshared software, And in fact this was sort of an extreme case. because in the labwhere I worked, the entire operating system was software developed by the peoplein our community and we'd share any of it with any body. any body was welcometo come and take a look, and take away a copy, and do whatever he wanted to do
    There were no copyright notices on these programs. Cooperation was our way oflife. And we were secure in that way of life. we didnt fight for it. We didnthave to fight for it. We just lived that way. And, as far as we knew, we would justkeep on living that way. So there was free software, but there was no free softwaremovement
    But then our community was destroyed by a series of calamities that happened toit. Ultimately it was wiped out. Ultimately, the PDP-10 computer, which we usedfor all our work, was discontinued. Our system-the Incompatible Timesharing
    System-was written starting in the 60s, so it was written in assembler language
    Thats what you used to write an operating system in the 60s. So, of courseassembler language is for one particular computer architecture; if that gets discon-tinued, all your work turns into dust--it's useless. And thats what happened to us
    The 20 years or so of work of our community turned into dust
    But before this happened, I had an experience that prepared me, helped me see
    a certain point, Xerox gave the Artificial Intelligence Lab, where I worked, a.pThat to do, helped prepare me to see what to do when this happened, because
    printer,and this was a really handsome gift, because it was the first time anyou
    outside Xerox had a laser printer. It was very fast, printed a page a second, verfine in many respects, but it was unreliable, because it was really a high-speedoffice copier that had been modified into a printer. And, you know, copiers jambut theres somebody there to fix them. The printer jammed and nobody saw. So itstayed jammed for a long time
    Well. we had an idea for how to deal with this problem change it so that when-ever the printer gets a jam, the machine that runs the printer can tell our timesharinmachine, and tell the users who are waiting for printouts, go fix the printer-because
    Programmed Data Processor model 10, a mainframe computer used by many top research andgovernment organizations in the 1970

==========第165页==========
    160
    Free Software, Free Society: Selected essays of richard m. stallman
    if they only knew it was jammed. of course, if you're waiting for a printout andyou know that the printer is jammed, you dont want to sit and wait forever, you'regoing to go fix it
    But at that point, we were completely stymied, because the software that ran thatprinter was not free software. It had come with the printer, and it was just a binar
    We couldnt have the source code. Xerox wouldnt let us have the source code
    So, despite our skill as programmers -after all, we had written our own timesharinsystem-we were completely helpless to add this feature to the printer software
    And we just had to suffer with waiting. It would take an hour or two to get yourprintout because the machine would be jammed most of the time. Youd wait anhour figuring "I know it's going to be jammed. I'll wait an hour and go collectmy printout, "and then youd see that it had been jammed the whole time, andin fact, nobody else had fixed it. So you'd fix it and you' d go wait another halfhour. Then, you'd come back, and you'd see it jammed again-before it got to youroutput. It would print three minutes and be jammed thirty minutes. Frustration upthe whazzoo. But the thing that made it worse was knowing that we could havfixed it, but somebody else, for his own selfishness, was blocking us, obstructinus from improving the software. So of course we felt some resentment
    And then I heard that somebody at Carnegie Mellon University had a copy ofthat software. i was visiting there later so i went to his office and i said. mhi.imfrom MIT. Could I have a copy of the printer source code? And he said "No, Ipromised not to give you a copy. "[audience laughs] I was stunned. I was So-I wasangry, and I had no idea how I could do justice to it. All I could think of was to turnaround on my heel and walk out of his room. Maybe i slammed the door. audiencelaughs and i thought about it later on because i realized that i was seeing not justan isolated jerk, but a social phenomenon that was important and affected a lot of
    ple
    peop
    I was lucky, I only got a taste of it. Other people had to live with this all thetime. So I thought about it at length. See, he had promised to refuse to cooperatewith us-his colleagues at MIT. He had betrayed us. but he didnt just do it tous. Chances are he did it to you too [Pointing at member of audience]. And Ithink, mostly likely, he did it to you too. Pointing at another member of audiencedience laughs And he probably did it to you as well Pointing to third memberof audience]. He probably did it to most of the people here in this room-except afew maybe who werent born yet in 1980. because he had promised to refuse tocooperate with just about the entire population of the planet Earth. He had signeda non-disclosure agreement
    Now, this was my first direct encounter with a non-disclosure agreement, andit taught me an important lesson-a lesson that 's important because most programmers never learn it. This was my first encounter with a non-disclosure agreement,and i was the victim. I, and my whole lab were the victims. And the lesson ittaught me was that non-disclosure agreements have victims. They're not innocent
    They're not harmless. Most programmers first encounter a non-disclosure agreement when theyre invited to sign one. And there's always some temptation-somegoody they're going to get if they sign. So, they make up excuses. They say, "Well,he's never going to get a copy no matter what, so why shouldnt I join the conspir

==========第166页==========
    Chapter 20: Free Software: Freedom and Cooperation
    161
    acy to deprive him? They say, "This is the way it's always done. Who am I to goagainst it?" They say, "If I dont sign this, someone else will. "Various excuses togag the
    But when somebody invited me to sign a non-disclosure agreement, my conscience was already sensitized. I remembered how angry I had been when somebody promised not to help me and my whole lab solve our problem. And I couldntturn around and do the exact same thing to somebody else who had never done meany harm. If somebody asked me to promise not to share some useful informationwith a hated enemy, I would have said yes. If somebody's done something bad, hedeserves it. But strangers-they havent done me any harm. How could they deservethat kind of mistreatment? You cant let yourself start treating just any body and everybody badly. Then you become a predator on society. So I said, "Thank youvery much for offering me this nice software package. But I cant accept it in goodconscience, on the conditions you are demanding, so I will do without it. Thankyou so much. And so, I have never knowingly signed a non-disclosure agreementfor generally useful technical information such as software
    Now there are other kinds of information which raise different ethical issues
    For instance. theres personal information. If you wanted to talk with me aboutwhat was happening between you and your boyfriend, and you asked me not to tellanybody-I could agree to keep that a secret for you, because thats not generallyuseful technical information
    At least, it's probably not generally useful [audience laughs ]. There is a smallchance-and it's a possibility though-that you might reveal to me some marvelousnew sex technique, Audience laughs] and I would then feel a moral duty audiencelaughs] to pass it on to the rest of humanity, so that everyone could get the benefitof it. So, Id have to put a proviso in that promise
    If it's just details about who wants this, and who's angry at whom, and thingslike that soap opera. that I can keep private for you; but something that humanitycould tremendously benefit from knowing, I mustnt withhold. You see, the purposeof science and technology is to develop useful information for humanity to helppeople live their lives better. If we promise to withhold that information-if wekeep it secret-then we are betraying the mission of our field. And this, I decided, Ishouldn’tdo
    But meanwhile my community had collapsed, and that left me in a bad situation
    You see, the whole Incompatible Timesharing System was obsolete, because thePDP-10 was obsolete, and so there was no way that i could continue working asan operating system developer the way that I had been doing it. That dependedon being part of the community, using the communitys software and improving it
    That no longer was a possibility and that gave me a moral dilemma. what was Igoing to do? Because the most obvious possibility meant to go against that decisionI had made. The most obvious possibility was to adapt myself to the change in theworld. To accept that things were different, and that Id just have to give up thoseprinciples and start signing non-disclosure agreements for proprietary operatingsystems, and most likely writing proprietary software as well. But I realized thatthat way I could have fun coding, and I could make money-especially if I did itother than at MiT-but at the end, Id have to look back at my career and say, "Tve

==========第167页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    spent my life building walls to divide people, "and I would have been ashamed ofmy life
    So I looked for another alternative. and there was an obvious one. i could leavthe software field and do something else. Now I had no other special noteworthyskills, but Im sure I could have become a waiter. [audience laughs] Not at a fancyrestaurant; they wouldnt hire me, audience laughs but I could be a waiter somewhere. And many programmers, they say to me, "The people who hire programmers demand this, this, and this. If i dont do those things, I'll starve " It's literallythe word they use. Well, as a waiter, you're not going to starve. audience laughs
    So, really, they're in no danger. But-and this is important, you see-sometimes youcan justify doing something that hurts other people by saying otherwise somethingworse is going to happen to me. If you were really going to starve, you'd be justified in writing proprietary software. Audience laughs] If somebodys pointing agun at you, then I would say, it's forgivable. [audience laughs But I had founda way that I could survive without doing something unethical, so that excuse wasnot available. I realized, though, that being a waiter would be no fun for me, andit would be wasting my skills as an operating system developer. It would avoidmisusing my skills Developing proprietary software would be misusing my skills
    Encouraging other people to live in the world of proprietary software would bemisusing my skills. So it's better to waste them than misuse them, but it's still notreally good
    So for those reasons . i decided to look for some other alternative. what can anoperating system developer do that would actually improve the situation, make theworld a better place? And i realized that an operating system developer was exactlwhat was needed. The problem. the dilemma, existed for me and for everyoneelse because all of the available operating systems for modern computers wereproprietary. The free operating systems were for old, obsolete computers, right?
    So for the modern computers-if you wanted to get a modern computer and use ityou were forced into a proprietary operating system. So If an operating systemdeveloper wrote another operating system, and then said, "Everybody come andshare this; you're welcome to this"that would give everybody a way out of thedilemma. another alternative. So i realized that there was something i could do thatwould solve the problem. I had just the right skills to be able to do it. And it wasthe most useful thing I could possibly imagine that Id be able to do with my life
    And it was a problem that no one else was trying to solve It was just sort of sittingthere, getting worse, and nobody was there but me. So I felt, "Im elected I haveto work on this. If not me, who? So i decided I would develop a free operatingsystem, or die trying.of old age, of course. audience laughs
    Of course I had to decide what kind of operating system it should be. Thereare some technical design decisions to be made. I decided to make the systemcompatible with Unix for a number of reasons. First of all, I had just seen oneoperating system that I really loved become obsolete because it was written for oneparticular kind of computer. I didnt want that to happen again. We needed to havea portable system. Well, Unix was a portable system. So if I followed the designof Unix, I had a pretty good chance that I could make a system that would alsobe portable and workable. And furthermore, why not be compatible with it in the

==========第168页==========
    Chapter 20: Free Software: Freedom and Cooperation
    163
    details. The reason is, users hate incompatible changes. If i had just designed thesystem in my favorite way-which I would have loved doing, Im sure-I would haveproduced something that was incompatible. The details would be different. So, ifI wrote the system, then the users would have said to me, Well, this is very nicebut it's incompatible. It will be too much work to switch. We cant afford thatmuch trouble just to use your system instead of Unix, so we'll stay with Unixthey would have said
    Now, if I wanted to actually create a community where there would be peoplin it, people using this free system and enjoying the benefits of liberty and cooperation, I had to make a system people would use, a system that they would findeasy to switch to, that would not have an obstacle making it fail at the very beginning. Now, making the system upward compatible with Unix actually made allthe immediate design decisions, because Unix consists of many pieces, and theycommunicate through interfaces that are more or less documented. so if you wantto be compatible with Unix, you have to replace each piece, one by one, with acompatible piece. So the remaining design decisions are inside one piece, and theycould be made later by whoever decides to write that piece. They didnt have to bemade at the outset
    All we had to do to start work was find a name for the system. Now, we hackersalways look for a funny or naughty name for a program, because thinking of peoplebeing amused by the name is half the fun of writing the program. [audience laughs
    And we had a tradition of recursive acronyms, to say that the program that you'rewriting is similar to some existing program. You can give it a recursive acronymname that says: this ones not the other. So, for instance, there were many Ticotext editors in the 60s and 70s, and they were generally called something-orother teco. then one clever hacker called his tint for Tint is not teco-thefirst recursive acronym. In 1975, I developed the first Emacs text editor, and therewere many imitations of Emacs, and a lot of them were called something-or-other
    Emacs. but one was called Fine for fine is not emacs and there was sine for
    Sine is not emacs. and eine for eine is not emacs and mince for mince Is not
    Complete Emacs. Audience laughs](That was a stripped-down imitation. Andhen Eine was almost completely rewritten, and the new version was called Zwei,for Zwei Was Eine Initially. audience laughs
    So, I looked for a recursive acronym for Something is not Unix. And I triedall 26 letters, and discovered that none of them was a word. audience laughs]
    Hmm, try another way. I made a contraction That way i could have a three-letteracronym. for Something's not Unix. And i tried letters and i came across theword"GNU "the word "GNU" is the funniest word in the English languageaudience laughs That was it. Of course. the reason it's funny is that accordingto the dictionary, its pronounced "new. Thats why people use it for a lot ofwordplay. Let me tell you, this is the name of an animal that lives in Africa. And theAfrican pronunciation had a click sound in it. Audience laughs] Maybe still does
    And So, the European colonists, when they got there, they didnt bother learninto say this click sound. So they just left it out, and they wrote a 'g which meant
    3 Eine and Zwei mean one and two in German respectivel

==========第169页==========
    164
    Free Software, Free Society: Selected essays of richard m. stallman
    theres another sound that s supposed to be here which we are not pronouncing
    Audience laughs] So, tonight Im leaving for South Africa, and I have begged them,I hope they're going to find somebody who can teach me to pronounce click sounds,audience laughs] so that I'll know how to pronounce gnu the correct way, whenit's the animal
    But, when it's the name of our system, the correct pronunciation is "guhNEW"pronounce the hard ',. If you talk about the "new" operating system,you'lI get people very confused, because we've been working on it for 17 yearsnow,so it is not new any more. Audience laughs] But it still is, and always will be,GNU-no matter how many people call it Linux by mistake. Audience laughs
    So, in January 1984, I quit my job at mit to start writing pieces of gnu. Theywere nice enough to let me keep using their facilities though. At the time, I thoughte would write all these pieces, and make an entire GNu system, and then we'dsay, "Come and get it, "and people would start to use it. Thats not what happened
    The first pieces I wrote were just equally good replacements, with fewer bugs, forsome pieces of Unix, but they werent tremendously exciting. Nobody particularlywanted to get them and install them. But then, in September 1984, I started writinGNU Emacs, which was my second implementation of Emacs, and by early 1985it was working. I could use it for all my editing, which was a big relief, because Ihad no intention of learning to use vi, the Unix editor. [audience laughs] So, untilthat time, I did my editing on some other machine, and saved the files through thenetwork so that I could test them but when gnu Emacs was running well enoughfor me to use it, it was also-other people wanted to use it too
    So, I had to work out the details of distribution. Of course, I put a copy in theanonymous FtP directory, and that was fine for people who were on the net-theycould just pull over a tar file, but even a lot of programmers were not on the netin 1985. They were sending me email saying "How can I get a copy? "I had todecide what I would answer them. Well, i could have said: "I want to spend mytime writing more GNU software, not writing tapes, so please find a friend whoson the Internet and who is willing to download it and put it on a tape for you, "andI'm sure people would have found some friends, sooner or later. They would havegot copies
    But I had no job. In fact, I've never had a job since quitting MIT in January
    984. So I was looking for some way I could make money through my work onfree software. and therefore i started a free software business. i announced. Sendme 150 dollars, and I'll mail you a tape of emacs. And the orders began dribblinin. By the middle of the year they were trickling in
    I was getting 8 to 10 orders a month. And, if necessary, I could have lived onjust that, because I've always lived cheaply. I live like a student, basically. And Ilike that, because it means that money is not telling me what to do. I can do whatI think is important for me to do. It freed me to do what seemed worth doing. Somake a real effort to avoid getting sucked into all the expensive lifestyle habits of
    You can read the original announcement of the gnu project in The gnu Manifesto
    5 A Unix archiving program. Combined with gzip, it makes the gnu alternative to the non-free ZIP
    compression format

==========第170页==========
    Chapter 20: Free Software: Freedom and Cooperation
    165
    typical Americans. Because if you do that(50), then people with the money willdictate what you do with your life. You wont be able to do what's really important
    So that was fine, but people used to ask me, "What do you mean it's free softwareif it costs 150 dollars?"audience laughs] Well, the reason they asked this was thatthey were confused by the multiple meanings of the english word "free. " Onemeaning refers to price, and another meaning refers to freedom. When I speak offree software, Im referring to freedom, not price. So think of free speech, not freebeer. [audience laughs] Now, I wouldn t have dedicated so many years of my life tomaking sure programmers got less money. Thats not my goal. I'm a programmerand I don' t mind getting money myself. I wont dedicate my whole life to gettingit, but I dont mind getting it. Therefore-since ethics is the same for everyone-I'mnot against some other programmer getting money either. I dont want prices to below. That's not the issue at all. The issue is freedom Freedom for everyone whosusing software, whether that person be a programmer or not
    Definitions
    At this point i should give you the definition of free software. I'd better get tosome real details, because just saying "I believe in freedom"is vacuous. There areso many different freedoms you could believe in, and they conflict with each other,so the real political question is: Which are the important freedoms, the freedomsthat we must make sure everybody has
    ow, I will give my answer to that question for the particular area of using software. A program is"free software"for you, a particular user, if you have thefollowing freedoms
    First, Freedom Zero is the freedom to run the program for any purpose, anyway you like
    Freedom One is the freedom to help yourself by changing the program to suityour needs
    Freedom Two is the freedom to help your neighbor by distributing copies ofthe program
    ing an improved version so others can get the benefit of your work. publishAnd Freedom Three is the freedom to help build your community by
    If you have all of these freedoms, the program is free software, for you-and thatscrucial. Thats why I phrase it that way. I'll explain why later, when I talk aboutthe gnu General Public License, but right now I,'m explaining what free softwaremeans, which is a more basic question
    FreedomZero
    Freedom Zero is pretty obvious. If you're not even allowed to run the programany way you like, it is a pretty damn restrictive program. But as it happens, mostprograms will at least give you Freedom Zero. And Freedom Zero follows, legally,as a consequence of Freedoms One, Two, and Three-that's the way that copyright

==========第171页==========
    166
    Free Software, Free Society: Selected essays of richard m. stallman
    law works. So the freedoms that distinguish free software from typical softwareare Freedoms One, Two, and Three, so I'll say more about them and why they are
    Important
    Freedom one
    Freedom One is the freedom to help yourself by changing the software to suityour needs. This could mean fixing bugs. It could mean adding new features. Itcould mean porting it to a different computer system. It could mean translating allthe error messages into Navajo. Any change you want to make, you should be freeto make
    Now, it's obvious that professional programmers can make use of this freedomvery effectively, but not just them. Anybody of reasonable intelligence can learn alittle programming. There are hard jobs, and there are easy jobs, and most peopleare not going to learn enough to do hard jobs. But lots of people can learn enoughto do easy jobs, just the way 50 years ago, lots and lots of American men learnedto repair cars, which is what enabled the U.s. to have a motorized army in World
    War lI and win. It is very important to have lots of people tinkering
    And if you are a people person, and you really dont want to learn technology atall, that probably means that you have a lot of friends, and you're good at gettingthem to owe you favors. audience laughs] Some of them are probably program
    So you can ask one of your programmer friends. "Would you please change
    this for me? Add this feature? So. lots of people can benefit from it
    ow,if you dont have this freedom, it causes practical, material harm to society
    It makes you a prisoner of your software. I explained what that was like with regardto the laser printer It worked badly for us, and we couldn t fix it because we wereprisoners of our software
    But it also affects peoples morale. If the computer is constantly frustrating touse,and people are using it, their lives are going to be frustrating, and if theyreusing it in their jobs, their jobs are going to be frustrating; they're going to hatetheir jobs. And you know, people protect themselves from frustration by decidinnot to care. So you end up with people whose attitude is, "Well, I showed up forwork today. Thats all I have to do. If I cant make progress, thats not my problem;that's the boss's problem. And when this happens it's bad for those people, andit's bad for society as a whole. Thats Freedom One, the freedom to help yourself
    Freedom two
    Freedom Two is the freedom to help your neighbor by distributing copies of thprogram. Now, for beings that can think and learn, sharing useful knowledge is afundamental act of friendship When these beings use computers, this act of friendship takes the form of sharing software. Friends share with each other. Friends helpeach other. This is the nature of friendship. And, in fact, this spirit of goodwill-thespirit of helping your neighbor, voluntarily-is societys most important resource. Itmakes the difference between a livable society and a dog-eat-dog jungle. Its impor-

==========第172页==========
    Chapter 20: Free Software: Freedom and Cooperation
    167
    tance has been recognized by the world's major religions for thousands of yearsand they explicitly try to encourage this attitude
    When I was going to kindergarten, the teachers were trying to teach us thisattitude-the spirit of sharing-by having us do it. They figured if we did it, we'dlearn. So they said, "If you bring candy to school, you cant keep it all for yourself; you have to share some with the other kids. The society was set up to teachthis spirit of cooperation. And why do you have to do that? Because people arenot totally cooperative. Thats one part of human nature, and there are other partsof human nature. There are lots of parts of human nature. So, if you want a bettersociety, you've got to work to encourage the spirit of sharing. It'lI never get to be100%6. Thats understandable. People have to take care of themselves too. but ifwe make it somewhat bigger. were all better off
    Nowadays, according to the U.s. Government, teachers are supposed to do theexact opposite. "Oh, Johnny, you brought software to school. Well, dont shareit. Oh no. Sharing is wrong. Sharing means you're a pirate. What do they meanwhen they say pirate "? Theyre saying that helping your neighbor is the moralequivalent of attacking a ship. audience laughs]
    What would Buddha or Jesus say about that? Now, take your favorite religiousleader. I don t know, maybe Manson would have said something different. [audience laughs] Who knows what L Ron Hubbard would say? But
    Question: [Inaudible
    Richard M. stallman: Of course, he's dead but they dont admit that. what?
    son's also dead. audience laughs] Theyre dead, Jesus is dead, Buddha is dead n-Question: So are the others, also dead. [audience laughs] [Inaudible] Charles mar
    RMS: Yes, thats true. [audience laughs] so i guess, in that regard, L Ron Hubbardis no worse than the others. [audience laughs] Anyway -[Inaudible
    Question: L. Ron always used free software -it freed him from Zanu. [audienceaught
    RMS: Anyway, I think this is the most important reason why software should befree: we cant afford to pollute society's most important resource. It's true that it'snot a physical resource like clean air and clean water. It's a psycho-social resource,but it's just as real for all that, and it makes a tremendous difference to our lives
    The actions we take influence the thoughts of other people. when we go aroundtelling people, "Dont share with each other, "if they listen to us, we've had aneffect on society, and it's not a good one. Thats Freedom Two, the freedom to helpyour neighbor
    Oh, and by the way, if you dont have that freedom, it doesnt just cause this harmto societys psycho-social resource, it also causes waste-practical, material harm
    If the program has an owner, and the owner arranges a state of affairs where eachuser has to pay in order to be able to use it, some people are going to say, " Nevermind, I'll do without it. "And thats waste, deliberately inflicted waste. And theinteresting thing about software, of course, is that fewer users doesn t mean youhave to make less stuff. If fewer people buy cars, you can make fewer cars. There'sa saving there there are resources to be allocated or not allocated. into making
    So that you can say that having a price on a car is a good thing. It preventspeople from diverting lots of wasted resources into making cars that arent really

==========第173页==========
    168
    Free Software, Free Society: Selected essays of richard m. stallman
    needed. But if each additional car used no resources, it wouldnt be doing any goodsaving the making of these cars. Well, for physical objects, of course, like cars, it isalways going to take resources to make an additional one of them, each additionalexemplar.
    But for software thats not true. Anybody can make another copy. And it'salmost trivial to do it It takes no resources except a tiny bit of electricity. Soneres nothing we can save, no resource we're going to allocate better by puttingthis financial disincentive on the use of the software. You often find people takingthe consequences of economic reasoning, based on premises that dont apply tosoftware, and trying to transplant them from other areas of life where the premisesmay apply, and the conclusions may be valid. They just take the conclusions andassume that they're valid for software too, when the argument is based on nothingin the case of software. The premises dont work in that case. It is very importantto examine how you reach the conclusion, and what premises it depends on, tosee where it might be valid. So, that is Freedom Two, the freedom to help yourneighbor.
    Freedom Three
    Freedom Three is the freedom to help build your community by publishing animproved version of the software. People used to say to me, "If the software's freethen nobody will get paid to work on it, so why should anybody work on it? " Well,of course, they were confusing the two meanings of free, so their reasoning wasbased on a misunderstanding but in any case that was their theory. today, wecan compare that theory with empirical fact, and we find that hundreds of peopleare being paid to write free software, and over 100,000 are doing it as volunteers
    We get lots of people working on free software, for various different motives
    When I first released gnu Emacs-the first piece of the gnu system that peo-ple actually wanted to use-and when it started having users, after a while, I got amessage saying. "i think i saw a bug in the source code. and heres a fix. " Andgot another message, "Heres code to add a new feature. And another bug fix
    And another new feature. And another, and another, and another, until they werepouring in on me so fast that just making use of all this help i was getting was a bigjob. Microsoft doesnt have this problem. audience laughs
    Eventually, people noted this phenomenon. In the 1980s a lot of us thoughtthat maybe free software wouldnt be as good as the non-free software becausee wouldnt have as much money to pay people. And of course people like mewho value freedom and community, said, "Well, we'll use the free software anyway. It's worth making a little sacrifice in some mere technical convenience tohave freedom. But what people began to note, around 1990, was that our softwarewas actually better. It was more powerful, and more reliable, than the proprietaryalternatives
    In the early 90s somebody found a way to do a scientific measurement ofreliability of software. Here's what he did. He took several sets of comparableprograms that did the same jobs-the exact same jobs-in different systems. Becausethere were certain basic Unix-like utilities. And the jobs that they did were more

==========第174页==========
    Chapter 20: Free Software: Freedom and Cooperation
    169
    same in terms of what Jobs they did; but they were maintained by different peole cor less the same thing-or they were following the PosiX spec-so they were all thd written separately. The code was different. So they said, OK, we'll take theprograms and run them with random data, and measure how often they crash orhang. So they measured it, and the most reliable set of programs was the gNuprograms. All the commercial alternatives, which were proprietary software, wereless reliable. So he published this and he told all the developers. a few years laterhe did the same experiment with the newest versions, and he got the same result
    The gnu versions were the most reliable. You know there are cancer clinics and911 operations that use the gnU system, because it's so reliable, and reliability isvery important to them
    Anyway, theres even a group of people who focus on this particular benefit asthe main reason why users should be permitted to do these various things, and tohave these freedoms. If youve been listening to me, you've noticed that, speakingfor the free software movement i talk about issues of ethics and what kind of asociety we want to live in, what makes for a good society, as well as practical,material benefits. They're both important. Thats the free software movement
    That other group of people-which is called the open source movement--theyonly cite the practical benefits. They deny that this is an issue of principle. Theydeny that people are entitled to the freedom to share with their neighbor and to seewhat the programs doing and change it if they dont like it. They say, however,that it's a useful thing to let people do that. So they go to companies and say tothem, "You might make more money if you let people do this. " So, what you cansee is that to some extent, they lead people in a similar direction, but for totallydifferent-for fundamentally different philosophical reasons
    On the deepest issue of all, on the ethical question, the two movements disagree
    In the free software movement we say, "Youre entitled to these freedoms. Peopleshouldnt stop you from doing these things. " In the open source movement, theysay, Yes, they can stop you if they want, but we'll try to convince them to deignto let you to do these things "I Well they have contributed--they have convinced acertain number of businesses to release substantial pieces of software as free soft-ware in our community. The open source movement has contributed substantiallyto our community, and we work together [with them] on practical projects. Butphilosophically, there's a tremendous disagreement
    Unfortunately, the open source movement is the one that gets the support of business the most and so most articles about our work describe it as open source and alot of people just innocently think that were all part of the open source movement
    So that's why i'm mentioning this distinction i want you to be aware that the freesoftware movement, which brought our community into existence and developedthe free operating system. is still here-and that we still stand for this ethical philosophy. I want you to know about this, so that you wont mislead someone elseunknowingly
    But also, so that you can think about where you stand
    b In many areas of the United States 911 is the phone number for emergency help

==========第175页==========
    170
    Free Software, Free Society: Selected essays of richard m. stallman
    Which movement you support is up to you. You might agree with the free soft-ware movements and my views. You might agree with the open source movement
    You might disagree with them both. You decide where you stand on these political
    ISSues
    But if you agree with the free software movement-if you see that theres an issuehere that the people whose lives are controlled and directed by this decision deservea say in it-then I hope youll say that you agree with the free software movement,and one way you can do that is by using the term "free softwareand just helpingpeople know we exist
    So, Freedom Three is very important both practically and psycho-socially. Ifyou don t have this freedom it causes practical material harm, because this community development doesnt happen, and we don t make powerful, reliable soft-ware. But it also causes psycho-social harm, which affects the spirit of scientificcooperation -the idea that we're working together to advance human know ledge
    You see, progress in science crucially depends on people being able to work to-gether. Nowadays, though, you often find each little group of scientists acting as ifit is a war with each other gang of scientists and engineers. But if they dont sharewith each other, theyre all held back
    Clarifications
    So, those are the three freedoms that distinguish free software from typical software. Freedom One is the freedom to help yourself, by making changes to suityour own needs Freedom Two is the freedom to help your neighbor by distributincopies. And Freedom Three is the freedom to help build your community by mak-ing changes and publishing them for other people to use. If you have all of thesfreedoms, the program is free software for you. Now, why do i define it that wayin terms of a particular user? Is it free software for you? Pointing at member ofdience. Is it free software for you? Pointing at another member of audience.
    Is it free software for you?[Pointing at another member of audience. Y
    Question: Can you explain a bit about the difference between Freedom Two and
    Three? inaudible
    RMS: Well, they certainly relate, because if you dont have freedom to redistribute at all, you certainly don t have freedom to distribute a modified version, butthey're different activities
    Freedom Two is: you make an exact copy, and hand it to your friends, so nowyour friend can use it. Or maybe you make exact copies and you sell them tobunch of people, and then they can use it
    Freedom Three is where you make improvements-or at least you think theyreimprovements, and some other people may agree with you. So thats the difference. Oh, and by the way, one crucial point. Freedoms One and Three depend onyour having access to the source code. Because changing a binary-only programis extremely hard [audience laughs I-even trivial changes like using four digits for

==========第176页==========
    Chapter 20: Free Software: Freedom and Cooperation
    the date Audience laughs]--if you dont have source. So, for compelling, practical reasons, access to the source code is a precondition, a requirement, for free
    are
    Free Software For You
    So, why do i define it in terms of whether it's free software " for you "? Thereason is that sometimes the same program can be free software for some peopleand non-free for others. Now, that might seem like a paradoxical situation, so letme give you an example to show you how it happens. a very big example-maybethe biggest ever-of this problem was the X Window System, which was developedat MIT and released under a license that made it free software. If you got the mitversion with the mit license, you had Freedoms One, Two, and Three. It wasfree software for you. But among those who got copies were various computermanufacturers that distributed Unix systems, and they made the necessary changesin X to run on their systems. You know, probably just a few thousand lines out ofthe hundreds of thousands of lines of X. And then they compiled it, and they putthe binaries into their unix system and distributed it under the same non-disclosureagreement as the rest of the Unix system. And then millions of people got thesecopies. They had the x window system but they had none of these freedoms. Itas not free software for them
    So, the paradox was that whether X was free software depended on where youmade the measurement. If you made the measurement coming out of the developers' group, youd say, "I observe all these freedoms. It's free software. "If youmade the measurements among the users you 'd say Hmm. most users dont havethese freedoms. It's not free software "I Well. the people who developed x didntconsider this a problem, because their goal was just popularity-ego, essentially
    They wanted a big professional success. They wanted to feel, "Ah, lots of peo-ple are using our software. "And that was true. Lots of people were using theirsoftware but didn t have freedom
    Well, in the gnu Project, if that same thing had happened to gnu software,itwould have been a failure, because our goal wasnt just to be popular; our goal wasto give people liberty, and to encourage cooperation, to permit people to cooperate
    Remember, never force anyone to cooperate with any other person, but make surethat every bodys allowed to cooperate. everyone has the freedom to do so. if heor she wishes. If millions of people were running non-free versions of gnu, thatwouldnt be success at all. The whole thing would have been perverted into nothinlike the goa
    So, I looked for a way to stop that from happening. The method I came up withis called copyleft. It's called copy left because it's sort of like taking copyrightand tipping it over. Audience laughs] Legally, copyleft works based on copyright
    7 This refers to the "Y2K"problem in which many older programs stored the year in two digitstherefore it was unclear if the date 00was 2000 or 1900, or any other year ending in 00. Millionsof dollars were spent repairing this problem in thousands of computer systems before the year2000

==========第177页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    We use the existing copyright law, but we use it to achieve a very different goal
    Here's what we do. We say, "This program is copyrighted. And, of course, bydefault, that means it's prohibited to copy it, or distribute it, or modify it. But thenwe say, You're authorized to distribute copies of this. You're authorized to modifyit. You're authorized to distribute modified versions and extended versions changeit any way you like. "
    But there is a condition. And the condition, of course, is the reason why we go toall this trouble, so that we could put the condition in The condition says: Wheneveryou distribute anything that contains any piece of this program, that whole programmust be distributed under these same terms, no more and no less. So you canchange the program and distribute a modified version, but when you do, the peoplewho get that from you must get the same freedom that you got from us. And notjust for the parts of it that you copied from our program, but also for the other partsof that program that they got from you. The whole of that program has to be freesoftware for them
    The freedoms to change and redistribute this program become inalienable rightsa concept from the declaration of Independence. Rights that we make sure cantbe taken away from you. The specific license that embodies the idea of copy left isthe gnu General public license, a controversial license because it actually has thestrength to say no to people who would be parasites on our community
    There are lots of people who don t appreciate the ideals of freedom. And they'dbe very glad to take the work that we have done, and use it to get a head start indistributing a non-free program and tempting people to give up their freedom. Theresult would be--if we let people do that-that we would be developing these freeprograms, and we'd constantly have to compete with improved versions of our ownprograms. Thats no fun
    A lot of people also feel, "I' m willing to volunteer my time to contribute to thecommunity but why should i volunteer my time to contribute to improving thatcompany's proprietary program? Some people might not even think that thatsevil, but they want to get paid if theyre going to do that. I, personally, would rathernot do it at all
    But both of these groups of people-both the ones like me who say, "I dont wantto help that non-free program to get a foothold in our c
    unity and the ones
    that say, "Sure, Id work for them, but then they 'd better pay me "both of us havea good reason to use the gnu General Public License. Because that says to thatcompany, "You cant just take my work, and distribute it without the freedom
    Whereas, the non-copyleft licenses, like the X Windows license, do permit that
    So that is the big division between the two categories of free software, licensewise. There are the programs that are copylefted so that the license defends thefreedom of the software for every user. And there are the non-copylefted programsfor which non-free versions are allowed. somebody can take those programs andstrip off the freedom. You may get that program in a non-free version
    And that problem exists today. There are still non-free versions of X Windowsbeing used on our free operating systems. There is even hardware that is not reallysupported except by a non-free version of X Windows. And thats a major problemin our community. Nonetheless, I wouldnt say that X Windows is a bad thing. Id

==========第178页==========
    Chapter 20: Free Software: Freedom and Cooperation
    173
    say that the developers did not do the best possible thing that they could have done
    But they did release a lot of software that we could all use
    There's a big difference between less than perfect, and evil. There are manygradations of good and bad. We have to resist the temptation to say, if you didntdo the absolute best possible thing, then you're no good. The people that developed
    X Windows made a big contribution to our community. But theres somethingbetter that they could have done. They could have copylefted parts of the programand prevented those freedom-denying versions from being distributed by others
    Now, the fact that the GNU General Public license defends your freedom, usescopyright law to defend your freedom, is, of course, why Microsoft is attacking it today. See, Microsoft would really like to be able to take all the codethat we wrote and put it into proprietary programs, have somebody make someimprovements. or even just incompatible changes is all they need. [audiencelaughs
    With Microsofts marketing clout, they dont need to make it better to have theirversion supplant ours. They just have to make it different and incompatible. Andthen put it on everybodys desktop. So they really dont like the GNU GPL. Becausethe gnu gPl wont let them do that it doesn 't allow " embrace and extend. Itsays, if you want to share our code in your programs, you can. But you' ve got toshare and share alike. The changes that you make we have to be allowed to share
    So its a two-way cooperation, which is real cooperation
    Many companies-even big companies like IBM and HP-are willing to use oursoftware on this basis. IBM and hP contribute substantial improvements to gnusoftware. And they develop other free software But Microsoft doesnt want todo that, so they give it out that businesses just cant deal with the GPL. Well, ifbusinesses dont include IBM and HP and Sun, then maybe theyre right. [ audiencelaughs more about that later
    should finish the historical story. You see, we set out in 1984 not just to writesome free software but to do something much more coherent: to develop an operating system that was entirely free software. So that meant we had to write pieceafter piece after piece. Of course, we were always looking for shortcuts. The jobwas so big that people said we'd never be able to finish. I thought that there was atleast a chance that wed finish it but, obviously, it's worth looking for shortcuts. Sowe kept looking around. Is there any program that somebody else has written thatwe could manage to adapt, to plug into here, and that way we wont have to writeit from scratch? For instance, the x window system. It's true it wasnt copyleftedbut it was free software so we could use it
    Now, I had wanted to put a window system into gnu from day one. I wrotea couple of window systems at mit before I started Gnu. And so even though
    Unix had no window system in 1984.i decided that gnu would have one. Bute never ended up writing a gnu window system, because X came along. And Isaid: "Goody! One big job we dont have to do. We'll use X. "I said, let's take
    X, and put it into the gnU system. And we'll make the other parts of gnu workwith X, when appropriate. And we found other pieces of software that had beenwritten by other people, like the text formatter TEX, and some library code from
    Berkeley. At that time there was Berkeley Unix, but it was not free software. This

==========第179页==========
    174
    Free Software, Free Society: Selected essays of richard m. stallman
    library code, initially, was from a different group at Berkeley, which did researchon floating point. And so we fit in these pieces
    In October 1985, we founded the Free Software Foundation So please note theGNU Project came first. The Free Software Foundation came almost two yearsafter the announcement of the gnu project. And the Free Software Foundation isa tax-exempt charity that raises funds to promote the freedom to share and changesoftware. And in the 1980s, one of the main things we did with our funds wasto hire people to write parts of gnu. and essential programs, such as the shelland the c library, were written this way, as well as parts of other programs. Thetar program, which is absolutely essential, although not exciting at all audiencelaughs], was written this way. i believe gnu grep was written this way. And sowe're approaching our goal
    By 1991, there was just one major piece missing, and that was the kernel. Nowwhy did I put off the kernel? probably because it doesn t really matter what orderyou do the things in, at least technically it doesnt. You ve got to do them alanyway. And partly because Id hoped wed be able to find a start at a kernelsomewhere else. And we did. We found Mach, which had been developed at
    Carnegie mellon. And it wasnt the whole kernel it was the bottom half of thekernel. So we had to write the top half; things like the file system, the networkcode, and so on. But running on top of Mach they're running essentially as userprograms, which ought to make them easier to debug. You can debug with a realsource-level debugger running at the same time. I thought that way we'd be able toget these, the higher-level parts of the kernel, done in a short time. It didnt workout that way. These asynchronous, multi-threaded processes, sending messages toeach other, turned out to be very hard to debug. And the mach-based system thatwe were using to bootstrap with had a terrible debugging environment, and it wasunreliable. It took us years and years to get the gnu kernel to work
    But, fortunately, our community did not have to wait for the gnu kernel. Because in 1991, Linus torvalds developed another free kernel, called Linux. He usedthe old-fashioned monolithic design and it turns out that he got his working muchfaster than we got ours working.So maybe thats one of the mistakes that I madethat design decision. Anyway, at first we didnt know about Linux, because henever contacted us to talk about it, although he did know about the gnu project
    But he announced it to other people and other places on the net. And so otherpeople then did the work of combining Linux with the rest of the gnu system tomake a complete free operating system. Essentially, to make the gnu plus linuxcombination
    But they didnt realize thats what they were doing. You see, they said, "We havea kernel-let's look around and see what other pieces we can find to put together withthe kernel. "So, they looked around-and lo and behold, everything they needed wasalready available. What good fortune, they said. [audience laughs]It's all here. Wecan find everything we need. Let's just take all these different things and put ittogether, and have a system
    They didn t know that most of what they found was pieces of the GNU system
    So they didnt realize that they were fitting Linux into the gap in the gnu system. They thought they were taking Linux and making a system out of Linux. So

==========第180页==========
    Chapter 20: Free Software: Freedom and Cooperation
    175
    they called it a Linux system. [An audience member says, I"But it's more goodfortune than finding the x Window System, and Mach? [Stallman responds andcontinues, Right. The difference is that the people who developed X and Machdidnt have the goal of making a complete free operating system. We're the onlyones who had that And it was our tremendous work that made the system exist
    We actually did a larger part of the system than any other project. No coincidencebecause those people-they wrote useful parts of the system. But they didnt do itbecause they wanted the system to be finished. They had other reasons
    Now the people who developed X-they thought that designing an across-thenetwork window system would be a good project, and it was. And it turned outto help us make a good free operating system. But thats not what they hoped for
    They didnt even think about that. It was an accident An accidental benefit. now
    T'm not saying that what they did was bad. They did a large free software project
    Thats a good thing to do. But they didnt have that ultimate vision. The GNU
    Project is where that vision was
    And, So, we were the ones whose-every little piece that didn t get done by somebody else, we did it. Because we knew that we wouldnt have a complete systemwithout it. And even if it was totally boring and unromantic, like tar or mv laudience laughs], we did it. Or ld-you know theres nothing very exciting in ld, biwrote one. [audience laughs] and i did make efforts to have it do a minimalamount of disk i/o so that it would be faster and handle bigger programs. I like todo a good job; I like to improve various things about the program while rm doin
    But the reason that i did it wasnt that i had brilliant ideas for a better ld. Thereason I did it is that we needed one that was free. And we couldn t expect anyoneelse to do it. so we had to do it or find someone to do it
    So, although at this point thousands of people and projects have contributed tothis system, there is one project that is the reason that this system exists, and thatsthe gNu Project. It [ the system] is basically the gNu System, with other thingsadded since then
    The practice of calling the system Linux has been a great blow to the gnu
    Project, because we dont normally get credit for what weve done. I think linuxhe kernel, is a very useful piece of free software, and I have only good things tosay about it. Well, actually, I can find a few bad things to say about it. audienclaughs] But, basically, I have good things to say about it. However, the practiceof calling the gNu system "Linux "is just a mistake. I'd like to ask you pleaseto make the small effort necessary to call the system GNU/Linux, and that way tohelp us get a share of the credit
    A person in the audience yells out, ]"You need a mascot! Get yourself a stuffedanimal!"[Stallman responds, We have one. LAudience member replies, " Youdo? "[stallman replies, provoking much laughter, e have an animal-a gnu So,yes, when you draw a penguin, draw a gnu next to it. (53) But, let's save the ques-tions for the end. I have more to go through
    So, why am I so concerned about this? Why do i think it is worth bothering youand perhaps lowering your opinion of me audience laughs to raise this issue of
    A simple program that moves or renames files

==========第181页==========
    176
    Free Software, Free Society: Selected essays of richard m. stallman
    credit? When I do this, some people think that it's because I want my ego to befed, right? Of course, Im not asking you to call it "Stallmanix, "right? Audiencem asking you to call it GNU, because I want the gnu project to get credit
    And there's a very specific reason for that, which is a lot more important thananybody getting credit, in and of itself. You see, these days, if you look around inour community most of the people talking about it and writing about it dont evermention GNU, and they don' t ever mention these goals of freedom-these politicaland social ideals-either. Because the place they li e those] come from iS GNU.
    The ideas associated with Linux-the philosophy is very different. It is basicallythe apolitical philosophy of Linus Torvalds. So, when people think that the wholesystem is Linux. they tend to think "Oh. it must have been all started by linus
    Torvalds. His philosophy must be the one that we should look at carefully. "Andwhen they hear about the gnu philosophy they say: "Boy, this is so idealisticthis must be awfully impractical. Im a Linux-user, not a GNU-user. "[audiencelaughs
    What irony If they only knew! If they knew that the system they liked-or, insome cases, love and go wild over-is our idealistic, political philosophy made real
    They still wouldnt have to agree with us. But at least they'd see a reason to takeit seriously, to think about it carefully, to give it a chance. They would see how itrelates to their lives. If they realized, "Im using the gnu system. Here's the gnuphilosophy. This philosophy is why this system that I like very much exists, "they'd
    It least consider it with a much more open mind. It doesnt mean that everybodywill agree. People think different things. That's okay-people should make up theirown minds. But i want this philosophy to get the benefit of the credit for the resultsit has achieved
    If you look around in our community, youll find that almost every where, theinstitutions are calling the system Linux. Reporters mostly call it Linux. Its notright, but they do. The companies that package the system mostly say it [Linux
    Oh, and most of these reporters, when they write articles, they usually dont lookat it as a political issue, or social issue. They're usually looking at it purely as abusiness question or what companies are going to succeed more or less, which is
    rly minor question for society. And, if you look at the companies that
    package the gNU/Linux system for people to use, well, most of them call it Linux
    And they all add non-free software to it
    See the gnu GPL says that if you take code, and some code out of a gPlcovered program and add some more code to make a bigger program that wholeprogram has to be released under the gPl. But you could put other separate pro-grams on the same disk(hard disk or CD), and they can have other licenses. Thatsconsidered mere aggregation, and, essentially, just distributing two programs tosomebody at the same time is not something we have any say over. So in fact, itis not true-sometimes i wish it were true-that if a company uses a gPl-coveredprogram in a product, the whole product has to be free software. It's not-it doesntgo to that range-that scope It's the whole program. If there are two separate pro-grams that communicate with each other at arm's length-like by sending messagesto each other-then theyre legally separate, in general. So, these companies, by

==========第182页==========
    Chapter 20: Free Software: Freedom and Cooperation
    177
    adding non-free software to the system, are giving the users, philosophically andpolitically, a very bad idea. They're telling the users, " It is Ok to use non-free
    W
    tting it on th
    If you look at the magazines about the use of the gnuilinux system most ofthem have a title like "Linux-something-or-other. So theyre calling the system
    Linux most of the time. and they ' re filled with ads for non-free software thatyou could run on top of the gnu/linux system. Now those ads have a commonmessage. They say: "Non-free software is good for you. It's so good that youmight even pay to get it. "[audience laughs
    And they call these things "value-added packages, "which makes a statementabout their values. They're saying: Value practical convenience, not freedom. AndI dont agree with those values, so I call them "freedom-subtracted packagesaudience laughs] Because if you have installed a free operating system, then younow are living in the free world. You enjoy the benefits of liberty that we workedfor so many years to give you. Those packages give you an opportunity to buckleon a chain
    And then if you look at the trade shows dedicated to the use of the gnuilinuxsystem, they all call themselves "Linux " shows. And they're filled with boothsexhibiting non-free software, essentially putting the seal of approval on the non-freesoftware. So, almost everywhere you look in our community the institutions areendorsing the non-free software, totalling negating the idea of freedom that GnUwas developed for. And the only place that people are likely to come across the ideof freedom is in connection with gnu, and in connection with free software. theterm, free software. So this is why I ask you: Please call the system GNU/Linux
    Please make people aware where the system came from and why
    Of course, just by using that name, you wont be making an explanation of thehistory. You can type four extra characters and write Gnu/Linux; you can say twoextra syllables. But GNU/Linux is fewer syllables than Windows 2000. audiencelaughs] You're not telling them a lot, but you're preparing them, so that when theyhear about gnu, and what it's all about they ll see how that connects to them andtheir lives. And that, indirectly, makes a tremendous difference. So please help us
    You'll note that Microsoft called the gPl an "open source license. They dontant people to be thinking in terms of freedom as the issue. You'll find that theyinvite people to think in a narrow way, as consumers, and, of course, not even thinkvery rationally as consumers, if they're going to choose Microsoft products. Butthey dont want people to think as citizens or statesmen. Thats inimical to them
    At least it's inimical to their current business mod
    Now, how does free software. well, i can tell you about how free softwarerelates to our society. a secondary topic that might be of interest to some of you ishow free software relates to business
    Now, in fact, free software is tremendously useful for business. After all. mostbusinesses in the advanced countries use software. only a tiny fraction of themdevelop software
    And free software is tremendously advantageous for any company that uses software, because it means that you're in control. Basically, free software means theusers are in control of what the program does. Either individually, if they care

==========第183页==========
    178
    Free Software, Free Society: Selected essays of richard m. stallman
    enough to be, or, collectively, when they care enough to be. whoever cares enoughcan exert some influence. If you dont care, you dont buy. Then you use whatother people prefer. But, if you do care, then you have some say. With proprietarysoftware, you have essentially no sa
    With free software, you can change what you want to change. And it doesntmatter that there are no programmers in your company thats fine. If you wantedto move the walls in your building, you dont have to be a carpentry company. Youjust have to be able to go find a carpenter and say, "what will you charge to do thisjob? And if you want to change around the software you use, you dont have tobe a programming company. You just have to go to a programming company andsay, "What will you charge to implement these features? And when will you haveit done? And if they don 't do the job, you can go find somebody else
    Theres a free market for support. So any business that cares about support willfind a tremendous advantage in free software. With proprietary software, support isa monopoly, because one company has the source code-or maybe a small numberof companies that paid a gigantic amount of money have the source code, if it's
    Microsofts shared source program-but, it's very few. So there arent very manypossible sources of support for you. And that means that unless you're a real giant,they don t care about you. Your company is not important enough for them to careif they lose your business. Once you're using the program, they figure you're lockedin to getting the support from them, because to switch to a different program is agigantic job. So you end up with things like paying for the privilege of reportina bug. [audience laughs] And once youve paid, they tell you, "Well, OK, wevenoted your bug report. And in a few months, you can buy an upgrade, and you cansee if we've fixed it audience laughs
    Support providers for free software cant get away with that. They have to pleasethe customers. Of course, you can get a lot of good support gratis. You post yourproblem on the Internet. You may get an answer the next day. But thats notguaranteed, of course. If you want to be confident, you better make an arrangementwith a company and pay them. And this is, of course, one of the ways that freesoftware business works
    Another advantage of free software for businesses that use software is securityd privacy. And this applies to individuals as well, but I brought it up in the contextof businesses. You see, when a program is proprietary, you cant even tell what itreally does
    It could have features deliberately put in that you wouldnt like if you knewabout them. For example, it might have a back door to let the developer get intoyour machine. It might snoop on what you do and send information back. This isnot unusual. Some microsoft software did this. but it 's not only microsoft. Thereare other proprietary programs that snoop on the user. And you cant even tell if itdoes this. And, of course, even assuming that the developer's totally honest, everyprogrammer makes mistakes. There could be bugs that affect your security that arenobodys fault. But the point is: If it's not free software, you cant find them. Andyou cant fix them
    Nobody has the time to check the source of every program he runs. You're notgoing to do that. But with free software there's a large community, and there are

==========第184页==========
    Chapter 20: Free Software: Freedom and Cooperation
    people in that community who are checking things. And you get the benefit of theirchecking, because if theres an accidental bug, there surely are, from time to time,n any program, they might find it and fix it. And people are much less likely toput in a deliberate Trojan horse, or a snooping feature, if they think they might getcaught. The proprietary software developers figure they wont get caught. They'lget away with it undetected. But a free software developer has to figure that peoplewill look at that and see it's there. In our community, we dont feel we can getaway with ramming a feature down the users' throats that the users wouldnt like
    We know that if the users dont like it, they'll make a modified version that doesnthave it. And then they'll all start using that version
    In fact, we can all reason enough, we can all figure this out enough steps aheadthat we probably wont put in that feature. After all, you're writing a free programyou want people to like your version; you dont want to put in a thing that a lotof people are going to hate, and have another modified version catch on instead ofyours. So you just realize that the user is king in the world of free software. In theworld of proprietary software, the customer is not king. Because you are only acustomer. You have no say in the software you use
    In this respect, free software is a new mechanism for democracy to operate. Pro-fessor Lessig, now at Stanford, noted that code functions as a kind of law. whoevergets to write the code that just about every body uses for all intents and purposes iswriting the laws that run peoples lives. With free software, these laws get writtenin a democratic way. Not the classical form of democracy-we dont have a big election and say, Everybody vote which way should this feature be done. "[audiencelaughs] Instead we say, basically, those of you who want to work on implementinthe feature this way, do it. And if you want to work on implementing the featurethat way, do it. And, it gets done one way or the other, you know? And so, if a lot ofpeople want it this way, it'II get done this way. In this way, everybody contributesto the social decision by simply taking steps in the direction that he wants to go
    And you re free to take as many steps personally as you want to take. a businessfree to commission as many steps as they find useful to take. And after you addall these things up, that says which direction the software goes
    And it's often very useful to be able to take pieces out of some existing programpresumably usually large pieces, of course-and then write a certain amount of codeof your own and make a program that does exactly what you need; which wouldhave cost you an arm and a leg to develop if you had to write it all from scratch ifyou couldnt cannibalize large pieces from some existing free software package
    Another thing that results from the fact that the user is king is that we tend to bevery good about compatibility and standardization. Why? Because users like that
    Users are likely to reject a program that has gratuitous incompatibilities in it. Now,sometimes there 's a certain group of users who actually have a need for a certainkind of incompatibility and then they 'll have it That's oK. But when users wantto follow a standard, we developers have to follow it, and we know that. And wedo it. By contrast, if you look at proprietary software developers, they often find itdvantageous to deliberately not follow a standard, and not because they think that
    9 Lawrence Lessig wrote the introduction for this book

==========第185页==========
    180
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    they're giving the user an advantage that way, but rather because theyre imposingon the user, locking the user in. And you'll even find them making changes in theirfile formats from time to time, just to force people to get the newest version
    Archivists o are finding a problem now that files written on computers ten yearsago often cant be accessed; they were written with proprietary software thats essentially lost now. If they] were written with free software, then it could be broughtup to date and run. And those records would not be lost, would not be inaccessible.
    They were even complaining about this on National Public radio recently in citing free software as a solution In effect, by using a non- free program to store yourown data, you are putting your head in a noose
    So. I've talked about how free software affects most business But how doesit affect that particular narrow area that is software business? Well, the answer ismostly not at all. And the reason is that 90%of the software industry, from what I'mtold is development of custom software software thats not meant to be releasedat all. For custom software, this issue, or the ethical issue of free or proprietary,doesnt arise. You see, the issue is, are you users free to change and redistribute thesoftware? If there's only one user, and that user owns the rights, theres no problem
    That user is free to do all these things. So, in effect, any custom program that wasdeveloped by one company for use in-house is free software, as long as they havethe sense to insist on getting the source code and all the rights
    The issue doesnt really arise for software that goes in a watch or a microwaveoven or an automobile ignition system, because those are places where you dontdownload software to install. It's not a real computer as far as the user is concernedso it doesnt raise these issues enough for them to be ethically important. So, forthe most part, the software industry will go along just as it's been going. And theinteresting thing is that since such a large fraction of the jobs are in that part of theindustry, even if there were no possibilities for free software business, the developers of free software could all get day jobs writing custom software. audiencelaughs] There are so many; the ratio is so big.
    But, as it happens there is free software business There are free software companies, and at the press conference that I'm going to have, people from a coupleof them will join us. And, of course, there are also companies that are not freesoftware businesses but do develop useful pieces of free software to release, andthe free software that they produce is substantial
    Now, how do free software businesses work? Well, some of them sell copies
    You're free to copy it but they can still sell thousands of copies a month Andothers sell support and various kinds of services. I, personally, for the second halfof the 80s, I sold free software support services. Basically I said, for $200 an hourI'll change whatever you want me to change in GNU software that I'd written. Yesit was a stiff rate, but if it was a program that I was the author of, people wouldfigure that i might get the job done in a lot fewer hours. audience laughs And Imade a living that way. In fact, I made more than Id ever made before I also taught
    1/ Many archivists store and share thousands of files over the Internet
    National Public Radio is a private, non-profit organization that has, at the time of this speech, 620public radio stations that broadcast news and music daily

==========第186页==========
    Chapter 20: Free Software: Freedom and Cooperation
    l81
    classes. And I kept doing that until 1990, when i got a big prize and i didnt haveto do it any more.
    But 1990
    hen the first
    rate fr
    as Cygnus Support. And their business was to do, essentially, the same kind ofthing that Id been doing. I certainly could have worked for them, if I had neededto do that. Since i didn t need to, I felt it was good for the movement if i remainedindependent of any one company. That way, I could say good and bad things aboutthe various free software and non-free software companies without a confict ofinterest. I felt that i could serve the movement more But if i had needed that tomake a living. sure. i would have worked for them it's an ethical business to be in
    No reason I would have felt ashamed to take a job with them. and that companywas profitable in its first year. It was formed with very little capital, just the moneyits three founders had. And it kept growing every year and being profitable everyear until they got greedy and looked for outside investors, and then they messedthings up. But it was several years of success, before they got greedy
    This illustrates one of the exciting things about free software, Free softwaredemonstrates that you dont need to raise capital to develop free software. I mean,it's useful; it can help. If you do raise some capital, you can hire people and havethem write a bunch of software. But you can get a lot done with a small number ofpeople. In fact, the tremendous efficiency of the process of developing free softwareis one of the reasons it's important for the world to switch to free software. Andit also belies what Microsoft says, when they say the gNu gPl is bad because itmakes it harder for them to raise capital to develop non-free software and take ourfree software and put our code into their programs that they wont share with us
    Basically, we dont need to have them raising capital that way. We'll get the jobdone anyway. We are getting the job done
    People used to say we could never do a complete free operating system. Nowwe've done that and a tremendous amount more. and i would say that were aboutan order of magnitude away from developing all the general purpose publishedsoftware needs of the world. and this is in a world where more than 90%o of theusers don't use our free software yet. This is in a world where more than half of allhe Web servers in the world are running on GNU/Linux with Apache as the Webserver (S
    Question: [Inaudible]. What did you say before, Linux?
    Richard M. stallman: i said GNu/linux
    Question: You did?
    Richard M. Stallman: Yes, if I,m talking about the kernel, I call it Linux. Youknow, thats it's name. The kernel was written by linus Torvalds. and we shouldonly call it by the name that he chose. out of respect for the author
    In general, in business most users are not using GNU/Linux. Most home usersare not using our system yet. When they are, we should automatically get 10 timesas many volunteers and 10 times as many customers for the free software businesses
    The "big prize"he is referring to is the Mac Arthur Fellowship, also referred to by some as thegenius grant. It is a five-year grant given to individuals who show exceptional merit and promisefor continued and enhanced creative work

==========第187页==========
    182
    Free Software, Free Society: Selected essays of richard m. stallman
    that there will be. And so that will take us that order of magnitude. So at this point,am pretty confident that we can do the job
    And this is important, because Microsoft asks us to feel desperate. They say,
    The only way you can have software to run, the only way you can have innovationif you give us power. Let us dominate you. Let us control what you can do withthe software you're running so that we can squeeze a lot of money out of you. anduse a certain fraction of that to develop software, and take the rest as profit
    Well, you shouldnt ever feel that desperate. You shouldnt ever feel so desperatethat you give up your freedom. Thats very dangerous
    Another thing that Microsoft, well, not just Microsoft, people who dont supportfree software generally adopt a value system in which the only thing that mattersis short-term practical benefits: How much money am I going to make this year?
    What job can I get done today? Short-term thinking and narrow thinking. Their assumption is that it is ridiculous to imagine that anybody ever might make a sacrificefor the sake of freedom
    Yesterday a lot of people were making speeches about Americans who madesacrifices for the freedom of their compatriots some of them made great sacrifices
    They even sacrificed their lives for the kinds of freedom that everyone in our coun-try has heard about. (At least in some of the cases; I guess we have to ignore thewar in Vietnam.)
    But, fortunately, to maintain our freedom in using software doesnt call for bisacrifices. Just tiny, little sacrifices are enough, like learning a command-line interface, if we dont have a Graphical User Interface (GUn) program yet. Like doingthe job in this way, because we dont have a free software package to do it that way,yet. Like paying some money to a company thats going to develop a certain freesoftware package, so that you can have it in a few years. Various little sacrificesthat we can all make. And in the long run even we will have benefited from it
    You know, it is really an investment more than a sacrifice. We just have to haveenough long-term view to realize it's good for us to invest in improving our societywithout counting the nickels and dimes of who gets how much of the benefit fromthat investment
    So, at this point I'm essentially done
    Id like to mention that there's a new approach to free software business beinproposed by Tony Stanco, which he calls "FreeDevelopers, which involves a cer-tain business structure that hopes eventually to pay out a certain share of the profitsto all the authors of free software who have joined the organization and they'relooking at the prospects of getting some rather large government software development contracts in India now, because theyre going to be using free software as thebasis, having tremendous cost savings that way
    And so now I guess that I should ask for questions
    Question and Answer Session
    Question: How could a company like Microsoft include a free software contract
    13 The day before was Memorial Day, a U.S. holiday on which war heroes are commemorated

==========第188页==========
    Chapter 20: Free Software: Freedom and Cooperation
    183
    RMS: Well, actually, Microsoft is planning to shift a lot of its activity into services
    And what theyre planning to do is something dirty and dangerous, which is tie theservices to the programs, one to the next, in a sort of zigzag. So that to use thisservice, you ve got to be using this Microsoft program, which is going to mean youneed to use this service, this Microsoft program.so it's all tied together. Thatstheir plan
    ow, the interesting thing is that selling those services doesnt raise the ethicalissue of free software or non-free software. It might be perfectly fine for them tohave the business for those businesses selling those services over the net to exist
    However, what Microsoft is planning to do is to use them to achieve an even greaterlock, an even greater monopoly, on the software and the services, and this wasdescribed in an article. recently. other people said that it is turning the net into the
    Microsoft Company Town
    And this is relevant because the trial court in the microsoft antitrust trial reommended breaking up the company, Microsoft-but in a way that makes no sense,wouldnt do any good at all-into the operating system part and the applications
    But having seen that article, I now see a useful, effective way to split up Microsoft into the services part and the software part, to require them to deal witheach other only at arms length, that the services must publish their interfaces, Sothat anybody can write a client to talk to those services, and, I guess, that they haveto pay to get the service. Well thats oK. that's a totally different issue
    If Microsoft is split up in this way... services and software, they will not be ableto use their software to crush competition with Microsoft services. And they wontbe able to use the services to crush competition with microsoft software. and wewill be able to make the free software, and maybe you people will use it to talk to
    Microsoft services and we won't mind
    Because, after all, although Microsoft is the proprietary software company thathas subjugated the most people-the others have subjugated fewer people, it's notfor want of trying; audience laughs] they just havent succeeded in subjugating asmany people. So, the problem is not Microsoft and only Microsoft. Microsoft isjust the biggest example of the problem we're trying to solve, which is proprietarysoftware taking away users' freedom to cooperate and form an ethical society. Sowe shouldnt focus too much on Microsoft, even though they did give me the opportunity for this platform. That doesnt make them all-important. Theyre not thebe-all and end-all
    Q: Earlier, you were discussing the philosophical differences between open sourcesoftware and free software. How do you feel about the current trend of gnu/linuxdistributions as they head towards supporting only Intel platforms? And the factthat it seems that less and less programmers are programming correctly, and makingsoftware that will compile anywhere? And making software that simply works on
    Intel syste
    RMS: I dont see an ethical issue there. Although, in fact, companies that makecomputers sometimes port the GNU/Linux system to it. HP apparently did thisrecently. And, they didnt bother paying for a port of Windows, because that would

==========第189页==========
    184
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    have cost too much. But getting GNU/Linux supported was, I think, five engineersfor a few months. It was easily doable
    Now, of course. i encourage people to use autoconf. which
    GNU pack
    that makes it easier to make your programs portable. I encourage them to do that
    Or when somebody else fixes the bug that it didnt compile on that version of thesystem, and sends it to you, you should put it in. but i dont see that as an ethicalISsue
    Q: Two comments. One is: Recently, you spoke at MIT. I read the transcript. Andsomeone asked about patents and you said that "patents are a totally different issueI have no comments on that in
    RMS: Right. I actually have a lot to say about patents but it takes an hour audienclaughs I
    Q: I wanted to say this: It seems to me that there is an issue. I mean, there is areason that companies call both patents and copyrights things like hard property intrying to get this concept which is, if they want to use the power of the state tocreate a course of monopoly for themselves And so what's common about thesethings is not that they revolve around the same issues, but that motivation is notreally the public service issues but the motivation of companies to get a monopolyfor their private interests
    RMS: You're right that thats what they want. But there's another reason why theywant to use the term intellectual property It's that they dont want to encouragepeople to think carefully about copyright issues or patent issues. Because copyrightlaw and patent law are totally different, and the effects of software copyrights andsoftware patents are totally different
    Software patents are a restriction on programmers, prohibiting them from writincertain kinds of programs, whereas copyright doesnt do that. With copyright, atleast if you wrote it yourself, you're allowed to distribute it. So. it's tremendousimportant to separate these issues
    They have a little bit in common, at a very low level, and everything else is dif-ferent. So, please, to encourage clear thinking, discuss copyright or discuss patents
    But dont discuss intellectual property. I dont have an opinion on intellectual prop-erty. I have opinions on copyrights and patents and software
    Q: You mentioned at the beginning that a functional language, like recipes, are computer programs. But there is a big cross over from food recipes to computer pro-grams, and from English language to computer programs-the definition of "functional language "is very broad. This is causing problems in the DeCss, DVD,
    RMS: The issues are partly similar but partly different, for things that are not functional in nature. Part of the issue transfers but not all of it. Unfortunately, thatsanother hour speech. I dont have time to go into it. But I would say that all functional works ought to be free in the same sense as software. You know textbooksmanuals, dictionaries, and recipes, and so on.
    0: I was just wondering on online music. There are similarities and differencescreated all through
    RMS: Right. I'd say that the minimum freedom that we should have for any kind ofpublished information is the freedom to non-commercially redistribute it, verbatim

==========第190页==========
    Chapter 20: Free Software: Freedom and Cooperation
    185
    For functional works, we need the freedom to commercially publish a modifiedversion, because thats tremendously useful to society. For non-functional worksthings that are to entertain, or to be aesthetic, or to state a certain persons viewsyou know-perhaps they shouldnt be modified. And perhaps that means that it'sOK to have copyright covering all commercial distribution of them
    Please remember that according to the U.s. Constitution, the purpose of copyright is to benefit the public. It is to modify the behavior of certain private parties,so that they will publish more books. And the benefit of this is that society getsto discuss issues and learn. and, you know, we have literature. We have scientificorks. The purpose is to encourage that. Copyrights do not exist for the sake ofauthors, let alone for the sake of publishers They exist for the sake of readers andall those who benefit from the communication of information that happens whenpeople write and others read. And that goal I agree with
    But in the age of the computer networks the method is no longer tenable because it now requires draconian laws that invade everybody's privacy and terrorizeeveryone. Years in prison for sharing with your neighbor. It wasnt like that in theage of the printing press. Then copyright was an industrial regulation. It restrictedpublishers. Now it's a restriction imposed by the publishers on the public. So thepower relationship is turned around 180 degrees, even if it's the same law
    Q: So you can have the same thing, but like in making music from other musicRMS: Right. That is an interesting
    Q: And unique, new works, you know, it's still a lot of cooperation
    RMS: It is. And i think that probably requires some kind of fair use concept. Cetainly making a few seconds of sample and using that in making some musicalwork, obviously that should be fair use. Even the standard idea of fair use includesthat, if you think about it. Whether courts agree, I'm not sure, but they should. Thatwouldn't be a real change in the system as it has existed
    Q: What do you think about publishing public information in proprietary formats?RMS: Oh, it shouldnt be. I mean. the government should never require citizens touse a non-free program to access, to communicate with the government in any way,in either direction
    Q: I have been, what I will now say, a GNU/Linux userRMS: Thank you. audience laugh
    Q:. for the past four years. The one thing that has been problematical for me andis something that is essential, I think, to all of us, is browsing the webRMS: Yes
    2: One thing that has been decidedly a weakness in using a GNU/Linux system hasbeen browsing the Web, because the prevailing tool for that, Netscape
    RMS
    is not free software
    Let me respond to this. I want to get to the point, for the sake of getting in more
    So, yes. There has been a terrible tendency for people to use Netscape Navigatoron their GNU/Linux systems. In fact all the commercially packaged systems comewith it. So this is an ironic situation: we worked so hard to make a free operatingsystem, and now, if you go to the store, and you can find versions of GNU/Linuxthere, most of them are called Linux, and theyre not free. Oh, well, part of them is
    But then theres Netscape Navigator, and maybe other non-free programs as well

==========第191页==========
    186
    Free Software, Free Society: Selected essays of richard m. stallman
    So it's very hard to actually find a free system, unless you know what you're doing
    Or, of course, you cannot install Netscape Navigator.
    Now, in fact, there have been free Web browsers for many years. There
    Web browser that I used to use called lynx. It's a free Web browser that is nongraphical; it's text-only. This has a tremendous advantage, in that you dont see theads. audience laughs applause
    But anyway, there is a free graphical project called Mozilla, which is now gettinto the point where you can use it. and i occasionally use it
    Q: Konqueror 2.01 has been very good
    RMS: Oh, OK. So thats another free graphical browser. So, we're finally solvingthat problem, I guess
    Q: Can you talk to me about that philosophical/ethical division between free soft-ware and open source? Do you feel that those are irreconcilable?
    Recording switches tapes; end of question and start of answer is missing
    companies will decide it's more profitable to let us be allowed to do these thing eRMS
    to a freedom, and ethics Or whether you just say, Well, I hope that y
    But. as i said. in a lot of practical work it doesn't really matter what a personspolitics are. When a person offers to help the gnu project, we dont say: "Youhave to agree with our politics. We say that in a gnu package, youve got to callthe system GNU/Linux, and youve got to call it free software. What you say whenyou're not speaking to the gnu Project, thats up to you
    Q: The company IBM started a campaign for government agencies, to sell their binew machines, that they used Linux as selling point, and say Linux
    RMS: Yes. Of course, it's really the gNU/Linux systems. Audience laughs
    Q: Thats right! Well, tell the top salesperson. He doesnt know anything for GNURMS: Oh yes. The problem is that they've already carefully decided what they wantto say for reasons of their advantage. And the issue of what is a more accurate, orfair, or correct way to describe it is not the primary issue that matters to a companylike that. Now, some small companies, yes, there'll be a boss. And if the boss isinclined to think about things like that, he might make a decision that way. not agiant corporation though It's a shame
    There's another more important and more substantive issue about what IBM isdoing. Theyre saying that theyre putting a billion dollars into"Linux. But per-haps i should also put quotes around "into, "as well, because some of that moneyis paying people to develop free software. That really is a contribution to our community. But other parts are paying people to write proprietary software, or portproprietary software to run on top of GNU/Linux, and that is not a contribution toour community. But IBM is lumping that all together into this. Some of it mightbe advertising, which is partly a contribution, even if it's partly wrong. So, it's acomplicated situation. Some of what theyre doing is contribution and some is notand some is somewhat, but not exactly. And you cant just lump it altogether andthink, "Wowee! a billion dollars from IBM. Audience laughs Thats oversimplification
    Q: Can you talk a little bit more about the thinking that went into the general publi
    License?

==========第192页==========
    Chapter 20: Free Software: Freedom and Cooperation
    RMS: So the thinking that went into the gnu gpl? Part of it was that i wanted toprotect the freedom of the community against the phenomena that I just describedith X Windows, which has happened with other free programs as well. In fact,when I was thinking about this issue, X Windows was not yet released. But Ihad seen this problem happen in other free programs. For instance, TeX. I wanted
    might write a program, and maybe a lot of people would use the program, but theto make sure that the users would all have freedom. Otherwise. i realized that i
    wouldn't have freedom. And what's the point of that?
    But the other issue i was thinking about was, i wanted to give the communitya feeling that it was not a doormat, a feeling that it was not prey to any parasitewho would wander along. If you don t use copyleft, you are essentially saying[Speaking meekly]"Take my code. Do what you want. I don't say no " So anybodycan come along and say: [speaking very firmly]"Ah, I want to make a non-freeversion of this. I'Il just take it. And, then, of course, they probably make someimprovements, those non-free versions might appeal to users, and replace the freeversions. And then, what have you accomplished? You' ve only made a donation tosome proprietary software project
    4. And when people see that that's happening, when people see, other people takewhat I do, and they don t ever give back, it can be demoralizing. And, this is not justspeculation. I had seen that happen. That was part of what happened to wipe outthe old community that I belonged to in the 70s. Some people started becomin
    operative. And we assumed that they were profiting thereby. They certainlyacted as if they thought they were profiting. And we realized that they can just takeour cooperation and not give back. And there was nothing we could do about it
    It was very discouraging. We, those of us who didnt like the trend, even had adiscussion but we couldnt come up with any idea for how we could stop it
    The GPL is designed to stop that. It says: Yes, you are welcome to join thecommunity and use this code. You can use it to do all sorts of jobs. But if yourelease a modified version, youve got to release that to our community, as part ofour community, as part of the free world
    So, in fact, there are still many ways that people can get the benefit of our workand not contribute, like you dont have to write any software. Lots of people useGNU/Linux and don t write any software. There's no requirement that youve gotto do anything for us. But if you do a certain kind of thing, you've got to contributeto it. So what that means is that our community is not a doormat. And i thinkthat that helped give people the strength to feel, Yes, we wont just be trampledunderfoot by everybody. We'll stand up to this
    Q: Considering free but not copylefted software, since anybody can pick it up andmake it proprietary, is it not possible also for someone to pick it up and make somechanges and release the whole thing under the GPL?RMS: Yes. it is possible
    Q: Then that would make all future copies then be GPl'ed
    RMS: From that branch. Here's why we dont generally do that. Let me explain. Wcould, if we wanted to, take X Windows, and make a GPL-covered copy and makechanges in that. But there's a much larger group of people working on improving
    X Window and not GPL-ing it. So, if we did that we would be forking from them

==========第193页==========
    188
    Free Software, Free Society: Selected essays of richard m. stallman
    And thats not very nice treatment of them. And, they are a part of our communitycontributing to our community.
    Second, it would backfire against us, because theyre doing a lot more work on Xthan we would be. So our version would be inferior to theirs, and people wouldntuse it, which means, why go to the trouble at all?
    So when a person has written some improvement to X Windows. what i say thatperson should do is cooperate with the X development team. Send it to them andlet them use it their way. Because they are developing a very important piece offree software. It's good for us to cooperate with them
    Q: Except, considering X, in particular, about two years ago, the X Consortium thatwas far into the non-free open source
    RMS: Well, actually it wasnt open-source. They may have said it was. I cantremember if they said that or not. But it wasnt open source. It was restricted. Youcouldnt commercially distribute, I think. Or you couldnt commercially distributea modified version, or something like that. There was a restriction thats consideredunacceptable by both the Free Software movement and the Open Source movement
    And yes, thats what using a non-copyleft license leaves you open to. In factthe X Consortium had a very rigid policy. They say: If your program is copyleftedeven a little bit, we wont distribute it at all. We wont put it in our distribution
    So, a lot of people were pressured in this way into not copylefting. And the resultwas that all of their software was wide open. later on. when the same people whohad pressured a developer to be too all-permissive then the x people later said
    All right, now we can put on restrictions, "which wasnt very ethical of them
    But, given the situation, would we really want to scrape up the resources tomaintain an alternate GPL-covered version of X? And it wouldnt make any senseto do that. There are so many other things we need to do. Let's do them instead
    We can cooperate with the X developers
    Q: Do you have a comment, is the gnu a trademark? And is it practical to includeit as part of the gnu General Public license allowing trademarks?
    Richard m. stallman: We are, actually, applying for trademark registration onGNU. But it wouldnt really have anything to do with that. Its a long story toexplain why
    Q: You could require the trademark be displayed with gPl-covered programsRMS: No, I dont think so. The licenses cover individual programs. And when agiven program is part of the gnu Project, nobody lies about that. The name of thesystem as a whole is a different issue. And this is an aside. It's not worth discussingmore
    Q: If there was a button that you could push and force all companies to free theirsoftware, would you press it?
    RMS: Well, I would only use this for published software. I think that people havethe right to write a program privately and use it. And that includes companies. Thisis privacy issue. And it's true, there can be times when it is wrong to do that, like ifit is tremendously helpful to humanity, and you are withholding it from humanity
    That is a wrong but thats a different kind of wrong It's a different issue, althoughit's in the same area

==========第194页==========
    Chapter 20: Free Software: Freedom and Cooperation
    But yes, I think all published software should be free software. And remember,when it's not free software, thats because of government intervention. The government is intervening to make it non-free. The government is creating special legalpowers to hand out to the owners of the programs, so that they can have the policestop us from using the programs in certain ways. So I would certainly like to endthat
    Ed Schonberg: Richard's presentation has generated an enormous amount of intellectual energy. I would suggest that some of it should be directed to using, andpossibly writing, free software
    We should close the proceedings shortly. I want to say that richard has injectedinto a profession that is known in the general public for its terminal political nerditude a level of political and moral discussion that is. i think unprecedented in ourprofession. And we owe him very big for this. LAudience applause]

==========第195页==========
    190
    Free Software. Free Society Selected essays of richard M. stallman

==========第196页==========
    Chapter 21: Words to Avoid
    21 Words to avoid
    There are a number of words and phrases that we recommend avoiding, eitherbecause they are ambiguous or because they imply an opinion that we hope youmay not entirely agree with
    BSD-style The expression "BSD-style license leads to confusion because it
    lumps together licenses that have important differences. For instancethe original bsd license with the advertising clause is incompatiblewith the GPl, but the revised Bsd license is compatible with the GPl
    To avoid confusion, it is best to name the specific license in questionand avoid the vague term"BSD-style
    Commercial
    Please don'tuse“ commercial” as a synonym for“non-free.Thatconfuses two entirely different issues
    a program is commercial if it is developed as a business activity. Acommercial program can be free or non-free, depending on its license
    Likewise, a program developed by a school or an individual can befree or non-free. depending on its license. The two questions whatsort of entity developed the program and what freedom its users haveare independent
    In the first decade of the free software movement free-softwarepackages were almost always noncommercial; the components of theGNU/Linux operating system were developed by individuals or bynonprofit organizations such as the Free Software Foundation and universities. But in the 1990s, free commercial software started to ap
    Free commercial software is a contribution to our community, so weshould encourage it. But people who think that"commercial" meansnon-free?will tend to think that combination is self-contradictoryand dismiss the possibility. Let's be careful not to use the word"commercial” in that way
    Content If you want to describe a feeling of comfort and satisfaction, by al
    means say"content, but using it to describe written and other worksof authorship embodies a specific attitude towards those works: thatthey are an interchangeable commodity whose purpose is to fill a box
    Originally written in 1996, this essay is part of Free Software, Free Society: Selected Essays of richard
    M.Stallman2nded.(boston:GnuPress,2004),IsbN1-882114-99-x,www.gnupress.org
    Verbatim copying and distribution of this entire article is permitted in any medium, providedthis notice is preserved

==========第197页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    and make money In effect. it treats the works themselves with disrespect
    Those who use this term are often the publishers that push for increased copyright power in the name of the authors ("creators, asthey say) of the works. The term"content'"reveals what they really
    As long as other people use the term "content provider political dis
    sidents can well call themselves"malcontent providers, O
    Creator
    The term"creator"as applied to authors implicitly compares themto a deity(the creator"). The term is used by publishers to elevatethe authors moral stature above that of ordinary people, to justifyincreased copyright power that the publishers can exercise in the nameof the authors
    Digital rights management
    Digital Rights management software is actually designed to imposerestrictions on computer users. The use of the word " rights in thisterm is propaganda. designed to lead you unawares into seeing theissue from the viewpoint of the few that impose the restrictions whileignoring that of the many whom the restrictions are imposed on
    Good alternatives include "Digital Restrictions Management" andhandcuffware
    If you want to say that a program is free software, please dont saythat it is available "for free. That term specifically means "for zeroprice?" Free software is a matter of freedom, not price
    Free-software copies are often available for free-for example, bydownloading via FTP. But free-software copies are also available fora price on CD-ROMS; meanwhile, proprietary-software copies areoccasionally available for free in promotions, and some proprietarypackages are normally available at no charge to certain users
    To avoid confusion, you can say that the program is available"as freesoftware
    Freeware Please don t use the term "freeware as a synonym for " free software
    The termfreeware'was used often in the 1980s for programs released only as executables, with source code not available. Today ithas no particular agreed-on detinition
    Also, if you use languages other than English, please try to avoid borrowing english words such as‘ free software”or“ freeware.” Try touse the often less ambiguous wording that your language offers. Thisis a list of recommended unambiguous translations for the term "freesoftware into various languages
    Czech: svobodny software
    Danish: fri software OR frit programme

==========第198页==========
    Chapter 21: Words to Avoid
    193
    Dutch: vrije software
    Esperanto: libera softvaro
    hielmisto
    French: logiciel libre
    German: freie software
    Hungarian: szabad szoftver
    Icelandic: frjls hugbnaur
    Indonesian: perangkat lunak bebas
    Italian: software libero
    Japanese: jiyuu-na software
    Korean: ja-yu software
    Norwegian: fri programvare
    Polish: wolne oprogramowanie
    Portuguese: software livre
    Slovak: slobodny softver
    Slovenian: prosto programe
    Spanish: software libre
    Swedish: fri programvara
    Turkish: ozgur yazilim
    By forming a word in your own language, you show that you are really referring to freedom and not just parroting some mysterious foreign marketing concept. The reference to freedom may at first seemstrange or disturbing to your countrymen, but once they see that itmeans exactly what it says, they will really understand what the issue
    Give away software
    It's misleading to use the term"give away" to mean"distribute a program as free software. It has the same problem as for free": it im-plies the issue is price, not freedom. One way to avoid the confusionis to say"release as free software
    Intellectual property
    Publishers and lawyers like to describe copyright as"intellectual prop-erty? This term carries a hidden assumption-that the most naturalway to think about the issue of copying is based on an analogy withphysical objects, and our ideas of them as property
    But this analogy overlooks the crucial difference between materialobjects and information: information can be copied and shared almosteffortlessly, while material objects cant be. Basing your thinking onthis analogy is tantamount to ignoring that difference

==========第199页==========
    194
    Free Software, Free Society: Selected essays of richard m. stallman
    Even the u.s. legal system does not entirely accept this analogy sinceit does not treat copyrights like physical-object property rights
    If you don 't want to limit yourself to this way of thinking it is bestto avoid using the term "intellectual property"in your words andthoughts
    There is another problem with"intellectual property: it is a catch-althat lumps together several disparate legal systems, including copyright, patents, trademarks, and others, which have very little in common. These systems of law originated separately, cover different activities, operate in different ways, and raise different public policyissues. For instance, if you learn a fact about copyright law, youwould do well to assume it is not true for patent law. since that isalmost always true. Since these laws are so different the term " intellectual propertyis an invitation to simplistic overgeneralization. Anyopinion about"intellectual property?is almost surely foolish. At thatbroad level, you cant even see the specific public policy issues raisedby copyright law, or the different issues raised by patent law, or anyof the others
    The term intellectual property" leads people to focus on the meagercommon aspect of these disparate laws, which is that they establishvarious abstractions that can be bought and sold, and ignore the im-portant aspect, which is the restrictions they place on the public andwhat good or harm those restrictions cause
    If you want to think clearly about the issues raised by patents, copyights, and trademarks, or even learn what these laws require , the firststep is to forget that you ever heard the term"intellectual propertyand treat them as unrelated subjects. To give clear information and encourage clear thinking, never speak or write about" intellectual prop-erty"; instead, present the topic as copyright, patents, or whicheverspecific law you are discussing
    According to Professor mark lemley of the university of Texas law
    School. the widespread use of term "intellectual property? is a recentfad, arising from the 1967 founding of the World Intellectual Property
    Organization(WIPO). WIPO represents the interests of the holdersof copyrights, patents, and trademarks, and lobbies governments toincrease their power. One WIPO treaty follows the lines of the digital
    Millennium Copyright Act, which has been used to censor useful freesoftware packages in the U.S. 2
    Piracy
    Publishers often refer to prohibited copying as "piracy. In this way,they imply that illegal copying is ethically equivalent to attackinships on the high seas, kidnaping and murdering the people on them
    See footnote 123 in his March 1997 book review, in the Texas law review, of Romantic Authorshipand the rhetoric of property by James Boyle
    2Seehttp://www.wipout.netforacounter-wipocampaign

==========第200页==========
    Chapter 21: Words to Avoid
    195
    If you dont believe that illegal copying is just like kidnaping andmurder, you might prefer not to use the word piracy" to describe it
    Neutral terms such as“ prohibited copying”or‘ unauthorized copying are available for use instead. Some of us might even prefer to usea positive term such as"sharing information with your neighbor
    Protection Publishers' lawyers love to use the term"" to describe copy-
    right. This word carries the implication of preventing destruction orsuffering; therefore, it encourages people to identify with the ownerand publisher who benefit from copyright, rather than with the userswho are restricted by it
    It is easy to avoid"protection"and use neutral terms instead. Foexample, instead of Copyright protection lasts a very long time, youcan say, Copyright lasts a very long time
    If you want to criticize copyright instead of supporting it, you can usethe term " copyright restrictions
    RAND (reasonable and non-discriminatory
    Standards bodies that promulgate patent-restricted standards that pro-hibit free software typically have a policy of obtaining patent licensesthat require a fixed fee per copy of a conforming program. They oftenrefer to such licenses by the term“RAND,” which stands for‘ reasonable and non-discriminatory
    That term whitewashes a class of patent licenses that are normally nei-ther reasonable nor non-discriminatory. It is true that these licenses donot discriminate against any specific person, but they do discriminateagainst the free software community, and that makes them unreason-able. Thus, half of"RAND is deceptive and the other half is prejudiced
    Standards bodies should recognize that these licenses are discrimina-tory and drop the use of the term "reasonable and non -discriminatoryor"RaND to describe them. Until they do so other writers who donot wish to join in the whitewashing would do well to reject that term
    To accept and use it merely because patent-wielding companies havemade it widespread is to let those companies dictate the views youexpress
    I suggest the term uniform fee only, orUFO for short, as a replacement. It is accurate because the only condition in these licensesis a uniform royalty fee
    Sell software
    The term " sell software"is ambiguous. Strictly speaking, exchangina copy of a free program for a sum of money is"selling; but people
    Isually associate the term"sell" with proprietary restrictions on thesubsequent use of the software. You can be more precise, and preventconfusion, by saying either "distributing copies of a program for a

==========第201页==========
    196
    Free Software, Free Society: Selected essays of richard m. stallman
    fee"or" imposing proprietary restrictions on the use of a program,depending on what you mean
    See"Selling free softwarefor more discussion of this issue
    Theft
    Copyright apologists often use words like"stolen"and thett to describe copyright infringement. At the same time, they ask us to treatthe legal system as an authority on ethics: if copying is forbidden, itmust be wrong
    So it is pertinent to mention that the legal system-at least in the
    U.S.rejects the idea that copyright infringement is"theft. Copyright apologists are making an appeal to authority. . and misrepresenting what the authority says
    The idea that laws decide what is right or wrong is mistaken in general. Laws are, at their best, an attempt to achieve justice; to say thatlaws define justice or ethical conduct is turning things upside down

==========第202页==========
    Section four
    197
    Section four
    TThe licenses
    绕k

==========第203页==========
    Free Software. Free Society Selected essays of richard M. stallman

==========第204页==========
    GNU General Public license
    GNU General public license
    Version 2. June 1991
    Copyright o 1989, 1991 Free Software Foundation, Inc59 Temple Place-Suite 330, Boston, MA 02111-1307, USA
    Everyone is permitted to copy and distribute verbatim copiesof this license document, but changing it is not allowed
    Preamble
    e The licenses for most software are designed to take away your freedom to shared change it. by contrast, the gnu general Public license is intended to guarantee your freedom to share and change free software-to make sure the softwarefree for all its users. This General Public License applies to most of the Free
    Software Foundations software and to any other program whose authors committo using it.(Some other free Software Foundation software is covered by the gnu
    Library general Public License instead. You can apply it to your programs, too
    When we speak of free software, we are referring to freedom, not price. Our
    General Public licenses are designed to make sure that you have the freedom todistribute copies of free software(and charge for this service if you wish), that youreceive source code or can get it if you want it, that you can change the software oruse pieces of it in new free programs; and that you know you can do these things.
    To protect your rights we need to make restrictions that forbid anyone to denyyou these rights or to ask you to surrender the rights. These restrictions translateto certain responsibilities for you if you distribute copies of the software, or if youmodify it
    For example, if you distribute copies of such a program, whether gratis or for afee, you must give the recipients all the rights that you have. You must make surethat they too receive or can get the source code. and you must show them theseterms so they know their rights
    We protect your rights with two steps: (1)copyright the software, and(2)offeryou this license which gives you legal permission to copy, distribute and/or modifyhe software
    Also, for each authors protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software ismodified by someone else and passed on, we want its recipients to know that whatthey have is not the original, so that any problems introduced by others will notreflect on the original authors reputations
    Finally, any free program is threatened constantly by software patents. We wishto avoid the danger that redistributors of a free program will individually obtainpatent licenses, in effect making the program proprietary. To prevent this, we havemade it clear that any patent must be licensed for everyones free use or not licensed
    The precise terms and conditions for copying, distribution and modification fol-

==========第205页==========
    200
    Free Software, Free Society: Selected essays of richard m. stallman
    TERMS AND CONDITIONS FOR COPYING,DISTRIBUTION AND MODIFICATION
    0. This License applies to any program or other work which contains a noticeplaced by the copyright holder saying it may be distributed under the terms ofthis General Public license. The" Program, below, refers to any such pro-gram or work, and a"work based on the program means either the Programor any derivative work under copyright law: that is to say, a work containingthe Program or a portion of it, either verbatim or with modifications and/ortranslated into another language.(hereinafter, translation is included withoutlimitation in the term"modification".)Each licensee is addressed as"you
    Activities other than copying, distribution and modification are not coveredby this License; they are outside its scope. The act of running the Program isnot restricted, and the output from the program is covered only if its contentsconstitute a work based on the program (independent of having been madeby running the program). Whether that is true depends on what the program
    1. You may copy and distribute verbatim copies of the programs source code asyou receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer ofwarranty keep intact all the notices that refer to this license and to the absence of any warranty; and give any other recipients of the program a copy ofthis license along with the Program
    You may charge a fee for the physical act of transferring a copy, and you mayat your option offer warranty protection in exchange for a fee
    2. You may modify your copy or copies of the Program or any portion of it, thusforming a work based on the Program, and copy and distribute such modifications or work under the terms of Section I above, provided that you also meetll of these conditions
    a. You must cause the modified files to carry prominent notices stating thatyou changed the files and the date of any change
    b. You must cause any work that you distribute or publish that in whole orin part contains or is derived from the Program or any part thereof, to belicensed as a whole at no charge to all third parties under the terms of this
    License
    C. If the modified program normally reads commands interactively whenrun, you must cause it, when started running for such interactive use inthe most ordinary way, to print or display an announcement including anappropriate copyright notice and a notice that there is no warranty(orelse, saying that you provide a warranty) and that users may redistributethe program under these conditions, and telling the user how to view acopy of this license.(Exception: if the Program itself is interactive butdoes not normally print such an announcement, your work based on the
    Program is not required to print an announcement.

==========第206页==========
    GNU General Public license
    201
    These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonablyconsidered independent and separate works in themselves, then this License,and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a wholewhich is a work based on the program the distribution of the whole must beon the terms of this license, whose permissions for other licensees extend tothe entire whole, and thus to each and every part regardless of who wrote it
    Thus, it is not the intent of this section to claim rights or contest your rights towork written entirely by you; rather, the intent is to exercise the right to controlthe distribution of derivative or collective works based on the program
    In addition, mere aggregation of another work not based on the Program withthe Program(or with a work based on the program) on a volume of a storageor distribution medium does not bring the other work under the scope of this
    License
    3. You may copy and distribute the Program (or a work based on it, under Section2)in object code or executable form under the terms of Sections I and 2 aboveprovided that you also do one of the followin
    a. Accompany it with the complete corresponding machine-readable sourcecode which must be distributed under the terms of sections l and 2 aboveon a medium customarily used for software interchange; or
    b. Accompany it with a written offer, valid for at least three years, to giveany third party, for a charge no more than your cost of physically per-forming source distribution, a complete machine-readable copy of thecorresponding source code, to be distributed under the terms of SectionsI and 2 above on a medium customarily used for software interchange
    c. accompany it with the information you received as to the offer to dis-tribute corresponding source code. (This alternative is allowed only fornoncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsectionb above.)
    The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code meansall the source code for all modules it contains, plus any associated interfacedefinition files, plus the scripts used to control compilation and installation ofthe executable. However, as a special exception, the source code distributedneed not include anything that is normally distributed in either source or bi-nary form) with the major components (compiler, kernel, and so on) of theoperating system on which the executable runs, unless that component itselfaccompanies the executabl
    If distribution of executable or object code is made by offering access to copyfrom a designated place, then offering equivalent access to copy the sourcecode from the same place counts as distribution of the source code, even

==========第207页==========
    202
    Free Software, Free Society: Selected essays of richard m. stallman
    though third parties are not compelled to copy the source along with the objectcode
    4. You may not copy, modify, sublicense, or distribute the Program except asexpressly provided under this license. Any attempt otherwise to copy, modifysublicense or distribute the program is void. and will automatically terminateyour rights under this license. However, parties who have received copies, orrights, from you under this license will not have their licenses terminated solong as such parties remain in full compliance
    5. You are not required to accept this license, since you have not signed it. However, nothing else grants you permission to modify or distribute the programor its derivative works. These actions are prohibited by law if you do not accept this license. Therefore, by modifying or distributing the Program(or anywork based on the Program), you indicate your acceptance of this license todo so, and all its terms and conditions for copying, distributing or modifyinthe program or works based on it
    6. Each time you redistribute the program (or any work based on the Programthe recipient automatically receives a license from the original licensor tocopy, distribute or modify the Program subject to these terms and conditions
    You may not impose any further restrictions on the recipients' exercise of therights granted herein. You are not responsible for enforcing compliance bythird parties to this license
    7. If, as a consequence of a court judgment or allegation of patent infringement orfor any other reason(not limited to patent issues), conditions are imposed onyou(whether by court order, agreement or otherwise) that contradict the con-ditions of this license, they do not excuse you from the conditions of this li-cense. If you cannot distribute so as to satisfy simultaneously your obligationsunder this license and any other pertinent obligations, then as a consequenceyou may not distribute the program at all. For example, if a patent licensewould not permit royalty-free redistribution of the program by all those whoreceive copies directly or indirectly through you, then the only way you couldsatisfy both it and this license would be to refrain entirely from distributionof the program
    If any portion of this section is held invalid or unenforceable under any par-ticular circumstance, the balance of the section is intended to apply and thesection as a whole is intended to apply in other circumstances
    It is not the purpose of this section to induce you to infringe any patents orother property right claims or to contest validity of any such claims: this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributedthrough that system in reliance on consistent application of that system; it isup to the author/donor to decide if he or she is willing to distribute softwarethrough any other system and a licensee cannot impose that ch
    This section is intended to make thoroughly clear what is believed to beconsequence of the rest of this license

==========第208页==========
    GNU General Public license
    203
    8. If the distribution and/or use of the program is restricted in certain countrieseither by patents or by copyrighted interfaces, the original copyright holderwho places the Program under this License may add an explicit geographicaldistribution limitation excluding those countries so that distribution is permitted only in or among countries not thus excluded. In such case, this licenseincorporates the limitation as if written in the body of this license
    9. The Free Software Foundation may publish revised and/or new versions of the
    General Public license from time to time. Such new versions will be similarin spirit to the present version, but may differ in detail to address new problemsor concerns
    Each version is given a distinguishing version number. If the Program specifiesa version number of this license which applies to it and"any later versionyou have the option of following the terms and conditions either of that versionor of any later version published by the free Software Foundation. If the
    Program does not specify a version number of this license, you may chooseany version ever published by the Free Software Foundation
    10. If you wish to incorporate parts of the Program into other free programs whosedistribution conditions are different, write to the author to ask for permission
    For software which is copyrighted by the Free Software Foundation, write tothe Free Software Foundation; we sometimes make exceptions for this. Ourdecision will be guided by the two goals of preserving the free status of allderivatives of our free software and of promoting the sharing and reuse ofsoftware generally.
    NO WARRANTY
    11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE. THERE
    IS NO WARRANTY FOR THE PROGRAM. TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATEDIN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE PROGRAM "AS IS WITHOUT WARRANTY OF ANYKIND EITHER EXPRESSED OR IMPLIED. INCLUDING. BUT NOTLIMITED TO. THE IMPLIED WARRANTIES OF MERCHANTABILITYAND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITHYOU SHOULD THE PROGRAM PROVE DEFECTIVE. YOU ASSUMETHE COST OF ALL NECESSARY SERVICING. REPAIR OR CORRECTION
    12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
    AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER. ORANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTETHE PROGRAM AS PERMITTED ABOVE. BE LIABLE TO YOU FORDAMAGES. INCLUDING ANY GENERAL. SPECIAL. INCIDENTALOR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE ORINABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED

==========第209页==========
    204
    Free Software, Free Society: Selected essays of richard m. stallman
    TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE ORLOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILUREOF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMSEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OFTHE POSSIBILITY OF SUCH DAMAGES
    END OF TERMS AND CONDITIONS

==========第210页==========
    GNU General Public license
    205
    Appendix: How to Apply These Terms to Your New
    Programs
    If you develop a new program, and you want it to be of the greatest possible useto the public, the best way to achieve this is to make it free software which everyonecan redistribute and change under these terms
    To do So, attach the following notices to the program. It is safest to attach themto the start of each source file to most effectively convey the exclusion of warrantyand each file should have at least the copyright line and a pointer to where thefull notice is found
    one line to give the program's name and a brief idea of what it doesopyright (C)yyyy name of author
    This program is free software; you can redistribute it and/or modifyt under the terms of the GNU General Public license as published bythe free software foundation either version 2 of the license, oat your option) any later version
    This program is distributed in the hope that it will be usefubut WITHOUT ANY WARRANTY i without even the implied warranty ofMERCHANTABILITY Or FITNESS FOR A PARTICULAR Purpose
    See the
    GNU General Publ
    for more det a
    You should have received a copy of the GNu General Public License
    g with this program; if not, write to the Free Software
    Foundat.
    59 Temple Plac
    Suite 330 boston Ma 02111-1307 usA
    Also add information on how to contact you by electronic and paper mail
    If the program is interactive, make it output a short notice like this when it startsin an interactive mode
    Gnomovision version 69, Copyright (C) 19yy name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTYi for details type showw
    This is free software, and you are welcome to redistribute it
    s: t
    f
    The hypothetical commands show w'and'show c' should show the appropriate parts of the General Public license. Of course, the commands you use may becalled something other than 'show wand show c; they could even be mouseclicks or menu items--whatever suits your program
    You should also get your employer (if you work as a programmer) or your schoolif any, to sign a"copyright disclaimer"for the program, if necessary. Here is asample; alter the names
    Yoyodyne, Inc, hereby disclaims all copyright interest
    (which makes passes at compilers
    written by James Hacker

==========第211页==========
    206
    Free Software, Free Society: Selected essays of richard m. stallman
    ignature of Ty Coon, 1 April 1989
    Ty Coon, President of vice
    This General Public License does not permit incorporating your program intoproprietary programs. If your program is a subroutine library, you may considerit more useful to permit linking proprietary applications with the library. If this ishat you want to do, use the gnu Library General Public License instead of this
    License

==========第212页==========
    GNU Lesser General Public license
    207
    GNU Lesser General public license
    Version 2.1, February 1999
    Copyright C 1991, 1999 Free Software Foundation, Inc59 Temple Place -Suite 330, Boston, MA 02111-1307, USA
    Everyone is permitted to copy and distribute verbatim copiesof this license document, but changing it is not allowed
    TThis is the first released version of the Lesser gPl. It also countsas the successor of the gNU Library Public license, version 2, hence theversion number 2.1.1
    Preamble
    The licenses for most software are designed to take away your freedom to shareand change it. By contrast, the gnu General Public Licenses are intended to guarantee your freedom to share and change free software-to make sure the softwareis free for all its users
    This license, the Lesser General Public License, applies to some specially designated software--typically libraries-of the Free Software Foundation and otherauthors who decide to use it. You can use it too, but we suggest you first thinkcarefully about whether this license or the ordinary general public license is thebetter strategy to use in any particular case, based on the explanations below
    When we speak of free software, we are referring to freedom of use, not price
    Our General Public licenses are designed to make sure that you have the freedomto distribute copies of free software(and charge for this service if you wish); thatyou receive source code or can get it if you want it; that you can change the softwareand use pieces of it in new free programs; and that you are informed that you cando these things
    To protect your rights, we need to make restrictions that forbid distributors todeny you these rights or to ask you to surrender these rights. These restrictionstranslate to certain responsibilities for you if you distribute copies of the library orif you modify it
    For example, if you distribute copies of the library, whether gratis or for a fee,you must give the recipients all the rights that we gave you. You must make surethat they, too, receive or can get the source code. If you link other code with thelibrary, you must provide complete object files to the recipients, so that they canrelink them with the library after making changes to the library and recompiling it
    And you must show them these terms so they know their rights
    We protect your rights with a two-step method: (I)we copyright the library, and
    (2)we offer you this license, which gives you legal permission to copy, distributeand/or modify the library
    To protect each distributor, we want to make it very clear that there is no warrantyfor the free library. Also, if the library is modified by someone else and passedon, the recipients should know that what they have is not the original version, so

==========第213页==========
    208
    Free Software, Free Society: Selected essays of richard m. stallman
    that the original authors reputation will not be affected by problems that might beintroduced by others
    Finally, software patents pose a constant threat to the existence of any free pro-gram. We wish to make sure that a company cannot effectively restrict the usersof a free program by obtaining a restrictive license from a patent holder. Therefore. we insist that any patent license obtained for a version of the library must beconsistent with the full freedom of use specified in this license
    Most GNU software, including some libraries, is covered by the ordinary GNu
    General Public License. This license, the gnu Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary general
    Public License. We use this license for certain libraries in order to permit linkingthose libraries into non -free programs
    When a program is linked with a library, whether statically or using a sharedlibrary, the combination of the two is legally speaking a combined work, a deriva-tive of the original library. The ordinary General Public license therefore permitssuch linking only if the entire combination fits its criteria of freedom. The Lesser
    General Public license permits more lax criteria for linking other code with thelibrar
    We call this license the lesser general public license because it does less toprotect the user's freedom than the ordinary General Public license. It also provides other free software developers less of an advantage over competing non-freeprograms. These disadvantages are the reason we use the ordinary General Public
    License for many libraries. However, the Lesser license provides advantages incertain special circumstances
    For example on rare occasions there may be a special need to encourage thewidest possible use of a certain library, so that it becomes a de-facto standard. toachieve this, non-free programs must be allowed to use the library. A more frequentcase is that a free library does the same job as widely used non-free libraries. Inthis case, there is little to gain by limiting the free library to free software only, Sowe use the lesser general public li
    In other cases, permission to use a particular library in non-free programs enablesa greater number of people to use a large body of free software. For example, permission to use the gnu c library in non-free programs enables many more peopleto use the whole gnu operating system, as well as its variant, the gnu/linuxperating system
    Although the Lesser General Public License is Less protective of the users'freedom, it does ensure that the user of a program that is linked with the library hasthe freedom and the wherewithal to run that program using a modified version ofthe librar
    The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a" work based on the library, anda"work that uses the library,. The former contains code derived from the librarwhereas the latter must be combined with the library in order to run

==========第214页==========
    GNU Lesser General Public license
    209
    TERMS AND CONDITIONS FOR COPYING,DISTRIBUTION AND MODIFICATION
    0. This License Agreement applies to any software library or other programwhich contains a notice placed by the copyright holder or other authorizedparty saying it may be distributed under the terms of this lesser general Public License(also called"this License). Each licensee is addressed as"you
    A"library"means a collection of software functions and/or data prepared soas to be conveniently linked with application programs(which use some ofthose functions and data) to form executables
    The"Library, below, refers to any such software library or work which hasbeen distributed under these terms. a"work based on the library means either the library or any derivative work under copyright law: that is to say, awork containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language.(Hereinafter,translation is included without limitation in the term"modification".
    Source code for a work means the preferred form of the work for makingmodifications to it. For a library, complete source code means all the sourcecode for all modules it contains, plus any associated interface definition filesplus the scripts used to control compilation and installation of the library
    Activities other than copying, distribution and modification are not covered bythis License; they are outside its scope. The act of running a program usingthe library is not restricted, and output from such a program is covered onlyif its contents constitute a work based on the library (independent of the useof the library in a tool for writing it). Whether that is true depends on whatthe library does and what the program that uses the library does
    You may copy and distribute verbatim copies of the librarys complete sourcecode as you receive it, in any medium, provided that you conspicuously andappropriately publish on each copy an appropriate copyright notice and dislaimer of warranty; keep intact all the notices that refer to this license and tothe absence of any warranty and distribute a copy of this license along withthe library
    You may charge a fee for the physical act of transferring a copy, and you mayat your option offer warranty protection in exchange for a fee
    2. You may modify your copy or copies of the Library or any portion of it, thusforming a work based on the library, and copy and distribute such modifica-tions or work under the terms of Section I above, provided that you also meetll of these conditions
    a. The modified work must itself be a software library
    b. You must cause the files modified to carry prominent notices stating thatyou changed the files and the date of any change
    c. You must cause the whole of the work to be licensed at no charge to all
    third parties under the terms of this license

==========第215页==========
    210
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    d. If a facility in the modified library refers to a function or a table of datato be supplied by an application program that uses the facility, other thans an argument passed when the facility is invoked, then you must makegood faith effort to ensure that, in the event an application does not supplysuch function or table, the facility still operates, and performs whateverpart of its purpose remains meaningful
    (For example, a function in a library to compute square roots has a pur-pose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does notsupply it, the square root function must still compute square roots.
    These requirements apply to the modified work as a whole. If identifiablesections of that work are not derived from the library. and can be reasonablyconsidered independent and separate works in themselves. then this licenseand its terms, do not apply to those sections when you distribute them as sep-arate works. But when you distribute the same sections as part of a wholewhich is a work based on the library the distribution of the whole must be onthe terms of this license, whose permissions for other licensees extend to theentire whole, and thus to each and every part regardless of who wrote it
    Thus, it is not the intent of this section to claim rights or contest your rightsto work written entirely by you; rather, the intent is to exercise the right tocontrol the distribution of derivative or collective works based on the library
    In addition, mere aggregation of another work not based on the library withthe library (or with a work based on the library on a volume of a storageor distribution medium does not bring the other work under the scope of this
    License
    3. You may opt to apply the terms of the ordinary gnu general Public Licenseinstead of this License to a given copy of the library. To do this, you mustalter all the notices that refer to this license so that they refer to the ordinaryGNU General Public license, version 2, instead of to this License. (If a newerversion than version 2 of the ordinary gNu General Public License has appeared, then you can specify that version instead if you wish. Do not makeany other change in these notices
    Once this change is made in a given copy, it is irreversible for that copy, Sothe ordinary gnu General Public License applies to all subsequent copies andderivative works made from that copy
    This option is useful when you wish to copy part of the code of the libraryinto a program that is not a library
    4. You may copy and distribute the library (or a portion or derivative of it,under Section 2)in object code or executable form under the terms of SectionsI and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the termsof Sections 1 and 2 above on a medium customarily used for software interchange

==========第216页==========
    GNU Lesser General Public license
    211
    If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from thesame place satisfies the requirement to distribute the source code even thoughthird parties are not compelled to copy the source along with the object code
    5. A program that contains no derivative of any portion of the Library, but isdesigned to work with the library by being compiled or linked with it, is calleda"work that uses the Library". Such a work, in isolation, is not a derivativework of the Library and therefore falls outside the scope of this license
    However, linking a"work that uses the Library"with the Library creates anexecutable that is a derivative of the library(because it contains portions ofthe library), rather than a work that uses the library,. The executable istherefore covered by this license. Section 6 states terms for distribution ofsuch executables
    When a "work that uses the library?uses material from a header file that ispart of the Library, the object code for the work may be a derivative work of the
    Library even though the source code is not whether this is true is especiallysignificant if the work can be linked without the Library, or if the work is itselfa library The threshold for this to be true is not precisely defined by law
    If such an object file uses only numerical parameters data structure layoutsand accessors, and small macros and small inline functions(ten lines or lessin length), then the use of the object file is unrestricted, regardless of whetherit is legally a derivative work.(Executables containing this object code plusportions of the library will still fall under Section 6.)
    Otherwise, if the work is a derivative of the library you may distribute theobject code for the work under the terms of Section 6. Any executables containing that work also fall under section 6. whether or not they are linkeddirectly with the Library itself
    6. As an exception to the sections above you may also combine or link a workthat uses the library"with the library to produce a work containing portionsof the library, and distribute that work under terms of your choice, providedthat the terms permit modification of the work for the customers own use andreverse engineering for debugging such modifications
    You must give prominent notice with each copy of the work that the library isused in it and that the library and its use are covered by this license. You mustsupply a copy of this license. If the work during execution displays copyrightnotices, you must include the copyright notice for the library among them, aswell as a reference directing the user to the copy of this License. Also, youmust do one of these things
    a. Accompany the work with the complete corresponding machine-readablesource code for the library including whatever changes were used in thework(which must be distributed under Sections I and 2 above); andif the work is an executable linked with the library, with the completemachine-readable"work that uses the library, as object code and/orsource code, so that the user can modify the library and then relink to

==========第217页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    produce a modified executable containing the modified Library. (It isunderstood that the user who changes the contents of definitions files inthe library will not necessarily be able to recompile the application touse the modified definitions.)
    b. USe a suitable shared library mechanism for linking with the library. Asuitable mechanism is one that (1)uses at run time a copy of the libraryalready present on the users computer system, rather than copying library functions into the executable, and (2) will operate properly witha modified version of the library, if the user installs one, as long as themodified version is interface-compatible with the version that the workwas made with
    c. accompany the work with a written offer valid for at least three yearsto give the same user the materials specified in Subsection 6a, above, fora charge no more than the cost of performing this distribution
    d. If distribution of the work is made by offering access to copy from adesignated place, offer equivalent access to copy the above specified materials from the same pla
    e. Verify that the user has already received a copy of these materials or thatyou have already sent this user a copy
    For an executable, the required form of the"work that uses the library" mustinclude any data and utility programs needed for reproducing the executablefrom it. However, as a special exception, the materials to be distributed neednot include anything that is normally distributed (in either source or binaryform) with the major components(compiler, kernel, and so on)of the operating system on which the executable runs, unless that component itself accom-panies the executable
    It may happen that this requirement contradicts the license restrictions of otherproprietary libraries that do not normally accompany the operating system
    Such a contradiction means you cannot use both them and the library togetherin an executable that you distribute
    7. You may place library facilities that are a work based on the library sideby-Side in a single library together with other library facilities not covered bythis license, and distribute such a combined library, provided that the separatedistribution of the work based on the Library and of the other library facilitiesis otherwise permitted, and provided that you do these two things
    a. Accompany the combined library with a copy of the same work based onthe library, uncombined with any other library facilities. This must bedistributed under the terms of the sections above
    b. Give prominent notice with the combined library of the fact that partof it is a work based on the Library, and explaining where to find theaccompanying uncombined form of the same work
    8. You may not copy, modify, sublicense, link with, or distribute the libraryexcept as expressly provided under this license. Any attempt otherwise to

==========第218页==========
    GNU Lesser General Public license
    213
    copy. modify. sublicense, link with, or distribute the library is void, and willautomatically terminate your rights under this License. However, parties whohave received copies, or rights, from you under this License will not have theirlicenses terminated so long as such parties remain in full compliance
    9. You are not required to accept this license, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library orits derivative works. These actions are prohibited by law if you do not accept this license. Therefore, by modifying or distributing the library(or anywork based on the Library), you indicate your acceptance of this license todo so, and all its terms and conditions for copying, distributing or modifyingthe library or works based on it
    10. Each time you redistribute the library (or any work based on the Library), therecipient automatically receives a license from the original licensor to copy,distribute, link with or modify the library subject to these terms and condi-tions. You may not impose any further restrictions on the recipients' exerciseof the rights granted herein. You are not responsible for enforcing complianceby third parties with this license
    11. If, as a consequence of a court judgment or allegation of patent infringementor for any other reason(not limited to patent issues), conditions are imposedon you(whether by court order, agreement or otherwise) that contradict theconditions of this license. they do not excuse you from the conditions of this
    License. If you cannot distribute so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a con-sequence you may not distribute the library at all. For example, if a patentlicense would not permit royalty-free redistribution of the library by all thosewho receive copies directly or indirectly through you, then the only way youcould satisfy both it and this license would be to refrain entirely from distribution of the library
    If any portion of this section is held invalid or unenforceable under any par-ticular circumstance, the balance of the section is intended to apply, and thesection as a whole is intended to apply in other circumstances
    It is not the purpose of this section to induce you to infringe any patents orother property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many peoplehave made generous contributions to the wide range of software distributedthrough that system in reliance on consistent application of that system; it isup to the author/donor to decide if he or she is willing to distribute softwarethrough any other system and a licensee cannot impose that choice
    This section is intended to make thoroughly clear what is believed to be aconsequence of the rest of this license
    12. If the distribution and/or use of the library is restricted in certain countrieseither by patents or by copyrighted interfaces, the original copyright holderwho places the library under this license may add an explicit geographical

==========第219页==========
    214
    Free Software, Free Society: Selected Essays of Richard M. Stallman
    distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case. this licenseincorporates the limitation as if written in the body of this license
    13. The Free Software Foundation may publish revised and/or new versions of the
    Lesser general public license from time to time. Such new versions will besimilar in spirit to the present version, but may differ in detail to address newproblems or concerns
    Each version is given a distinguishing version number. If the Library specifiesa version number of this License which applies to it and"any later versionyou have the option of following the terms and conditions either of that version or of any later version published by the free software Foundation Ifthe library does not specify a license version number, you may choose anyversion ever published by the Free Software Foundation
    14. If you wish to incorporate parts of the Library into other free programs whosedistribution conditions are incompatible with these, write to the author to askfor permission For software which is copyrighted by the free Software Foundation write to the free software Foundation we sometimes make exceptionsfor this. Our decision will be guided by the two goals of preserving the freestatus of all derivatives of our free software and of promoting the sharing andreuse of software generally.
    NO WARRANTY
    15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE. THERE
    IS NO WARRANTY FOR THE LIBRARY TO THE EXTENT PERMIT-TED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATEDIN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIESPROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANYKIND. EITHER EXPRESSED OR IMPLIED. INCLUDING. BUT NOTLIMITED TO. THE IMPLIED WARRANTIES OF MERCHANTABILITYAND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK ASTO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITHYOU. SHOULD THE LIBRARY PROVE DEFECTIVE. YOU ASSUMETHE COST OF ALL NECESSARY SERVICING. REPAIR OR CORRECTION
    16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
    AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER ORANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTETHE LIBRARY AS PERMITTED ABOVE. BE LIABLE TO YOU FORDAMAGES. INCLUDING ANY GENERAL. SPECIAL. INCIDENTALOR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE ORINABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITEDTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE ORLOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OFTHE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN

==========第220页==========
    GNU Lesser General Public license
    IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES
    END OF TERMS AND CONDITIONS

==========第221页==========
    216
    Free Software, Free Society: Selected essays of richard m. stallman
    How to Apply These Terms to Your New libraries
    If you develop a new library, and you want it to be of the greatest possible useto the public, we recommend making it free software that everyone can redistributeand change. You can do so by permitting redistribution under these terms(or,alternatively, under the terms of the ordinary general Public license)
    To apply these terms, attach the following notices to the library. It is safest toattach them to the start of each source file to most effectively convey the exclusionof warranty; and each file should have at least the"copyright line and a pointer towhere the full notice is found
    e line to give the library's name and an idea of what it does
    Copyright (C) year name of author
    This library is free software; you can redistribute it and/or modifyunder the terms of the GNU Lesser General Public License as published bythe Free Software Foundation either version 2.1 of the license, or (atyour option) any later version
    brary
    s distributed in the hope that it will be useful but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSe. See the GNu
    Lesser General Public license for more details
    You should have received a copy of the GNu Lesser General Public
    ith this librar
    rite to the free software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
    Also add information on how to contact you by electronic and paper mail
    You should also get your employer (if you work as a programmer)or your school,if any, to sign a" copyright disclaimer" for the library, if necessary. Here is a sam-de alter the namespl
    Yoyodyne
    hereby disclaims all copyright interest in the librar
    Frob'(a library for tweaking knobs) written by James Random Hacker
    signature of Ty Coon, 1 April 1990
    Ty Coon president of vice
    That's all there is to it

==========第222页==========
    GNU Free Documentation license
    GNU Free Documentation license
    Version 1.1. march 2000
    Copyright 2000 Free Software Foundation, Inc
    59 Temple place. suite 330. Boston Ma 02111-1307 USA
    Everyone is permitted to copy and distribute verbatim copiesof this license document but changing it is not allowed
    O. PREAMBLE
    The purpose of this license is to make a manual, textbook, or other writtendocument free in the sense of freedom to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this license preserves for the authorand publisher a way to get credit for their work, while not being consideredresponsible for modifications made by others
    This license is a kind of "copyleft, which means that derivative works ofthe document must themsel ves be free in the same sense. It complements theGNU General Public License, which is a copyleft license designed for freesoftware
    We have designed this license in order to use it for manuals for free softwarebecause free software needs free documentation: a free program should comewith manuals providing the same freedoms that the software does but this
    License is not limited to software manuals; it can be used for any textual work,regardless of subject matter or whether it is published as a printed book. wrecommend this license principally for works whose purpose is instruction orrererence
    1. APPLICABILITY AND DEFINITIONS
    This license applies to any manual or other work that contains a notice placedy the copyright holder saying it can be distributed under the terms of this
    License. The"Document, below, refers to any such manual or work. Anymember of the public is a licensee, and is addressed as"you
    A"Modified Version"of the Document means any work containing the document or a portion of it, either copied verbatim, or with modifications and/ortranslated into another language
    A"Secondary Section is a named appendix or a front-matter section of the
    Document that deals exclusively with the relationship of the publishers or au-thors of the document to the documents overall subject (or to related matters)and contains nothing that could fall directly within that overall subject.(Forexample. if the document is in part a textbook of mathematics. a secondar
    Section may not explain any mathematicS. The relationship could be a matterof historical connection with the subject or with related matters, or of legal,commercial, philosophical, ethical or political position regarding them

==========第223页==========
    218
    Free Software, Free Society: Selected essays of richard m. stallman
    The Invariant Sections are certain Secondary sections whose titles are des-ignated, as being those of invariant Sections. in the notice that says that the
    D
    eleased under this license
    The "Cover Textsare certain short passages of text that are listed. as front
    Cover Texts or Back-Cover Texts. in the notice that says that the document isreleased under this license
    A"Transparent" copy of the Document means a machine-readable copy, rep-resented in a format whose specification is available to the general publicwhose contents can be viewed and edited directly and straightforwardly withgeneric text editors or(for images composed of pixels) generic paint programsor(for drawings) some widely available drawing editor, and that is suitable forinput to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent fileformat whose markup has been designed to thwart or discourage subsequentmodification by readers is not Transparent. A copy that is not" Transparentis calledˇ Opaque
    Examples of suitable formats for Transparent copies include plain ASCIi with-out markup, Texinfo input format, LaTEX input format, SGML or XML using apublicly available DTD, and standard-conforming simple HTml designed forhuman modification Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGMLor XML for which the DTD and/or processing tools are not generally available,and the machine-generated HTml produced by some word processors for output purposes only
    The"Title Page"means, for a printed book, the title page itself, plus such fol-lowing pages as are needed to hold, legibly, the material this License requiresto appear in the title page. For works in formats which do not have any titlepage as such, Title Page"means the text near the most prominent appearanceof the works title, preceding the beginning of the body of the text
    2.Ⅴ ERBATIM COPYING
    You may copy and distribute the document in any medium, either commercially or noncommercially, provided that this license, the copyright noticesand the license notice saying this license applies to the document are reproduced in all copies and that you add no other conditions whatsoever to thoseof this license. You may not use technical measures to obstruct or controthe reading or further copying of the copies you make or distribute. However,you may accept compensation in exchange for copies. If you distribute a largeenough number of copies you must also follow the conditions in section 3
    You may also lend copies, under the same conditions stated above and youmay publicly display copies
    3. COPYING IN QUANTITY
    If you publish printed copies of the Document numbering more than 100, andthe documents license notice requires Cover Texts you must enclose thecopies in covers that carry, clearly and legibly, all these Cover Texts: Front

==========第224页==========
    GNU Free Documentation license
    219
    Cover Texts on the front cover. and Back -Cover Texts on the back cover. bothcovers must also clearly and legibly identify you as the publisher of thesecopies. The front cover must present the full title with all words of the titleequally prominent and visible. You may add other material on the covers inaddition. Copying with changes limited to the covers, as long as they preserve the title of the document and satisfy these conditions can be treated asverbatim copying in other respects
    If the required texts for either cover are too voluminous to fit legibly, youhould put the first ones listed (as many as fit reasonably on the actual coverand continue the rest onto adjacent pages
    If you publish or distribute Opaque copies of the Document numbering morethan 100, you must either include a machine-readable Transparent copy alongwith each Opaque copy, or state in or with each Opaque copy a publiclyaccessible computer-network location containing a complete Transparent copyof the Document, free of added material, which the general network-usinpublic has access to download anonymously at no charge using publicstandard network protocols. If you use the latter option, you must take reasonbly prudent steps, when you begin distribution of Opaque copies in quantity,to ensure that this transparent copy will remain thus accessible at the statedlocation until at least one year after the last time you distribute an Opaquecopy(directly or through your agents or retailers)of that edition to the public
    It is requested, but not required, that you contact the authors of the documentwell before redistributing any large number of copies, to give them a chanceto provide you with an updated version of the document
    4. MODIFICATIONS
    You may copy and distribute a Modified Version of the Document under theconditions of sections 2 and 3 above, provided that you release the Modified
    Version under precisely this license, with the Modified Version filling the roleof the document, thus licensing distribution and modification of the modified
    Version to whoever possesses a copy of it. In addition, you must do thesethings in the modified version
    A. Use in the Title Page(and on the covers, if any)a title distinct from thatof the document, and from those of previous versions(which should, ifthere were any, be listed in the History section of the Document). Youmay use the same title as a previous version if the original publisher ofthat version gives permission
    B. List on the Title Page. as authors one or more persons or entities re
    sponsible for authorship of the modifications in the Modified Versiontogether with at least five of the principal authors of the Document(all ofits principal authors, if it has less than five)
    C. State on the Title page the name of the publisher of the Modified Version,
    s the publisher
    D. Preserve all the copyright notices of the document

==========第225页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    E. Add an appropriate copyright notice for your modifications adjacent tothe other copyright notices
    F. Include, immediately after the copyright notices, a license notice givinthe public permission to use the modified version under the terms of this
    License. in the form shown in the addendum below
    G. Preserve in that license notice the full lists of invariant sections and re
    quired Cover Texts given in the Documents license notice
    H. Include an unaltered copy of this license
    I. Preserve the section entitled History", and its title, and add to it an itemstating at least the title, year, new authors, and publisher of the modified
    Version as given on the Title Page. If there is no section entitled "Historyin the Document, create one stating the title, year, authors, and publisherof the document as given on its Title Page, then add an item describingthe modified Version as stated in the previous sentence
    J. Preserve the network location, if any, given in the document for publicaccess to a Transparent copy of the Document, and likewise the networklocations given in the Document for previous versions it was based on
    These may be placed in the"History"section. You may omit a networklocation for a work that was published at least four years before the document itself, or if the original publisher of the version it refers to givespermIssion
    K. In any section entitled"Acknowledgments"or"Dedications",preservethe sections title, and preserve in the section all the substance and toneof each of the contributor acknowledgments and/or dedications giventherein
    Preserve all the Invariant sections of the document unaltered in their textand in their titles Section numbers or the equivalent are not consideredpart of the section titles
    M. Delete any section entitled"Endorsements". Such a section may not be
    included in the modified version
    N. Do not retitle any existing section as Endorsements "or to conflict in titl
    with any Invariant Section
    If the modified version includes new front-matter sections or appendices thatqualify as Secondary Sections and contain no material copied from the Docu-ment, you may at your option designate some or all of these sections as invariant. To do this add their titles to the list of invariant sections in the modified
    Versions license notice. These titles must be distinct from any other sectiontitles
    You may add a section entitled"Endorsements", provided it contains nothinbut endorsements of your Modified Version by various parties-for examplestatements of peer review or that the text has been approved by an organizationas the authoritative definition of a standard
    You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover

==========第226页==========
    GNU Free Documentation license
    221
    Texts in the modified version Only one passage of front-Cover Text and oneof Back-Cover Text may be added by(or through arrangements made by) anyone entity. If the document already includes a cover text for the same coverpreviously added by you or by arrangement made by the same entity you areacting on behalf of, you may not add another; but you may replace the old oneon explicit permission from the previous publisher that added the old one
    The author(s) and publisher(s) of the document do not by this license givepermission to use their names for publicity for or to assert or imply endorsement of any Modified Version
    5. COMBINING DOCUMENTS
    You may combine the document with other documents released under this
    License. under the terms defined in section 4 above for modified versionsprovided that you include in the combination all of the Invariant Sections of allof the original documents, unmodified and list them all as Invariant Sectionsof your combined work in its license notice
    The combined work need only contain one copy of this license, and multipleidentical Invariant Sections may be replaced with a single copy. If there aremultiple invariant Sections with the same name but different contents, makethe title of each such section unique by adding at the end of it, in parenthesesthe name of the original author or publisher of that section if known, or elsea unique number. Make the same adjustment to the section titles in the list of
    Invariant sections in the license notice of the combined work
    In the combination, you must combine any sections entitled"History"in thevarious original documents, forming one section entitled"History', likewise
    Dedications". You must delete all sections entitled"Endorsement entitled
    combine any sections entitled"Acknowledgments", and any sections
    6. COLLECTIONS OF DOCUMENTS
    You may make a collection consisting of the document and other documentsreleased under this license, and replace the individual copies of this licensein the various documents with a single copy that is included in the collection,provided that you follow the rules of this license for verbatim copying of eachof the documents in all other respects
    You may extract a single document from such a collection, and distribute itindividually under this license provided you insert a copy of this License intothe extracted document, and follow this license in all other respects regardinverbatim copying of that document
    7. AGGREGATION WITH INDEPENDENT WORKS
    A compilation of the document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distributionmedium. does not as a whole count as a modified Version of the documentprovided no compilation copyright is claimed for the compilation. Suchcompilation is called an"aggregate, and this license does not apply to theother self-contained works thus compiled with the Document, on account of

==========第227页==========
    Free Software, Free Society: Selected essays of richard m. stallman
    their being thus compiled, if they are not themselves derivative works of the
    Document
    If the Cover Text requirement of section 3 is applicable to these copies of the
    Document, then if the document is less than one quarter of the entire aggregate, the Documents Cover Texts may be placed on covers that surround onlythe document within the aggregate. Otherwise they must appear on coversaround the whole aggregate
    8. TRANSLATION
    Translation is considered a kind of modification, so you may distribute translations of the document under the terms of section 4. Replacing Invariant
    Sections with translations requires special permission from their copyrightholders, but you may include translations of some or all Invariant Sectionsin addition to the original versions of these Invariant Sections. You may include a translation of this license provided that you also include the originalEnglish version of this license. in case of a disagreement between the translation and the original english version of this license. the original englishversion v
    breva
    9. TERMINATION
    You may not copy, modify, sublicense, or distribute the document except asexpressly provided for under this License. Any other attempt to copy, modifysublicense or distribute the document is void and will automatically terminateyour rights under this license. however parties who have received copies orrights, from you under this License will not have their licenses terminated solong as such parties remain in full compliance
    10. FUTURE REVISIONS OF THIS LICENSE
    The Free Software Foundation may publish new, revised versions of the GNu
    Free Documentation license from time to time. Such new versions will besimilar in spirit to the present version, but may differ in detail to address newproblemsorconcernsSeehttp://www.gnu.org/copyleft/
    Each version of the License is given a distinguishing version number. If the
    Document specifies that a particular numbered version of this license"or anylater version"applies to it, you have the option of following the terms andconditions either of that specified version or of any later version that has beenpublished (not as a draft) by the Free software Foundation. If the Documentdoes not specify a version number of this License, yoou may choose any versionever published (not as a draft) by the Free software Foundation

==========第228页==========
    GNU Free Documentation license
    223
    ADDENDUM: How to Use This License for your
    Documents
    To use this license in a document you have written, include a copy of the licensein the document and put the following copyright and license notices just after thetitle page
    Copyright (C) year your name
    Permission is granted to copy, distribute and/or modify this documentder the term
    or any later version published by the Free Software Foundationth the Invariant Sections being list their titles
    th the
    Front-Cover Texts being list, and with the Back-Cover Texts being list
    luded in the section e
    If you have no Invariant Sections, write"with no Invariant Sections" instead ofsaying which ones are invariant. If you have no Front-Cover Texts, write"no Front
    Cover Texts''instead of "Front-Cover Texts being list": likewise for back-Cover
    Texts
    If your document contains nontrivial examples of program code, we recommendreleasing these examples in parallel under your choice of free software license, suchas the gnu General Public License, to permit their use in free software

==========第229页==========
    224
    Free Software. Free Society Selected essays of richard M. stallman

==========第230页==========
